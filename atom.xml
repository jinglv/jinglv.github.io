<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jean&#39;s Blog</title>
  
  <subtitle>一个专注软件测试开发技术的个人博客</subtitle>
  <link href="https://jinglv.github.io/atom.xml" rel="self"/>
  
  <link href="https://jinglv.github.io/"/>
  <updated>2025-10-10T02:00:00.000Z</updated>
  <id>https://jinglv.github.io/</id>
  
  <author>
    <name>Jean Lv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LangGraph之父子图（多工作流）</title>
    <link href="https://jinglv.github.io/2025/10/10/ai/langchain/langgraph/10-langgraph-subgraph/"/>
    <id>https://jinglv.github.io/2025/10/10/ai/langchain/langgraph/10-langgraph-subgraph/</id>
    <published>2025-10-09T16:00:00.000Z</published>
    <updated>2025-10-10T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子图简介"><a href="#子图简介" class="headerlink" title="子图简介"></a>子图简介</h1><p><strong>子图（Subgraph）</strong> 是一个可以作为节点嵌套在另一个图中的图，是 <strong>封装与模块化编程</strong> 在 LangGraph 中的体现。</p><p>使用子图的常见目的包括：</p><ul><li>构建 <strong>多智能体系统</strong></li><li><strong>复用</strong>一组节点逻辑</li><li><strong>解耦开发</strong>：不同团队可独立开发图的不同部分</li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20251010100114277.png" alt="image-20251010100114277" style="zoom:67%;" /></p><h1 id="子图的使用方式"><a href="#子图的使用方式" class="headerlink" title="子图的使用方式"></a>子图的使用方式</h1><h2 id="共享状态键（Shared-State）"><a href="#共享状态键（Shared-State）" class="headerlink" title="共享状态键（Shared State）"></a>共享状态键（Shared State）</h2><p>父图与子图有相同的状态键（如 <code>foo</code>），通过这些键交换数据。</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 子图状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SubgraphState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    foo: <span class="built_in">str</span></span><br><span class="line">    bar: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 父图状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ParentState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    foo: <span class="built_in">str</span></span><br></pre></td></tr></table></figure><p>构建步骤:</p><ol><li>定义子图逻辑，注意状态键中含有共享键 <code>foo</code></li><li>使用 <code>.add_node(name, subgraph)</code> 将子图作为节点引入父图</li><li>子图将自动接收并更新共享键的数据</li></ol><p>优点：</p><ul><li>简单、无状态映射</li><li>子图可以直接更新父图中的状态</li></ul><h2 id="不同状态模式（Isolated-State）"><a href="#不同状态模式（Isolated-State）" class="headerlink" title="不同状态模式（Isolated State）"></a>不同状态模式（Isolated State）</h2><p>父图与子图状态完全不同，需要进行 <strong>输入映射 / 输出映射</strong>。典型使用场景：多智能体系统中，每个智能体维护 <strong>独立消息历史，</strong>子图结构复杂，不希望污染父图状态空间。</p><h4 id="构建步骤："><a href="#构建步骤：" class="headerlink" title="构建步骤："></a>构建步骤：</h4><ol><li>子图使用独立的 <code>TypedDict</code> 状态</li><li>父图中定义一个节点函数 <code>call_subgraph</code>：<ul><li>接收父图状态 → 构造子图输入</li><li>调用 <code>subgraph.invoke()</code> → 获取子图输出</li><li>将子图输出转换为父图更新</li></ul></li></ol><p>优点：</p><ul><li>高度封装、强隔离</li><li>可嵌套多级图结构（支持子图 → 孙图）</li></ul><h1 id="子图持久化（Checkpoint）"><a href="#子图持久化（Checkpoint）" class="headerlink" title="子图持久化（Checkpoint）"></a>子图持久化（Checkpoint）</h1><p>子图也能参与持久化机制，只需在父图编译时配置 <code>checkpointer</code>。</p><p><strong>使用方式：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 父图中设置检查点</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=InMemorySaver())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译子图时也启用检查点</span></span><br><span class="line">subgraph = subgraph_builder.<span class="built_in">compile</span>(checkpointer=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>此时每个子图拥有独立的状态历史（如多智能体的对话上下文）。</p><p><strong>查看子图状态</strong></p><p>在中断发生时，可以查看子图状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.get_state(config, subgraphs=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>⚠️ <strong>只能在中断（interrupt）时查看子图状态</strong>，运行恢复后将无法获取。</p><h1 id="子图输出的流式传输"><a href="#子图输出的流式传输" class="headerlink" title="子图输出的流式传输"></a>子图输出的流式传输</h1><p>要将子图的输出包含在流式输出中，您可以在父图的 <code>.stream()</code> 方法中设置 <code>subgraphs=True</code>。这将从父图和任何子图中流式传输输出。</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;foo&quot;</span>: <span class="string">&quot;foo&quot;</span>&#125;,</span><br><span class="line">    subgraphs=<span class="literal">True</span>,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/10/10 10:14</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">父子工作流（状态共享）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">主工作流：</span></span><br><span class="line"><span class="string">1. 用户输入需求文档</span></span><br><span class="line"><span class="string">2. 分析出所有的测试点的子工作流：基于需求整理测试点 ---&gt; 验证测试点覆盖率 ---&gt;对于覆盖率的测试点补全 ---&gt;输出所有的测试点</span></span><br><span class="line"><span class="string">3. 基于上一个节点生成的测试点生成指定格式的测试用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">父子图（工作流）需要共享的数据（父子状态中的数据一致）</span></span><br><span class="line"><span class="string">1. 需求文档</span></span><br><span class="line"><span class="string">2. 生成的测试点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict, <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> JsonOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> InMemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.config <span class="keyword">import</span> get_stream_writer</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主工作流的状态&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 输入需求文档</span></span><br><span class="line">    input_requirement: <span class="built_in">str</span></span><br><span class="line">    test_point: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">str</span></span><br><span class="line">    <span class="comment"># 测试用例覆盖率的报告分析</span></span><br><span class="line">    test_case_coverage_report: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateSub</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子工作流的状态&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 输入需求文档</span></span><br><span class="line">    input_requirement: <span class="built_in">str</span></span><br><span class="line">    <span class="comment"># 生成的测试点</span></span><br><span class="line">    test_point: <span class="built_in">str</span></span><br><span class="line">    <span class="comment"># 覆盖率分析报告</span></span><br><span class="line">    coverage_report: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========================子工作流的实现=========================</span></span><br><span class="line"><span class="comment"># 基于需求整理测试点 节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_test_points</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于需求文档生成测试点&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：基于需求文档生成测试点&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取用户输入的文档</span></span><br><span class="line">    input_requirement = state.get(<span class="string">&quot;input_requirement&quot;</span>)</span><br><span class="line">    <span class="comment"># 编写提示词</span></span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;document&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        - Role: 资深测试工程师</span></span><br><span class="line"><span class="string">        - Background: 用户需要根据需求文档生成测试用例，要求以“功能正常+边界+异常”为主线思维指导生成测试点，以确保软件功能的完整性和稳定性。</span></span><br><span class="line"><span class="string">        - Profile: 你是一位经验丰富的资深测试工程师，精通软件测试理论与实践，擅长从需求文档中挖掘测试点，能够全面覆盖功能正常、边界条件和异常情况。</span></span><br><span class="line"><span class="string">        - Skills: 你具备需求分析能力、测试用例设计能力、边界值分析能力、异常处理能力以及对软件质量的敏锐洞察力。</span></span><br><span class="line"><span class="string">        - Goals: 根据用户提供的需求文档，生成全面且详细的测试点，确保测试用例能够覆盖功能正常、边界条件和异常情况。</span></span><br><span class="line"><span class="string">        - Constrains: 生成的测试点需遵循“功能正常+边界+异常”的主线思维指导，格式需清晰、规范，便于理解和执行。</span></span><br><span class="line"><span class="string">        - OutputFormat: 按照示例格式输出测试点，分为“正向验证”“边界测试”“异常处理”三个部分。</span></span><br><span class="line"><span class="string">        - Workflow:</span></span><br><span class="line"><span class="string">          1. 仔细阅读需求文档，理解功能描述和业务逻辑。</span></span><br><span class="line"><span class="string">          2. 根据功能描述，列出功能正常情况下的测试点。</span></span><br><span class="line"><span class="string">          3. 分析功能的边界条件，设计边界测试点。</span></span><br><span class="line"><span class="string">          4. 考虑可能出现的异常情况，设计异常处理测试点。</span></span><br><span class="line"><span class="string">        - Examples:</span></span><br><span class="line"><span class="string">          - 示例1：需求文档描述了一个登录功能，包括用户名和密码验证。</span></span><br><span class="line"><span class="string">            └─ 正向验证</span></span><br><span class="line"><span class="string">               ├─ 输入正确的用户名和密码，成功登录</span></span><br><span class="line"><span class="string">               ├─ 登录后跳转到正确的页面</span></span><br><span class="line"><span class="string">               └─ 多次登录后仍能正常跳转</span></span><br><span class="line"><span class="string">            └─ 边界测试</span></span><br><span class="line"><span class="string">               ├─ 用户名长度为最小值时登录</span></span><br><span class="line"><span class="string">               ├─ 密码长度为最大值时登录</span></span><br><span class="line"><span class="string">               └─ 用户名或密码为空时登录</span></span><br><span class="line"><span class="string">            └─ 异常处理</span></span><br><span class="line"><span class="string">               ├─ 输入错误的用户名，提示“用户名不存在”</span></span><br><span class="line"><span class="string">               ├─ 输入错误的密码，提示“密码错误”</span></span><br><span class="line"><span class="string">               └─ 网络异常时登录，提示“网络连接失败，请重试”</span></span><br><span class="line"><span class="string">          - 示例2：需求文档描述了一个文件上传功能，包括文件大小和格式限制。</span></span><br><span class="line"><span class="string">            └─ 正向验证</span></span><br><span class="line"><span class="string">               ├─ 上传符合大小和格式要求的文件，成功上传</span></span><br><span class="line"><span class="string">               ├─ 上传后文件在服务器正确存储</span></span><br><span class="line"><span class="string">               └─ 上传多个文件后仍能正常操作</span></span><br><span class="line"><span class="string">            └─ 边界测试</span></span><br><span class="line"><span class="string">               ├─ 上传文件大小为最小值时的情况</span></span><br><span class="line"><span class="string">               ├─ 上传文件大小为最大值时的情况</span></span><br><span class="line"><span class="string">               └─ 上传文件格式为支持的边缘格式时的情况</span></span><br><span class="line"><span class="string">            └─ 异常处理</span></span><br><span class="line"><span class="string">               ├─ 上传超过大小限制的文件，提示“文件过大”</span></span><br><span class="line"><span class="string">               ├─ 上传不支持格式的文件，提示“不支持的文件格式”</span></span><br><span class="line"><span class="string">               └─ 网络异常时上传，提示“上传失败，请检查网络连接”</span></span><br><span class="line"><span class="string">        input:&#123;document&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    chain = prompt | qv_llm</span><br><span class="line">    <span class="comment"># 调用大模型进行生成</span></span><br><span class="line">    response = chain.invoke(&#123;<span class="string">&quot;document&quot;</span>: input_requirement&#125;)</span><br><span class="line">    test_point = response.content</span><br><span class="line">    <span class="comment"># 获取大模型调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_point&quot;</span>: test_point&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证测试点覆盖率 节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_test_points_coverage</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;验证测试点的覆盖率&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：验证测试点的覆盖率&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_point&quot;</span>, <span class="string">&quot;document&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            你是一位资深的软件测试工程师，请根据提供原始的需求文档和测试点，去分析</span></span><br><span class="line"><span class="string">            原始功能文档：</span></span><br><span class="line"><span class="string">            &#123;document&#125;</span></span><br><span class="line"><span class="string">            测试点：</span></span><br><span class="line"><span class="string">            &#123;test_point&#125;</span></span><br><span class="line"><span class="string">            如果测试点覆盖了需求中所有的功能，则直接回复：测试点已经全部覆盖</span></span><br><span class="line"><span class="string">            如果没有全部覆盖，请给出覆盖率分析报告</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    chain = prompt | qv_llm</span><br><span class="line">    <span class="comment"># 调用大模型进行生成</span></span><br><span class="line">    response = chain.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;test_point&quot;</span>),</span><br><span class="line">        <span class="string">&quot;document&quot;</span>: state.get(<span class="string">&quot;input_requirement&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    coverage_report = response.content</span><br><span class="line">    <span class="comment"># 获取大模型调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;coverage_report&quot;</span>: coverage_report&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补全生成测试点的 节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complete_test_points</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;补全生成测试点&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：补全生成测试点&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_point&quot;</span>, <span class="string">&quot;document&quot;</span>, <span class="string">&quot;coverage_report&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            你是一位资深的软件测试工程师，请根据原始的需求文档和测试点和覆盖分析报告，去补充未覆盖的测试点，添加在输入的测试点后面</span></span><br><span class="line"><span class="string">                原始功能文档：</span></span><br><span class="line"><span class="string">                &#123;document&#125;</span></span><br><span class="line"><span class="string">                输入的测试点：</span></span><br><span class="line"><span class="string">                &#123;test_point&#125;</span></span><br><span class="line"><span class="string">                覆盖分析报告：</span></span><br><span class="line"><span class="string">                &#123;coverage_report&#125; </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    chain = prompt | qv_llm</span><br><span class="line">    <span class="comment"># 调用大模型进行生成测试点</span></span><br><span class="line">    response = chain.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;test_point&quot;</span>),</span><br><span class="line">        <span class="string">&quot;document&quot;</span>: state.get(<span class="string">&quot;input_requirement&quot;</span>),</span><br><span class="line">        <span class="string">&quot;coverage_report&quot;</span>: state.get(<span class="string">&quot;coverage_report&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    test_point = response.content</span><br><span class="line">    <span class="comment"># 获取大模型调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_point&quot;</span>: test_point&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出所有的测试点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">output_all_test_points</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;输出所有的测试点&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：输出所有的测试点&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;test_point&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由分发的节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route_dispatch</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;路由分派&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：根据测试点的覆盖情况进行路由分发&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;测试点已经全部覆盖&quot;</span> <span class="keyword">in</span> state[<span class="string">&quot;coverage_report&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;输出所有测试点&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;补全生成测试点&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：这个是使用Command来指点节点的路由跳转</span></span><br><span class="line"><span class="comment"># def route_dispatch(state: State2):</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;路由分派&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     if &quot;测试点已经全部覆盖&quot; in state[&quot;coverage_report&quot;]:</span></span><br><span class="line"><span class="comment">#         return Command(goto=&quot;输出所有测试点&quot;)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         return Command(goto=&quot;补全生成测试点&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(START, &quot;生成测试点&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;生成测试点&quot;, &quot;验证测试点覆盖率&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;验证测试点覆盖率&quot;, &quot;路由分派&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;补全生成测试点&quot;, &quot;验证测试点覆盖率&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;输出所有测试点&quot;, END)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对子节点进行编排</span></span><br><span class="line">workflow = StateGraph(StateSub)</span><br><span class="line"><span class="comment"># 添加工作流的节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;生成测试点&quot;</span>, generate_test_points)</span><br><span class="line">workflow.add_node(<span class="string">&quot;验证测试点覆盖率&quot;</span>, verify_test_points_coverage)</span><br><span class="line">workflow.add_node(<span class="string">&quot;路由分派&quot;</span>, route_dispatch)</span><br><span class="line">workflow.add_node(<span class="string">&quot;补全生成测试点&quot;</span>, complete_test_points)</span><br><span class="line">workflow.add_node(<span class="string">&quot;输出所有测试点&quot;</span>, output_all_test_points)</span><br><span class="line"><span class="comment"># 对节点进行编排</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;生成测试点&quot;</span>)</span><br><span class="line">workflow.add_edge(<span class="string">&quot;生成测试点&quot;</span>, <span class="string">&quot;验证测试点覆盖率&quot;</span>)</span><br><span class="line">workflow.add_conditional_edges(<span class="string">&quot;验证测试点覆盖率&quot;</span>, route_dispatch, [<span class="string">&quot;补全生成测试点&quot;</span>, <span class="string">&quot;输出所有测试点&quot;</span>])</span><br><span class="line">workflow.add_edge(<span class="string">&quot;补全生成测试点&quot;</span>, <span class="string">&quot;验证测试点覆盖率&quot;</span>)</span><br><span class="line">workflow.add_edge(<span class="string">&quot;输出所有测试点&quot;</span>, END)</span><br><span class="line"><span class="comment"># 对节点进行编译(作为子工作流使用，配置checkpointer=True即可开启子图的检查点)</span></span><br><span class="line">graph_sub = workflow.<span class="built_in">compile</span>(checkpointer=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========================工作流的开发=========================</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCaseModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试用例数据模型&quot;&quot;&quot;</span></span><br><span class="line">    case_id: <span class="built_in">str</span></span><br><span class="line">    case_name: <span class="built_in">str</span></span><br><span class="line">    priority: <span class="built_in">str</span></span><br><span class="line">    preconditions: <span class="built_in">str</span></span><br><span class="line">    test_steps: <span class="built_in">str</span></span><br><span class="line">    test_data: <span class="built_in">str</span></span><br><span class="line">    expected_result: <span class="built_in">str</span></span><br><span class="line">    actual_result: <span class="built_in">str</span> | <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用例的节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于测试点生成特定格式的测试用例&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：基于测试点生成特定格式的测试用例&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_point&quot;</span>, <span class="string">&quot;test_cases&quot;</span>, <span class="string">&quot;test_case_coverage_report&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">           你是一位资深测试工程师，请基于下面功能整理的出来的测试点,生成标准的测试用例，</span></span><br><span class="line"><span class="string">            输入测试点：</span></span><br><span class="line"><span class="string">                &#123;test_point&#125;</span></span><br><span class="line"><span class="string">           如果提供已经编写的测试用例和覆盖率分析报告，则在提供的测试用例基础和覆盖率分析报告的基础上补充生成未覆盖测试点的用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">               已经生成的用例:</span></span><br><span class="line"><span class="string">                &#123;test_cases&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">               覆盖率分析报告:</span></span><br><span class="line"><span class="string">                &#123;test_case_coverage_report&#125; </span></span><br><span class="line"><span class="string">           如果没有提供已经编写的测试用例则根据测试点直接生成：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           输出的用例，包含测试用例的八要素，：</span></span><br><span class="line"><span class="string">               用例编号(case_id)</span></span><br><span class="line"><span class="string">               用例名称(case_name)</span></span><br><span class="line"><span class="string">               优先级(priority) </span></span><br><span class="line"><span class="string">               前置步骤(preconditions)</span></span><br><span class="line"><span class="string">               测试步骤(test_steps) </span></span><br><span class="line"><span class="string">               输入数据(test_data) </span></span><br><span class="line"><span class="string">               预期结果(expected_result)</span></span><br><span class="line"><span class="string">               实际结果(actual_result)</span></span><br><span class="line"><span class="string">           要以json格式输出，输出格式要求为：</span></span><br><span class="line"><span class="string">               [</span></span><br><span class="line"><span class="string">                   &#123;&#123;</span></span><br><span class="line"><span class="string">                       &quot;case_id&quot;: &quot;用例编号&quot;,</span></span><br><span class="line"><span class="string">                       &quot;case_name&quot;: &quot;用例名称&quot;,</span></span><br><span class="line"><span class="string">                       &quot;priority&quot;: &quot;优先级&quot;,</span></span><br><span class="line"><span class="string">                       &quot;preconditions&quot;: &quot;前置步骤&quot;,</span></span><br><span class="line"><span class="string">                       &quot;test_steps&quot;: &quot;测试步骤&quot;,</span></span><br><span class="line"><span class="string">                       &quot;test_data&quot;: &quot;输入数据&quot;,</span></span><br><span class="line"><span class="string">                       &quot;expected_result&quot;: &quot;预期结果&quot;,</span></span><br><span class="line"><span class="string">                       &quot;actual_result&quot;: &quot;实际结果&quot;</span></span><br><span class="line"><span class="string">                   &#125;&#125;,</span></span><br><span class="line"><span class="string">                   ...</span></span><br><span class="line"><span class="string">               ]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser = JsonOutputParser(pydantic_schema=<span class="type">List</span>[TestCaseModel])</span><br><span class="line">    chain = prompt | qv_llm | parser</span><br><span class="line">    response = chain.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;test_point&quot;</span>),</span><br><span class="line">        <span class="string">&quot;test_cases&quot;</span>: state.get(<span class="string">&quot;test_cases&quot;</span>),</span><br><span class="line">        <span class="string">&quot;test_case_coverage_report&quot;</span>: state.get(<span class="string">&quot;test_case_coverage_report&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析测试用例是否覆盖所有的测试点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_testcase_coverage</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;验证测试用例的覆盖率&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：开始验证用例覆盖率&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_cases&quot;</span>, <span class="string">&quot;test_point&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">           你是一位资深测试工程师，请根据用户下面提供的测试点和测试用例，去分析测试用例是否覆盖了所有的测试点</span></span><br><span class="line"><span class="string">               已经生成的测试用例：</span></span><br><span class="line"><span class="string">               &#123;test_cases&#125;</span></span><br><span class="line"><span class="string">               需要测试的测试点：</span></span><br><span class="line"><span class="string">               &#123;test_point&#125;</span></span><br><span class="line"><span class="string">         输入要求：</span></span><br><span class="line"><span class="string">           如果全部覆盖则直接返回：已覆盖全部测试点</span></span><br><span class="line"><span class="string">           如果没有全部覆盖则返回测试点覆盖分析报告 </span></span><br><span class="line"><span class="string">           &quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">    chian = prompt | qv_llm</span><br><span class="line">    response = chian.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_cases&quot;</span>: state.get(<span class="string">&quot;test_cases&quot;</span>),</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;test_point&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    result = response.content</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;已覆盖全部测试点&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;保存测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 再次补充生成测试用例</span></span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;生成测试用例&quot;</span>, update=&#123;<span class="string">&quot;test_case_coverage_report&quot;</span>: result&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_test_cases</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存测试用例&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：保存测试用例&quot;</span>)</span><br><span class="line">    writer(state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_workflow = StateGraph(State)</span><br><span class="line"><span class="comment"># 把子工作流添加到主工作流中的一个节点</span></span><br><span class="line">main_workflow.add_node(<span class="string">&quot;生成测试点&quot;</span>, graph_sub)</span><br><span class="line">main_workflow.add_node(<span class="string">&quot;生成测试用例&quot;</span>, generate_test_case)</span><br><span class="line">main_workflow.add_node(<span class="string">&quot;验证测试用例覆盖率&quot;</span>, verify_testcase_coverage)</span><br><span class="line">main_workflow.add_node(<span class="string">&quot;保存测试用例&quot;</span>, save_test_cases)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对节点进行编排序</span></span><br><span class="line">main_workflow.add_edge(START, <span class="string">&quot;生成测试点&quot;</span>)</span><br><span class="line">main_workflow.add_edge(<span class="string">&quot;生成测试点&quot;</span>, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line">main_workflow.add_edge(<span class="string">&quot;生成测试用例&quot;</span>, <span class="string">&quot;验证测试用例覆盖率&quot;</span>)</span><br><span class="line">main_workflow.add_edge(<span class="string">&quot;保存测试用例&quot;</span>, END)</span><br><span class="line"><span class="comment"># 对主工作流进行编译,设置检查点</span></span><br><span class="line">graph = main_workflow.<span class="built_in">compile</span>(checkpointer=InMemorySaver())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    response = graph.stream(&#123;<span class="string">&quot;input_requriment&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    功能说明文档：</span></span><br><span class="line"><span class="string">    #### 📌 F1.1 用户注册</span></span><br><span class="line"><span class="string">    ##### 🧩 功能背景</span></span><br><span class="line"><span class="string">    新用户通过注册方式创建账户，支持邮箱/用户名+密码的注册方式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 🚶 主流程</span></span><br><span class="line"><span class="string">    1. 用户打开注册页，填写注册信息</span></span><br><span class="line"><span class="string">    2. 系统校验格式与唯一性（用户名、邮箱）</span></span><br><span class="line"><span class="string">    3. 提交注册，后台创建账户，初始状态为“正常”</span></span><br><span class="line"><span class="string">    4. 注册成功后自动登录并跳转首页</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### ⚠️ 异常流程</span></span><br><span class="line"><span class="string">    - 邮箱/用户名已被注册：提示“已存在”</span></span><br><span class="line"><span class="string">    - 两次密码不一致：提示用户重新输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 📌 状态规则</span></span><br><span class="line"><span class="string">    - 新用户状态为 “正常”</span></span><br><span class="line"><span class="string">    - 注册时间记录为创建时间，头像为默认图</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 📌 业务规则</span></span><br><span class="line"><span class="string">    - 用户名唯一，支持 4~20 位字母数字组合</span></span><br><span class="line"><span class="string">    - 密码长度不少于 6 位</span></span><br><span class="line"><span class="string">    - 邮箱必须符合格式 `xxx@xxx.xx`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>&#125;,</span><br><span class="line">                            <span class="comment"># 输入子图的内容</span></span><br><span class="line">                            subgraphs=<span class="literal">True</span>,</span><br><span class="line">                            stream_mode=[<span class="string">&quot;messages&quot;</span>, <span class="string">&quot;custom&quot;</span>],</span><br><span class="line">                            config=&#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;thread_001&quot;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">        <span class="keyword">if</span> chunk[<span class="number">1</span>] == <span class="string">&quot;custom&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">elif</span> chunk[<span class="number">1</span>] == <span class="string">&quot;messages&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>][<span class="number">0</span>].content, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上案例中父子图（工作流）需要共享的数据（父子状态中的数据一致），那么要是父子状态中的数据不一致呢，该如何处理，可以看以下示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/10/10 10:40</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">父子工作流（状态共享）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">主工作流：</span></span><br><span class="line"><span class="string">1. 用户输入需求文档</span></span><br><span class="line"><span class="string">2. 分析出所有的测试点的子工作流：基于需求整理测试点 ---&gt; 验证测试点覆盖率 ---&gt;对于覆盖率的测试点补全 ---&gt;输出所有的测试点</span></span><br><span class="line"><span class="string">3. 基于上一个节点生成的测试点生成指定格式的测试用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">父子图（工作流）需要共享的数据（父子状态中的数据不一致）</span></span><br><span class="line"><span class="string">1. 需求文档</span></span><br><span class="line"><span class="string">2. 生成的测试点</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict, <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.output_parsers <span class="keyword">import</span> JsonOutputParser</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> InMemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.config <span class="keyword">import</span> get_stream_writer</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;主工作流的状态&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 输入需求文档</span></span><br><span class="line">    input_requirement: <span class="built_in">str</span></span><br><span class="line">    test_point: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">str</span></span><br><span class="line">    <span class="comment"># 测试用例覆盖率的报告分析</span></span><br><span class="line">    test_case_coverage_report: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">StateSub</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;子工作流的状态&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 输入需求文档</span></span><br><span class="line">    document: <span class="built_in">str</span></span><br><span class="line">    <span class="comment"># 生成的测试点</span></span><br><span class="line">    point: <span class="built_in">str</span></span><br><span class="line">    <span class="comment"># 覆盖率分析报告</span></span><br><span class="line">    coverage_report: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========================子工作流的实现=========================</span></span><br><span class="line"><span class="comment"># 基于需求整理测试点 节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_test_points</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于需求文档生成测试点&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：基于需求文档生成测试点&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取用户输入的文档</span></span><br><span class="line">    input_requirement = state.get(<span class="string">&quot;document&quot;</span>)</span><br><span class="line">    <span class="comment"># 编写提示词</span></span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;document&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        - Role: 资深测试工程师</span></span><br><span class="line"><span class="string">        - Background: 用户需要根据需求文档生成测试用例，要求以“功能正常+边界+异常”为主线思维指导生成测试点，以确保软件功能的完整性和稳定性。</span></span><br><span class="line"><span class="string">        - Profile: 你是一位经验丰富的资深测试工程师，精通软件测试理论与实践，擅长从需求文档中挖掘测试点，能够全面覆盖功能正常、边界条件和异常情况。</span></span><br><span class="line"><span class="string">        - Skills: 你具备需求分析能力、测试用例设计能力、边界值分析能力、异常处理能力以及对软件质量的敏锐洞察力。</span></span><br><span class="line"><span class="string">        - Goals: 根据用户提供的需求文档，生成全面且详细的测试点，确保测试用例能够覆盖功能正常、边界条件和异常情况。</span></span><br><span class="line"><span class="string">        - Constrains: 生成的测试点需遵循“功能正常+边界+异常”的主线思维指导，格式需清晰、规范，便于理解和执行。</span></span><br><span class="line"><span class="string">        - OutputFormat: 按照示例格式输出测试点，分为“正向验证”“边界测试”“异常处理”三个部分。</span></span><br><span class="line"><span class="string">        - Workflow:</span></span><br><span class="line"><span class="string">          1. 仔细阅读需求文档，理解功能描述和业务逻辑。</span></span><br><span class="line"><span class="string">          2. 根据功能描述，列出功能正常情况下的测试点。</span></span><br><span class="line"><span class="string">          3. 分析功能的边界条件，设计边界测试点。</span></span><br><span class="line"><span class="string">          4. 考虑可能出现的异常情况，设计异常处理测试点。</span></span><br><span class="line"><span class="string">        - Examples:</span></span><br><span class="line"><span class="string">          - 示例1：需求文档描述了一个登录功能，包括用户名和密码验证。</span></span><br><span class="line"><span class="string">            └─ 正向验证</span></span><br><span class="line"><span class="string">               ├─ 输入正确的用户名和密码，成功登录</span></span><br><span class="line"><span class="string">               ├─ 登录后跳转到正确的页面</span></span><br><span class="line"><span class="string">               └─ 多次登录后仍能正常跳转</span></span><br><span class="line"><span class="string">            └─ 边界测试</span></span><br><span class="line"><span class="string">               ├─ 用户名长度为最小值时登录</span></span><br><span class="line"><span class="string">               ├─ 密码长度为最大值时登录</span></span><br><span class="line"><span class="string">               └─ 用户名或密码为空时登录</span></span><br><span class="line"><span class="string">            └─ 异常处理</span></span><br><span class="line"><span class="string">               ├─ 输入错误的用户名，提示“用户名不存在”</span></span><br><span class="line"><span class="string">               ├─ 输入错误的密码，提示“密码错误”</span></span><br><span class="line"><span class="string">               └─ 网络异常时登录，提示“网络连接失败，请重试”</span></span><br><span class="line"><span class="string">          - 示例2：需求文档描述了一个文件上传功能，包括文件大小和格式限制。</span></span><br><span class="line"><span class="string">            └─ 正向验证</span></span><br><span class="line"><span class="string">               ├─ 上传符合大小和格式要求的文件，成功上传</span></span><br><span class="line"><span class="string">               ├─ 上传后文件在服务器正确存储</span></span><br><span class="line"><span class="string">               └─ 上传多个文件后仍能正常操作</span></span><br><span class="line"><span class="string">            └─ 边界测试</span></span><br><span class="line"><span class="string">               ├─ 上传文件大小为最小值时的情况</span></span><br><span class="line"><span class="string">               ├─ 上传文件大小为最大值时的情况</span></span><br><span class="line"><span class="string">               └─ 上传文件格式为支持的边缘格式时的情况</span></span><br><span class="line"><span class="string">            └─ 异常处理</span></span><br><span class="line"><span class="string">               ├─ 上传超过大小限制的文件，提示“文件过大”</span></span><br><span class="line"><span class="string">               ├─ 上传不支持格式的文件，提示“不支持的文件格式”</span></span><br><span class="line"><span class="string">               └─ 网络异常时上传，提示“上传失败，请检查网络连接”</span></span><br><span class="line"><span class="string">        input:&#123;document&#125;</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    chain = prompt | qv_llm</span><br><span class="line">    <span class="comment"># 调用大模型进行生成</span></span><br><span class="line">    response = chain.invoke(&#123;<span class="string">&quot;document&quot;</span>: input_requirement&#125;)</span><br><span class="line">    test_point = response.content</span><br><span class="line">    <span class="comment"># 获取大模型调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;point&quot;</span>: test_point&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 验证测试点覆盖率 节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_test_points_coverage</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;验证测试点的覆盖率&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：验证测试点的覆盖率&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_point&quot;</span>, <span class="string">&quot;document&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            你是一位资深的软件测试工程师，请根据提供原始的需求文档和测试点，去分析</span></span><br><span class="line"><span class="string">            原始功能文档：</span></span><br><span class="line"><span class="string">            &#123;document&#125;</span></span><br><span class="line"><span class="string">            测试点：</span></span><br><span class="line"><span class="string">            &#123;test_point&#125;</span></span><br><span class="line"><span class="string">            如果测试点覆盖了需求中所有的功能，则直接回复：测试点已经全部覆盖</span></span><br><span class="line"><span class="string">            如果没有全部覆盖，请给出覆盖率分析报告</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    chain = prompt | qv_llm</span><br><span class="line">    <span class="comment"># 调用大模型进行生成</span></span><br><span class="line">    response = chain.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;point&quot;</span>),</span><br><span class="line">        <span class="string">&quot;document&quot;</span>: state.get(<span class="string">&quot;document&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    coverage_report = response.content</span><br><span class="line">    <span class="comment"># 获取大模型调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;coverage_report&quot;</span>: coverage_report&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 补全生成测试点的 节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">complete_test_points</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;补全生成测试点&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：补全生成测试点&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_point&quot;</span>, <span class="string">&quot;document&quot;</span>, <span class="string">&quot;coverage_report&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            你是一位资深的软件测试工程师，请根据原始的需求文档和测试点和覆盖分析报告，去补充未覆盖的测试点，添加在输入的测试点后面</span></span><br><span class="line"><span class="string">                原始功能文档：</span></span><br><span class="line"><span class="string">                &#123;document&#125;</span></span><br><span class="line"><span class="string">                输入的测试点：</span></span><br><span class="line"><span class="string">                &#123;test_point&#125;</span></span><br><span class="line"><span class="string">                覆盖分析报告：</span></span><br><span class="line"><span class="string">                &#123;coverage_report&#125; </span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>)</span><br><span class="line">    chain = prompt | qv_llm</span><br><span class="line">    <span class="comment"># 调用大模型进行生成测试点</span></span><br><span class="line">    response = chain.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;point&quot;</span>),</span><br><span class="line">        <span class="string">&quot;document&quot;</span>: state.get(<span class="string">&quot;document&quot;</span>),</span><br><span class="line">        <span class="string">&quot;coverage_report&quot;</span>: state.get(<span class="string">&quot;coverage_report&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    test_point = response.content</span><br><span class="line">    <span class="comment"># 获取大模型调用的结果</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_point&quot;</span>: test_point&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出所有的测试点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">output_all_test_points</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;输出所有的测试点&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：输出所有的测试点&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;point&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 路由分发的节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route_dispatch</span>(<span class="params">state: StateSub</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;路由分派&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：根据测试点的覆盖情况进行路由分发&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;测试点已经全部覆盖&quot;</span> <span class="keyword">in</span> state[<span class="string">&quot;coverage_report&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;输出所有测试点&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;补全生成测试点&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二：这个是使用Command来指点节点的路由跳转</span></span><br><span class="line"><span class="comment"># def route_dispatch(state: State2):</span></span><br><span class="line"><span class="comment">#     &quot;&quot;&quot;路由分派&quot;&quot;&quot;</span></span><br><span class="line"><span class="comment">#     if &quot;测试点已经全部覆盖&quot; in state[&quot;coverage_report&quot;]:</span></span><br><span class="line"><span class="comment">#         return Command(goto=&quot;输出所有测试点&quot;)</span></span><br><span class="line"><span class="comment">#     else:</span></span><br><span class="line"><span class="comment">#         return Command(goto=&quot;补全生成测试点&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(START, &quot;生成测试点&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;生成测试点&quot;, &quot;验证测试点覆盖率&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;验证测试点覆盖率&quot;, &quot;路由分派&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;补全生成测试点&quot;, &quot;验证测试点覆盖率&quot;)</span></span><br><span class="line"><span class="comment"># workflow.add_edge(&quot;输出所有测试点&quot;, END)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对子节点进行编排</span></span><br><span class="line">workflow = StateGraph(StateSub)</span><br><span class="line"><span class="comment"># 添加工作流的节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;生成测试点&quot;</span>, generate_test_points)</span><br><span class="line">workflow.add_node(<span class="string">&quot;验证测试点覆盖率&quot;</span>, verify_test_points_coverage)</span><br><span class="line">workflow.add_node(<span class="string">&quot;路由分派&quot;</span>, route_dispatch)</span><br><span class="line">workflow.add_node(<span class="string">&quot;补全生成测试点&quot;</span>, complete_test_points)</span><br><span class="line">workflow.add_node(<span class="string">&quot;输出所有测试点&quot;</span>, output_all_test_points)</span><br><span class="line"><span class="comment"># 对节点进行编排</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;生成测试点&quot;</span>)</span><br><span class="line">workflow.add_edge(<span class="string">&quot;生成测试点&quot;</span>, <span class="string">&quot;验证测试点覆盖率&quot;</span>)</span><br><span class="line">workflow.add_conditional_edges(<span class="string">&quot;验证测试点覆盖率&quot;</span>, route_dispatch, [<span class="string">&quot;补全生成测试点&quot;</span>, <span class="string">&quot;输出所有测试点&quot;</span>])</span><br><span class="line">workflow.add_edge(<span class="string">&quot;补全生成测试点&quot;</span>, <span class="string">&quot;验证测试点覆盖率&quot;</span>)</span><br><span class="line">workflow.add_edge(<span class="string">&quot;输出所有测试点&quot;</span>, END)</span><br><span class="line"><span class="comment"># 对节点进行编译(作为子工作流使用，配置checkpointer=True即可开启子图的检查点)</span></span><br><span class="line">graph_sub = workflow.<span class="built_in">compile</span>(checkpointer=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =========================工作流的开发=========================</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TestCaseModel</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;测试用例数据模型&quot;&quot;&quot;</span></span><br><span class="line">    case_id: <span class="built_in">str</span></span><br><span class="line">    case_name: <span class="built_in">str</span></span><br><span class="line">    priority: <span class="built_in">str</span></span><br><span class="line">    preconditions: <span class="built_in">str</span></span><br><span class="line">    test_steps: <span class="built_in">str</span></span><br><span class="line">    test_data: <span class="built_in">str</span></span><br><span class="line">    expected_result: <span class="built_in">str</span></span><br><span class="line">    actual_result: <span class="built_in">str</span> | <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_point</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 调用子图去生成测试点</span></span><br><span class="line">    response_state = graph_sub.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;document&quot;</span>: state.get(<span class="string">&quot;input_requriment&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment"># 将子图(工作流)执行结果中的point传递给父工作流的test_point</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_point&quot;</span>: response_state.get(<span class="string">&quot;point&quot;</span>)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成测试用例的节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;基于测试点生成特定格式的测试用例&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：基于测试点生成特定格式的测试用例&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_point&quot;</span>, <span class="string">&quot;test_cases&quot;</span>, <span class="string">&quot;test_case_coverage_report&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">           你是一位资深测试工程师，请基于下面功能整理的出来的测试点,生成标准的测试用例，</span></span><br><span class="line"><span class="string">            输入测试点：</span></span><br><span class="line"><span class="string">                &#123;test_point&#125;</span></span><br><span class="line"><span class="string">           如果提供已经编写的测试用例和覆盖率分析报告，则在提供的测试用例基础和覆盖率分析报告的基础上补充生成未覆盖测试点的用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">               已经生成的用例:</span></span><br><span class="line"><span class="string">                &#123;test_cases&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">               覆盖率分析报告:</span></span><br><span class="line"><span class="string">                &#123;test_case_coverage_report&#125; </span></span><br><span class="line"><span class="string">           如果没有提供已经编写的测试用例则根据测试点直接生成：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">           输出的用例，包含测试用例的八要素，：</span></span><br><span class="line"><span class="string">               用例编号(case_id)</span></span><br><span class="line"><span class="string">               用例名称(case_name)</span></span><br><span class="line"><span class="string">               优先级(priority) </span></span><br><span class="line"><span class="string">               前置步骤(preconditions)</span></span><br><span class="line"><span class="string">               测试步骤(test_steps) </span></span><br><span class="line"><span class="string">               输入数据(test_data) </span></span><br><span class="line"><span class="string">               预期结果(expected_result)</span></span><br><span class="line"><span class="string">               实际结果(actual_result)</span></span><br><span class="line"><span class="string">           要以json格式输出，输出格式要求为：</span></span><br><span class="line"><span class="string">               [</span></span><br><span class="line"><span class="string">                   &#123;&#123;</span></span><br><span class="line"><span class="string">                       &quot;case_id&quot;: &quot;用例编号&quot;,</span></span><br><span class="line"><span class="string">                       &quot;case_name&quot;: &quot;用例名称&quot;,</span></span><br><span class="line"><span class="string">                       &quot;priority&quot;: &quot;优先级&quot;,</span></span><br><span class="line"><span class="string">                       &quot;preconditions&quot;: &quot;前置步骤&quot;,</span></span><br><span class="line"><span class="string">                       &quot;test_steps&quot;: &quot;测试步骤&quot;,</span></span><br><span class="line"><span class="string">                       &quot;test_data&quot;: &quot;输入数据&quot;,</span></span><br><span class="line"><span class="string">                       &quot;expected_result&quot;: &quot;预期结果&quot;,</span></span><br><span class="line"><span class="string">                       &quot;actual_result&quot;: &quot;实际结果&quot;</span></span><br><span class="line"><span class="string">                   &#125;&#125;,</span></span><br><span class="line"><span class="string">                   ...</span></span><br><span class="line"><span class="string">               ]</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">    parser = JsonOutputParser(pydantic_schema=<span class="type">List</span>[TestCaseModel])</span><br><span class="line">    chain = prompt | qv_llm | parser</span><br><span class="line">    response = chain.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;test_point&quot;</span>),</span><br><span class="line">        <span class="string">&quot;test_cases&quot;</span>: state.get(<span class="string">&quot;test_cases&quot;</span>),</span><br><span class="line">        <span class="string">&quot;test_case_coverage_report&quot;</span>: state.get(<span class="string">&quot;test_case_coverage_report&quot;</span>)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分析测试用例是否覆盖所有的测试点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_testcase_coverage</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;验证测试用例的覆盖率&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：开始验证用例覆盖率&quot;</span>)</span><br><span class="line">    prompt = PromptTemplate(</span><br><span class="line">        input_variables=[<span class="string">&quot;test_cases&quot;</span>, <span class="string">&quot;test_point&quot;</span>],</span><br><span class="line">        template=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">           你是一位资深测试工程师，请根据用户下面提供的测试点和测试用例，去分析测试用例是否覆盖了所有的测试点</span></span><br><span class="line"><span class="string">               已经生成的测试用例：</span></span><br><span class="line"><span class="string">               &#123;test_cases&#125;</span></span><br><span class="line"><span class="string">               需要测试的测试点：</span></span><br><span class="line"><span class="string">               &#123;test_point&#125;</span></span><br><span class="line"><span class="string">         输入要求：</span></span><br><span class="line"><span class="string">           如果全部覆盖则直接返回：已覆盖全部测试点</span></span><br><span class="line"><span class="string">           如果没有全部覆盖则返回测试点覆盖分析报告 </span></span><br><span class="line"><span class="string">           &quot;&quot;&quot;</span></span><br><span class="line">    )</span><br><span class="line">    chian = prompt | qv_llm</span><br><span class="line">    response = chian.invoke(&#123;</span><br><span class="line">        <span class="string">&quot;test_cases&quot;</span>: state.get(<span class="string">&quot;test_cases&quot;</span>),</span><br><span class="line">        <span class="string">&quot;test_point&quot;</span>: state.get(<span class="string">&quot;test_point&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    result = response.content</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;已覆盖全部测试点&quot;</span> <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;保存测试用例&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 再次补充生成测试用例</span></span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;生成测试用例&quot;</span>, update=&#123;<span class="string">&quot;test_case_coverage_report&quot;</span>: result&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_test_cases</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;保存测试用例&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">&quot;【开始执行节点】：保存测试用例&quot;</span>)</span><br><span class="line">    writer(state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">main_workflow = StateGraph(State)</span><br><span class="line"><span class="comment"># 把子工作流添加到主工作流中的一个节点</span></span><br><span class="line">main_workflow.add_node(<span class="string">&quot;生成测试点&quot;</span>, generator_point)</span><br><span class="line">main_workflow.add_node(<span class="string">&quot;生成测试用例&quot;</span>, generate_test_case)</span><br><span class="line">main_workflow.add_node(<span class="string">&quot;验证测试用例覆盖率&quot;</span>, verify_testcase_coverage)</span><br><span class="line">main_workflow.add_node(<span class="string">&quot;保存测试用例&quot;</span>, save_test_cases)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对节点进行编排序</span></span><br><span class="line">main_workflow.add_edge(START, <span class="string">&quot;生成测试点&quot;</span>)</span><br><span class="line">main_workflow.add_edge(<span class="string">&quot;生成测试点&quot;</span>, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line">main_workflow.add_edge(<span class="string">&quot;生成测试用例&quot;</span>, <span class="string">&quot;验证测试用例覆盖率&quot;</span>)</span><br><span class="line">main_workflow.add_edge(<span class="string">&quot;保存测试用例&quot;</span>, END)</span><br><span class="line"><span class="comment"># 对主工作流进行编译,设置检查点</span></span><br><span class="line">graph = main_workflow.<span class="built_in">compile</span>(checkpointer=InMemorySaver())</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    response = graph.stream(&#123;<span class="string">&quot;input_requriment&quot;</span>: <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    功能说明文档：</span></span><br><span class="line"><span class="string">    #### 📌 F1.1 用户注册</span></span><br><span class="line"><span class="string">    ##### 🧩 功能背景</span></span><br><span class="line"><span class="string">    新用户通过注册方式创建账户，支持邮箱/用户名+密码的注册方式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 🚶 主流程</span></span><br><span class="line"><span class="string">    1. 用户打开注册页，填写注册信息</span></span><br><span class="line"><span class="string">    2. 系统校验格式与唯一性（用户名、邮箱）</span></span><br><span class="line"><span class="string">    3. 提交注册，后台创建账户，初始状态为“正常”</span></span><br><span class="line"><span class="string">    4. 注册成功后自动登录并跳转首页</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### ⚠️ 异常流程</span></span><br><span class="line"><span class="string">    - 邮箱/用户名已被注册：提示“已存在”</span></span><br><span class="line"><span class="string">    - 两次密码不一致：提示用户重新输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 📌 状态规则</span></span><br><span class="line"><span class="string">    - 新用户状态为 “正常”</span></span><br><span class="line"><span class="string">    - 注册时间记录为创建时间，头像为默认图</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 📌 业务规则</span></span><br><span class="line"><span class="string">    - 用户名唯一，支持 4~20 位字母数字组合</span></span><br><span class="line"><span class="string">    - 密码长度不少于 6 位</span></span><br><span class="line"><span class="string">    - 邮箱必须符合格式 `xxx@xxx.xx`</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>&#125;,</span><br><span class="line">                            <span class="comment"># 输入子图的内容</span></span><br><span class="line">                            subgraphs=<span class="literal">True</span>,</span><br><span class="line">                            stream_mode=[<span class="string">&quot;messages&quot;</span>, <span class="string">&quot;custom&quot;</span>],</span><br><span class="line">                            config=&#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;thread_001&quot;</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">        <span class="keyword">if</span> chunk[<span class="number">1</span>] == <span class="string">&quot;custom&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">elif</span> chunk[<span class="number">1</span>] == <span class="string">&quot;messages&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>][<span class="number">0</span>].content, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从上示例代码来看，是需要现在执行子图，在传入到主图中。</p>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第十讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之多智能体交互</title>
    <link href="https://jinglv.github.io/2025/10/10/ai/langchain/langgraph/11-langgraph-multi/"/>
    <id>https://jinglv.github.io/2025/10/10/ai/langchain/langgraph/11-langgraph-multi/</id>
    <published>2025-10-09T16:00:00.000Z</published>
    <updated>2025-10-10T03:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="为什么使用多智能体？"><a href="#为什么使用多智能体？" class="headerlink" title="为什么使用多智能体？"></a>为什么使用多智能体？</h1><p>智能体是一个使用 LLM 来决定应用程序控制流的系统。随着你开发这些系统，它们可能会随着时间的推移变得越来越复杂，使得管理和扩展变得更加困难。例如，你可能会遇到以下问题：</p><ul><li>智能体有太多工具可供使用，导致在决定下一步调用哪个工具时做出糟糕的决策</li><li>上下文变得过于复杂，单个智能体难以跟踪</li><li>系统中需要多个专业领域（例如，规划器、研究员、数学专家等）</li></ul><p>在多智能体系统中，智能体之间需要相互通信。它们通过交接（handoffs）来实现这一点——这是一种描述将控制权交给哪个智能体以及向该智能体发送什么负载的原始操作。</p><p>两种最流行的多智能体架构：</p><ul><li><strong>主管（supervisor）</strong>—— 各个智能体由一个中央主管智能体协调。主管控制所有的通信流和任务委派，根据当前上下文和任务需求决定调用哪个智能体。</li><li><strong>群组（swarm）</strong>—— 智能体根据各自的专长动态地将控制权移交给彼此。系统会记住最后一个活跃的智能体，以确保在后续交互中，对话能从该智能体恢复。</li></ul><h1 id="主管型多智能体（Supervisor）"><a href="#主管型多智能体（Supervisor）" class="headerlink" title="主管型多智能体（Supervisor）"></a>主管型多智能体（Supervisor）</h1><ul><li>一个中央智能体协调所有子智能体</li><li>所有控制流决策集中在主管节点</li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20251010105717597.png" alt="image-20251010105717597" style="zoom:67%;" /></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langgraph-supervisor</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph_supervisor <span class="keyword">import</span> create_supervisor</span><br><span class="line"></span><br><span class="line">supervisor = create_supervisor(</span><br><span class="line">    agents=[flight_assistant, hotel_assistant],</span><br><span class="line">    model=ChatOpenAI(model=<span class="string">&quot;gpt-4o&quot;</span>),</span><br><span class="line">    prompt=<span class="string">&quot;You manage a hotel and flight booking assistant. Assign work to them.&quot;</span></span><br><span class="line">).<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><h1 id="群组型多智能体（Swarm）"><a href="#群组型多智能体（Swarm）" class="headerlink" title="群组型多智能体（Swarm）"></a>群组型多智能体（Swarm）</h1><ul><li>无主管，智能体根据专长动态交接</li><li>系统会记录“最后活跃的智能体”，对话自动恢复</li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20251010105858518.png" alt="image-20251010105858518" style="zoom:67%;" /></p><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langgraph-swarm</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph_swarm <span class="keyword">import</span> create_swarm</span><br><span class="line"></span><br><span class="line">swarm = create_swarm(</span><br><span class="line">    agents=[flight_assistant, hotel_assistant],</span><br><span class="line">    default_active_agent=<span class="string">&quot;flight_assistant&quot;</span></span><br><span class="line">).<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><h1 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h1><p>先创建两个智能体</p><ul><li><p>data_search_agent.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/10/10 11:11</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.config <span class="keyword">import</span> get_stream_writer</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">database_search</span>(<span class="params">sql: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用数据库进行搜索</span></span><br><span class="line"><span class="string">    :param sql: sql语句</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始执行【数据库查询工具】，执行的sql为：<span class="subst">&#123;sql&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;查询数据&quot;</span> <span class="keyword">in</span> sql:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户注册注册功能&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;无匹配内容&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">web_search</span>(<span class="params">query: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用网页进行搜索</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始执行【网络搜索】工具，搜索的内容为：<span class="subst">&#123;query&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;用户登录&quot;</span> <span class="keyword">in</span> query:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户注册注册功能&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;无匹配内容&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 向量数据库语义查询</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vector_database_search</span>(<span class="params">query: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    向量数据库查询</span></span><br><span class="line"><span class="string">    :param query: 查询内容</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始执行【向量数据库查询】，查询的问题为：<span class="subst">&#123;query&#125;</span>&quot;</span>)</span><br><span class="line">    result = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    功能说明文档：</span></span><br><span class="line"><span class="string">    #### 📌 F1.1 用户注册</span></span><br><span class="line"><span class="string">    ##### 🧩 功能背景</span></span><br><span class="line"><span class="string">    新用户通过注册方式创建账户，支持邮箱/用户名+密码的注册方式。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 🚶 主流程</span></span><br><span class="line"><span class="string">    1. 用户打开注册页，填写注册信息</span></span><br><span class="line"><span class="string">    2. 系统校验格式与唯一性（用户名、邮箱）</span></span><br><span class="line"><span class="string">    3. 提交注册，后台创建账户，初始状态为“正常”</span></span><br><span class="line"><span class="string">    4. 注册成功后自动登录并跳转首页</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### ⚠️ 异常流程</span></span><br><span class="line"><span class="string">    - 邮箱/用户名已被注册：提示“已存在”</span></span><br><span class="line"><span class="string">    - 两次密码不一致：提示用户重新输入</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 📌 状态规则</span></span><br><span class="line"><span class="string">    - 新用户状态为 “正常”</span></span><br><span class="line"><span class="string">    - 注册时间记录为创建时间，头像为默认图</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ##### 📌 业务规则</span></span><br><span class="line"><span class="string">    - 用户名唯一，支持 4~20 位字母数字组合</span></span><br><span class="line"><span class="string">    - 密码长度不少于 6 位</span></span><br><span class="line"><span class="string">    - 邮箱必须符合格式 `xxx@xxx.xx`</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;用户注册&quot;</span> <span class="keyword">in</span> query:</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;无匹配内容&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用于数据搜索的智能体</span></span><br><span class="line">data_search_agent = create_react_agent(</span><br><span class="line">    <span class="comment"># 设置agent的名字</span></span><br><span class="line">    name=<span class="string">&quot;data_search_agent&quot;</span>,</span><br><span class="line">    <span class="comment"># 配置模型</span></span><br><span class="line">    model=qv_llm,</span><br><span class="line">    <span class="comment"># 绑定工具</span></span><br><span class="line">    tools=[database_search, web_search, vector_database_search],</span><br><span class="line">    prompt=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            你是一位数据检索专家，擅长从多种数据源中查找信息，包括结构化数据库、网页和向量数据库。</span></span><br><span class="line"><span class="string">            你拥有以下三种工具，每种工具适用于不同的场景：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            1. `database_search(sql)`</span></span><br><span class="line"><span class="string">               - 检索结构化信息，如：接口文档、需求文档、测试用例。</span></span><br><span class="line"><span class="string">               - 适合精确字段查询。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            2. `web_search(query)`  </span></span><br><span class="line"><span class="string">               - 检索互联网公开网页，适合实时性或广泛性问题。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            3. `vector_database_search(query)`  </span></span><br><span class="line"><span class="string">               - 检索语义相关文档，如模糊表达、知识库、上下文相关资料。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">            行为准则：</span></span><br><span class="line"><span class="string">                - 优先根据语义理解选择合适工具。</span></span><br><span class="line"><span class="string">                - 如果一个工具未检索成功，请尝试更换表达方式或使用其他工具。</span></span><br><span class="line"><span class="string">                - 最多连续尝试不超过10次。超过10次，请停止任务并输出：“未找到相关内容，请补充更详细的功能描述或需求信息。”</span></span><br><span class="line"><span class="string">            注意点：</span></span><br><span class="line"><span class="string">                如果是调用数据库查找数据，则需要你先查询数据库中的表结构，然后根据表结构和用户的需求，编写对应的sql语句，调用该数据库操作的工具，执行sql语句，并返回执行的结果,    </span></span><br><span class="line"><span class="string">                每一步执行完都需要去分析当前的执行进度，以及规划下一步的任务执行    </span></span><br><span class="line"><span class="string">            输出要求：</span></span><br><span class="line"><span class="string">                - 展示最终有用的信息，展示任何工具调用过程。</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>case_genarator_agent.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/10/10 11:15</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.config <span class="keyword">import</span> get_stream_writer</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_test_case</span>(<span class="params">requirement: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据需求生成测试用例</span></span><br><span class="line"><span class="string">    :param requirement: 需求文档</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始执行【需求生成测试用例】工具，需求文档的内容为：<span class="subst">&#123;requirement&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;1、正常登录，2、密码为空&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 覆盖率校验的工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">coverage_check</span>(<span class="params">test_case: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    检查测试用例的覆盖率</span></span><br><span class="line"><span class="string">    :param test_case: 测试用例</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始执行【检查测试用例的覆盖率】工具，测试用例的内容为：<span class="subst">&#123;test_case&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;覆盖率100%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用于测试用例生成的智能体</span></span><br><span class="line">test_case_agent = create_react_agent(</span><br><span class="line">    model=qv_llm,</span><br><span class="line">    tools=[generate_test_case, coverage_check],</span><br><span class="line">    name=<span class="string">&quot;test_case_agent&quot;</span>,</span><br><span class="line">    prompt=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    你是一位资深测试专家，擅长根据需求文档自动生成高质量的测试用例，并进行用例覆盖率校验。</span></span><br><span class="line"><span class="string">    你拥有以下两个工具：</span></span><br><span class="line"><span class="string">    1. `generate_test_case(requirement)`</span></span><br><span class="line"><span class="string">       - 输入需求 → 输出测试用例</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2. `coverage_check(test_case)`</span></span><br><span class="line"><span class="string">       - 输入测试用例 → 检查覆盖率</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    任务流程：</span></span><br><span class="line"><span class="string">    1. 根据输入的“需求描述”调用 `generate_test_case`</span></span><br><span class="line"><span class="string">    2. 生成测试用例后立即调用 `coverage_check` 验证覆盖率</span></span><br><span class="line"><span class="string">    3. 如果存在遗漏，返回诊断信息并补充用例</span></span><br><span class="line"><span class="string">    4. 直到覆盖率达到 100%，才输出最终结果</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    ❗特别注意：</span></span><br><span class="line"><span class="string">    - 如果输入的需求信息过于模糊或不完整，无法生成有意义的测试用例：</span></span><br><span class="line"><span class="string">      → 请直接返回：“无法生成测试用例，请补充更完整的需求说明或接口文档。”</span></span><br><span class="line"><span class="string">    - 请勿暴露工具调用过程，仅返回结构化、清晰的测试用例列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="主管型智能体（Supervisor）"><a href="#主管型智能体（Supervisor）" class="headerlink" title="主管型智能体（Supervisor）"></a>主管型智能体（Supervisor）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/10/10 13:53</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> langgraph_supervisor <span class="keyword">import</span> create_supervisor</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"><span class="keyword">from</span> demo.langgraph_multi_agent.agents.case_genarator_agent <span class="keyword">import</span> test_case_agent</span><br><span class="line"><span class="keyword">from</span> demo.langgraph_multi_agent.agents.data_search_agent <span class="keyword">import</span> data_search_agent</span><br><span class="line"></span><br><span class="line">agent = create_supervisor(</span><br><span class="line">    supervisor_name=<span class="string">&quot;测试专家智能体&quot;</span>,</span><br><span class="line">    model=qv_llm,</span><br><span class="line">    <span class="comment"># 配置子智能体</span></span><br><span class="line">    agents=[data_search_agent, test_case_agent],</span><br><span class="line">    prompt=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        - Role: 主管智能体调度专家</span></span><br><span class="line"><span class="string">        - Background: 用户需要一个主管智能体来高效地调度两个子智能体，以确保请求被合理拆解并进行任务分配。用户希望主管智能体能够根据不同的需求，精准地分配任务给两个子智能体，并且在任务执行过程中进行有效的监控和调整。</span></span><br><span class="line"><span class="string">        - Profile: 你是一位精通智能体调度与任务规划的专家，对任务拆解、子智能体能力匹配以及执行流程监控有着丰富的经验。你能够精准地识别用户需求的类型，并根据需求的性质合理地分配任务给子智能体，同时确保任务执行的顺序性和连贯性。</span></span><br><span class="line"><span class="string">        - Skills: 你具备任务拆解能力、智能体能力匹配能力、执行流程监控能力以及逻辑推理能力。能够根据用户输入的需求，快速识别任务类型，并规划出合理的任务执行步骤，同时确保每个步骤的执行条件得到满足。</span></span><br><span class="line"><span class="string">        - Goals: </span></span><br><span class="line"><span class="string">          1. 根据用户输入的需求，准确拆解任务并分配给合适的子智能体。</span></span><br><span class="line"><span class="string">          2. 确保任务执行的顺序性和连贯性，特别是在需要多个子智能体协同完成任务时。</span></span><br><span class="line"><span class="string">          3. 在每个任务执行步骤完成后，进行反思和评估，确保下一步骤能够顺利执行。</span></span><br><span class="line"><span class="string">        - Constrains: </span></span><br><span class="line"><span class="string">          1. 仅负责规划和调度子智能体执行任务，不直接参与任务执行。</span></span><br><span class="line"><span class="string">          2. 在任务执行过程中，需要等待子智能体`data_search_agent`的任务执行完毕后，再执行后续步骤。</span></span><br><span class="line"><span class="string">          3. 严格遵守任务分配规则，根据任务类型分配给相应的子智能体。</span></span><br><span class="line"><span class="string">        - OutputFormat: 输出应包括任务拆解结果、子智能体分配计划以及任务执行步骤的详细规划。</span></span><br><span class="line"><span class="string">        - Workflow:</span></span><br><span class="line"><span class="string">          1. 接收用户输入的需求，进行需求分析和任务拆解。</span></span><br><span class="line"><span class="string">          2. 根据任务类型，分配给相应的子智能体执行任务。</span></span><br><span class="line"><span class="string">          3. 在子智能体执行任务过程中，监控执行进度并进行必要的调整。</span></span><br><span class="line"><span class="string">          4. 在每个任务执行步骤完成后，进行反思和评估，确保下一步骤能够顺利执行。</span></span><br><span class="line"><span class="string">          5. 如果需要多个子智能体协同完成任务，则按照预定顺序依次调用对应的子智能体。</span></span><br><span class="line"><span class="string">        - Examples:</span></span><br><span class="line"><span class="string">          - 例子1：用户需求：“查询某个功能的文档并生成测试用例。”</span></span><br><span class="line"><span class="string">            任务拆解：</span></span><br><span class="line"><span class="string">            1. 调用`data_search_agent`查询功能文档。</span></span><br><span class="line"><span class="string">            2. 等待`data_search_agent`任务执行完毕，获取查询结果。</span></span><br><span class="line"><span class="string">            3. 根据查询结果，调用`test_case_agent`生成测试用例。</span></span><br><span class="line"><span class="string">            4. 等待`test_case_agent`任务执行完毕，验证用例覆盖率。</span></span><br><span class="line"><span class="string">            5. 反思整个任务执行过程，确保任务顺利完成。</span></span><br><span class="line"><span class="string">          - 例子2：用户需求：“查找某个接口的文档。”</span></span><br><span class="line"><span class="string">            任务拆解：</span></span><br><span class="line"><span class="string">            1. 调用`data_search_agent`查找接口文档。</span></span><br><span class="line"><span class="string">            2. 等待`data_search_agent`任务执行完毕，获取查询结果。</span></span><br><span class="line"><span class="string">            3. 反思任务执行结果，确保查询结果准确无误。</span></span><br><span class="line"><span class="string">          - 例子3：用户需求：“根据需求文档生成测试用例。”</span></span><br><span class="line"><span class="string">            任务拆解：</span></span><br><span class="line"><span class="string">            1. 调用`test_case_agent`根据需求文档生成测试用例。</span></span><br><span class="line"><span class="string">            2. 等待`test_case_agent`任务执行完毕，验证用例覆盖率。</span></span><br><span class="line"><span class="string">            3. 反思任务执行结果，确保测试用例的完整性和准确性。</span></span><br><span class="line"><span class="string">        - Initialization: 在第一次对话中，请直接输出以下：您好！作为主管智能体调度专家，我将根据您的需求，合理地调度两个子智能体完成任务。请告诉我您的具体需求，我会为您规划任务执行步骤。</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">).<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    response = agent.stream(</span><br><span class="line">        <span class="built_in">input</span>=&#123;</span><br><span class="line">            <span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;查找用户注册的功能说明文档，再基于需求文档去生成测试用例&quot;</span>&#125;],</span><br><span class="line">        &#125;,</span><br><span class="line">        subgraphs=<span class="literal">True</span>,</span><br><span class="line">        stream_mode=[<span class="string">&quot;messages&quot;</span>, <span class="string">&quot;custom&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">        <span class="keyword">if</span> chunk[<span class="number">1</span>] == <span class="string">&quot;custom&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">elif</span> chunk[<span class="number">1</span>] == <span class="string">&quot;messages&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>][<span class="number">0</span>].content, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="群组型多智能体（Swarm）-1"><a href="#群组型多智能体（Swarm）-1" class="headerlink" title="群组型多智能体（Swarm）"></a>群组型多智能体（Swarm）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/10/10 14:25</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> langgraph_swarm <span class="keyword">import</span> create_swarm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"><span class="keyword">from</span> demo.langgraph_multi_agent.agents.case_genarator_agent <span class="keyword">import</span> test_case_agent</span><br><span class="line"><span class="keyword">from</span> demo.langgraph_multi_agent.agents.data_search_agent <span class="keyword">import</span> data_search_agent</span><br><span class="line"></span><br><span class="line">agent = create_swarm(</span><br><span class="line">    model=qv_llm,</span><br><span class="line">    <span class="comment"># 配置子智能体</span></span><br><span class="line">    agents=[data_search_agent, test_case_agent],</span><br><span class="line">    default_active_agent=<span class="string">&quot;data_search_agent&quot;</span>,</span><br><span class="line">).<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    response = agent.stream(</span><br><span class="line">        <span class="built_in">input</span>=&#123;</span><br><span class="line">            <span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;查找用户注册的功能说明文档，再基于需求文档去生成测试用例&quot;</span>&#125;],</span><br><span class="line">        &#125;,</span><br><span class="line">        subgraphs=<span class="literal">True</span>,</span><br><span class="line">        stream_mode=[<span class="string">&quot;messages&quot;</span>, <span class="string">&quot;custom&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> response:</span><br><span class="line">        <span class="keyword">if</span> chunk[<span class="number">1</span>] == <span class="string">&quot;custom&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>])</span><br><span class="line">        <span class="keyword">elif</span> chunk[<span class="number">1</span>] == <span class="string">&quot;messages&quot;</span>:</span><br><span class="line">            <span class="built_in">print</span>(chunk[<span class="number">2</span>][<span class="number">0</span>].content, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="架构对比总结"><a href="#架构对比总结" class="headerlink" title="架构对比总结"></a>架构对比总结</h1><div class="table-container"><table><thead><tr><th>架构类型</th><th>控制流设计</th><th>调度角色</th><th>灵活性</th><th>适用场景</th></tr></thead><tbody><tr><td>Supervisor</td><td>中央调度</td><td>统一主管</td><td>中等</td><td>中小型、结构化任务</td></tr><tr><td>Swarm</td><td>分布协商</td><td>去中心化</td><td>高</td><td>动态协作、多专业系统</td></tr><tr><td>自定义图（StateGraph）</td><td>明确控制流</td><td>无/可选</td><td>高</td><td>高度可控流程需求</td></tr></tbody></table></div>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第十一讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>MCP服务开发的核心概念和使用</title>
    <link href="https://jinglv.github.io/2025/10/09/ai/langchain/13-langchain-mcp-action/"/>
    <id>https://jinglv.github.io/2025/10/09/ai/langchain/13-langchain-mcp-action/</id>
    <published>2025-10-08T16:00:00.000Z</published>
    <updated>2025-10-09T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="定义MCP的工具（Tools）"><a href="#定义MCP的工具（Tools）" class="headerlink" title="定义MCP的工具（Tools）"></a>定义MCP的工具（Tools）</h1><p>工具允许LLM通过您的服务器执行操作。与资源不同，工具需要执行计算并具有副作用。</p><p>MCP工具的定义规范：</p><ol><li>必须要定义工具服务的，文档注释（告诉大模型或Agent，该工具的作用是什么）</li><li>工具必须定义参数及声明的参数类型（告诉大模型或Agent，该工具传什么样的参数）</li><li>对于工具返回的数据，类型和数据结构要声明（告诉大模型或Agent，该工具执行完之后的结果是什么样的，方便后面去进行解析和使用）</li></ol><p>示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(name=<span class="string">&quot;Tool Example&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;计算数字相加&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><h1 id="定义MCP的资源（Resources）"><a href="#定义MCP的资源（Resources）" class="headerlink" title="定义MCP的资源（Resources）"></a>定义MCP的资源（Resources）</h1><p>资源是向LLM公开数据的方式。它们类似于REST API中的GET端点 - 它们提供数据，但不应执行大量计算或产生副作用。</p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(name=<span class="string">&quot;Resource Example&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.resource(<span class="params"><span class="string">&quot;file://documents/&#123;name&#125;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_document</span>(<span class="params">name: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;按名称读取文档。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这通常会从磁盘读取</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;name&#125;</span>的内容&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.resource(<span class="params"><span class="string">&quot;config://settings&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_settings</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取应用程序设置。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;&#123;</span></span><br><span class="line"><span class="string">  &quot;theme&quot;: &quot;dark&quot;,</span></span><br><span class="line"><span class="string">  &quot;language&quot;: &quot;en&quot;,</span></span><br><span class="line"><span class="string">  &quot;debug&quot;: false</span></span><br><span class="line"><span class="string">&#125;&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="工具结构化输出"><a href="#工具结构化输出" class="headerlink" title="工具结构化输出"></a>工具结构化输出</h1><p>默认情况下，工具将返回结构化结果，如果其返回类型注释是兼容的。否则，它们将返回非结构化结果。</p><p>结构化输出支持以下返回类型：</p><ul><li>Pydantic模型（BaseModel子类）</li><li>类型字典</li><li>数据类和其他具有类型提示的类</li><li>dict[str, T]（其中T是任何JSON可序列化类型）</li><li>原始类型（str、int、float、bool、bytes、None）- 包装在{“result”: value}</li><li>泛型类型（列表、元组、联合、可选等）- 包装在{“result”: value}</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Structured Output Example&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用Pydantic模型获得丰富的结构化数据</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WeatherData</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;天气信息结构。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    temperature: <span class="built_in">float</span> = Field(description=<span class="string">&quot;摄氏温度&quot;</span>)</span><br><span class="line">    humidity: <span class="built_in">float</span> = Field(description=<span class="string">&quot;湿度百分比&quot;</span>)</span><br><span class="line">    condition: <span class="built_in">str</span></span><br><span class="line">    wind_speed: <span class="built_in">float</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">city: <span class="built_in">str</span></span>) -&gt; WeatherData:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取城市天气 - 返回结构化数据。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 模拟天气数据</span></span><br><span class="line">    <span class="keyword">return</span> WeatherData(</span><br><span class="line">        temperature=<span class="number">72.5</span>,</span><br><span class="line">        humidity=<span class="number">45.0</span>,</span><br><span class="line">        condition=<span class="string">&quot;sunny&quot;</span>,</span><br><span class="line">        wind_speed=<span class="number">5.2</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用TypedDict获得更简单的结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LocationInfo</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    latitude: <span class="built_in">float</span></span><br><span class="line">    longitude: <span class="built_in">float</span></span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_location</span>(<span class="params">address: <span class="built_in">str</span></span>) -&gt; LocationInfo:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取位置坐标&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> LocationInfo(latitude=<span class="number">51.5074</span>, longitude=-<span class="number">0.1278</span>, name=<span class="string">&quot;英国伦敦&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用dict[str, Any]获得灵活的模式</span></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_statistics</span>(<span class="params">data_type: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">float</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取各种统计数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;mean&quot;</span>: <span class="number">42.5</span>, <span class="string">&quot;median&quot;</span>: <span class="number">40.0</span>, <span class="string">&quot;std_dev&quot;</span>: <span class="number">5.2</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 具有类型提示的普通类也可以用于结构化输出</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserProfile</span>:</span><br><span class="line">    name: <span class="built_in">str</span></span><br><span class="line">    age: <span class="built_in">int</span></span><br><span class="line">    email: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name: <span class="built_in">str</span>, age: <span class="built_in">int</span>, email: <span class="built_in">str</span> | <span class="literal">None</span> = <span class="literal">None</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.name = name</span><br><span class="line">        <span class="variable language_">self</span>.age = age</span><br><span class="line">        <span class="variable language_">self</span>.email = email</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_user</span>(<span class="params">user_id: <span class="built_in">str</span></span>) -&gt; UserProfile:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取用户资料 - 返回结构化数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> UserProfile(name=<span class="string">&quot;Alice&quot;</span>, age=<span class="number">30</span>, email=<span class="string">&quot;alice@example.com&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 没有类型提示的类无法用于结构化输出</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UntypedConfig</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, setting1, setting2</span>):</span><br><span class="line">        <span class="variable language_">self</span>.setting1 = setting1</span><br><span class="line">        <span class="variable language_">self</span>.setting2 = setting2</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_config</span>() -&gt; UntypedConfig:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;这返回非结构化输出 - 没有生成模式&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> UntypedConfig(<span class="string">&quot;value1&quot;</span>, <span class="string">&quot;value2&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列表和其他类型会自动包装</span></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">list_cities</span>() -&gt; <span class="built_in">list</span>[<span class="built_in">str</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取城市列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">&quot;伦敦&quot;</span>, <span class="string">&quot;巴黎&quot;</span>, <span class="string">&quot;东京&quot;</span>]</span><br><span class="line">    <span class="comment"># 返回: &#123;&quot;result&quot;: [&quot;伦敦&quot;, &quot;巴黎&quot;, &quot;东京&quot;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_temperature</span>(<span class="params">city: <span class="built_in">str</span></span>) -&gt; <span class="built_in">float</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取温度作为简单浮点数&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">22.5</span></span><br><span class="line">    <span class="comment"># 返回: &#123;&quot;result&quot;: 22.5&#125;</span></span><br></pre></td></tr></table></figure><h1 id="定义MCP的提示词（Prompts）"><a href="#定义MCP的提示词（Prompts）" class="headerlink" title="定义MCP的提示词（Prompts）"></a>定义MCP的提示词（Prompts）</h1><p>提示是可重用的模板，可帮助LLM有效地与您的服务器交互。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp.prompts <span class="keyword">import</span> base</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(name=<span class="string">&quot;Prompt Example&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.prompt(<span class="params">title=<span class="string">&quot;代码审查&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">review_code</span>(<span class="params">code: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;请审查此代码:\n\n<span class="subst">&#123;code&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.prompt(<span class="params">title=<span class="string">&quot;调试助手&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug_error</span>(<span class="params">error: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[base.Message]:</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        base.UserMessage(<span class="string">&quot;我看到了这个错误:&quot;</span>),</span><br><span class="line">        base.UserMessage(error),</span><br><span class="line">        base.AssistantMessage(<span class="string">&quot;我会帮你调试。你试过什么方法？&quot;</span>),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h1 id="定义MCP的上下文（Context）"><a href="#定义MCP的上下文（Context）" class="headerlink" title="定义MCP的上下文（Context）"></a>定义MCP的上下文（Context）</h1><p>Context对象使您的工具和资源能够访问MCP功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> Context, FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(name=<span class="string">&quot;Progress Example&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">long_running_task</span>(<span class="params">task_name: <span class="built_in">str</span>, ctx: Context, steps: <span class="built_in">int</span> = <span class="number">5</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行带进度更新的任务。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">await</span> ctx.info(<span class="string">f&quot;开始: <span class="subst">&#123;task_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(steps):</span><br><span class="line">        progress = (i + <span class="number">1</span>) / steps</span><br><span class="line">        <span class="keyword">await</span> ctx.report_progress(</span><br><span class="line">            progress=progress,</span><br><span class="line">            total=<span class="number">1.0</span>,</span><br><span class="line">            message=<span class="string">f&quot;步骤 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>/<span class="subst">&#123;steps&#125;</span>&quot;</span>,</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">await</span> ctx.debug(<span class="string">f&quot;完成步骤 <span class="subst">&#123;i + <span class="number">1</span>&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;任务 &#x27;<span class="subst">&#123;task_name&#125;</span>&#x27; 完成&quot;</span></span><br></pre></td></tr></table></figure><h1 id="MCP-添加认证"><a href="#MCP-添加认证" class="headerlink" title="MCP 添加认证"></a>MCP 添加认证</h1><p>认证架构：</p><ul><li>授权服务器（AS）：处理OAuth流、用户身份验证和令牌颁发</li><li>资源服务器（RS）：验证令牌并为受保护资源提供服务的MCP服务器</li><li>客户端：获取令牌，提交并将其与MCP服务器进行验证</li></ul><p>MCP服务器可以通过提供协议的TokenVerifier实现来使用身份验证。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> AnyHttpUrl</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mcp.server.auth.provider <span class="keyword">import</span> AccessToken, TokenVerifier</span><br><span class="line"><span class="keyword">from</span> mcp.server.auth.settings <span class="keyword">import</span> AuthSettings</span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SimpleTokenVerifier</span>(<span class="title class_ inherited__">TokenVerifier</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用于演示的简单令牌验证器。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">verify_token</span>(<span class="params">self, token: <span class="built_in">str</span></span>) -&gt; AccessToken | <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 这里您需要实现实际的令牌验证</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建FastMCP实例作为资源服务器</span></span><br><span class="line">mcp = FastMCP(</span><br><span class="line">    <span class="string">&quot;Weather Service&quot;</span>,</span><br><span class="line">    <span class="comment"># 用于身份验证的令牌验证器</span></span><br><span class="line">    token_verifier=SimpleTokenVerifier(),</span><br><span class="line">    <span class="comment"># 认证设置</span></span><br><span class="line">    auth=AuthSettings(</span><br><span class="line">        issuer_url=AnyHttpUrl(<span class="string">&quot;https://auth.example.com&quot;</span>),  <span class="comment"># 授权服务器URL</span></span><br><span class="line">        resource_server_url=AnyHttpUrl(<span class="string">&quot;http://localhost:3001&quot;</span>),  <span class="comment"># 此服务器的URL</span></span><br><span class="line">        required_scopes=[<span class="string">&quot;user&quot;</span>],</span><br><span class="line">    ),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">city: <span class="built_in">str</span> = <span class="string">&quot;London&quot;</span></span>) -&gt; <span class="built_in">dict</span>[<span class="built_in">str</span>, <span class="built_in">str</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取城市天气数据&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;city&quot;</span>: city,</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="string">&quot;22&quot;</span>,</span><br><span class="line">        <span class="string">&quot;condition&quot;</span>: <span class="string">&quot;Partly cloudy&quot;</span>,</span><br><span class="line">        <span class="string">&quot;humidity&quot;</span>: <span class="string">&quot;65%&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mcp.run(transport=<span class="string">&quot;streamable-http&quot;</span>)</span><br></pre></td></tr></table></figure><p>带有认证的MCP client示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line">client = MultiServerMCPClient(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;weather&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;streamable_http&quot;</span>,</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://localhost:8000/mcp&quot;</span>,</span><br><span class="line">            <span class="comment"># 设置请求头，配置用于身份验证的token</span></span><br><span class="line">            <span class="string">&quot;headers&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer YOUR_TOKEN&quot;</span>,</span><br><span class="line">                <span class="string">&quot;X-Custom-Header&quot;</span>: <span class="string">&quot;custom-value&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangChain学习笔记第十三讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/tags/LangChain/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之工作流（图）</title>
    <link href="https://jinglv.github.io/2025/09/29/ai/langchain/langgraph/9-langgraph-workflow/"/>
    <id>https://jinglv.github.io/2025/09/29/ai/langchain/langgraph/9-langgraph-workflow/</id>
    <published>2025-09-28T16:00:00.000Z</published>
    <updated>2025-09-29T02:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="工作流核心概念"><a href="#工作流核心概念" class="headerlink" title="工作流核心概念"></a>工作流核心概念</h1><p>LangGraph 的核心是将 Agent 工作流建模为图形。您可以使用三个关键组件定义代理的行为：</p><ol><li><strong>State(状态)</strong>：表示应用程序当前快照的共享数据结构。它可以是任何 Python 类型，但通常是 a 或 Pydantic 。<code>TypedDict BaseModel</code></li><li><strong>Node(节点)：</strong>对代理的逻辑进行编码的 Python 函数。它们接收电流作为输入，执行一些计算或副作用，并返回更新的 <code>State State</code></li><li><strong>Edges (边)</strong>：Python 函数，根据当前它们可以是条件分支或固定过渡。<code>Node State</code></li></ol><h1 id="标准状态图构建"><a href="#标准状态图构建" class="headerlink" title="标准状态图构建"></a>标准状态图构建</h1><h2 id="StateGraph-核心方法"><a href="#StateGraph-核心方法" class="headerlink" title="StateGraph 核心方法"></a>StateGraph 核心方法</h2><p>LangGraph 使用 <code>StateGraph</code> 来构建整个流程的执行图。下面是常用方法的分类和说明：</p><div class="table-container"><table><thead><tr><th>方法分类</th><th>方法名</th><th>功能描述</th><th>代码示例</th></tr></thead><tbody><tr><td><strong>节点管理</strong></td><td><code>add_node</code></td><td>添加单个节点</td><td><code>builder.add_node(&quot;node_name&quot;, node_func)</code></td></tr><tr><td><strong>边(流程)管理</strong></td><td><code>add_edge</code></td><td>添加固定流程连接</td><td><code>builder.add_edge(&quot;node_a&quot;, &quot;node_b&quot;)</code></td></tr><tr><td></td><td><code>add_conditional_edges</code></td><td><code>添加条件分支</code></td><td><code>builder.add_conditional_edges(&quot;start&quot;, router_func)</code></td></tr><tr><td><strong>入口和出口</strong></td><td><code>set_entry_point</code></td><td>设置流程起点</td><td><code>builder.set_entry_point(&quot;first_node&quot;)</code></td></tr><tr><td></td><td><code>set_finish_point</code></td><td>设置流程终点</td><td><code>builder.set_finish_point(&quot;last_node&quot;)</code></td></tr><tr><td><strong>编译执行</strong></td><td><code>compile</code></td><td>将构建图编译执行体</td><td><code>graph = builder.compile()</code></td></tr><tr><td><strong>可视化图</strong></td><td><code>get_graph</code></td><td>获取图对象绘制流程图</td><td><code>graph.get_graph().draw_mermaid_png()</code></td></tr></tbody></table></div><h2 id="LangGraph-流程构建标准步骤"><a href="#LangGraph-流程构建标准步骤" class="headerlink" title="LangGraph 流程构建标准步骤"></a>LangGraph 流程构建标准步骤</h2><p>通过 LangGraph，你可以非常清晰地分步骤搭建测试用例生成或处理流程。</p><h3 id="1-状态定义"><a href="#1-状态定义" class="headerlink" title="1. 状态定义"></a>1. 状态定义</h3><p>在 LangGraph 中，<strong>状态</strong>可以是 <code>TypedDict</code> 或 <code>Pydantic</code> 模型，保证每个节点都能正确读取与更新数据。</p><ul><li>TypedDict:属于 Python 标准库 typing 模块的一部分,仅提供静态类型检查，运行时不执行验证</li><li>Pydantic:第三方库，需要单独安装,提供运行时数据验证和序列化功能</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    value_1: <span class="built_in">str</span>  <span class="comment"># 字符串类型的状态值</span></span><br><span class="line">    value_2: <span class="built_in">int</span>  <span class="comment"># 整型的状态值</span></span><br></pre></td></tr></table></figure><h3 id="2-节点函数开发"><a href="#2-节点函数开发" class="headerlink" title="2. 节点函数开发"></a>2. 节点函数开发</h3><p>每一个节点就是一个处理函数，它接受一个<code>State</code>作为输入，并返回一个更新后的<strong>部分State（字典）</strong>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state: State</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化 value_1 字段&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">&quot;a&quot;</span>&#125;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_2</span>(<span class="params">state: State</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;增量更新 value_1 字段&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: state[<span class="string">&quot;value_1&quot;</span>] + <span class="string">&quot; b&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_3</span>(<span class="params">state: State</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;初始化 value_2 字段&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_2&quot;</span>: <span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>必须返回字典</li><li>可以只返回<strong>局部更新字段</strong>，LangGraph自动合并回完整状态</li></ul><h3 id="3-标准流程构建方法"><a href="#3-标准流程构建方法" class="headerlink" title="3. 标准流程构建方法"></a>3. 标准流程构建方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> START, END, StateGraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 初始化 StateGraph 构建器</span></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 添加节点</span></span><br><span class="line">builder.add_node(<span class="string">&quot;init_step&quot;</span>, step_1)</span><br><span class="line">builder.add_node(<span class="string">&quot;update_step&quot;</span>, step_2)</span><br><span class="line">builder.add_node(<span class="string">&quot;final_step&quot;</span>, step_3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 建立节点之间的连接关系</span></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;init_step&quot;</span>)        <span class="comment"># 从 START 到第一个节点</span></span><br><span class="line">builder.add_edge(<span class="string">&quot;init_step&quot;</span>, <span class="string">&quot;update_step&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;update_step&quot;</span>, <span class="string">&quot;final_step&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;step_3&quot;</span>, END) <span class="comment"># 结束的边</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 编译为可执行图</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><p><strong>提示</strong>：</p><ul><li><code>START</code> 是固定起点</li><li>不显式设置出口时，默认最后一个节点执行完即结束，也可以使用END设置结束边</li></ul><h3 id="4-流程执行与调试"><a href="#4-流程执行与调试" class="headerlink" title="4. 流程执行与调试"></a>4. 流程执行与调试</h3><p>执行流程时，需要传入一个初始状态：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 执行</span></span><br><span class="line">result = graph.invoke(&#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">&quot;initial&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"><span class="comment"># 输出: &#123;&#x27;value_1&#x27;: &#x27;a b&#x27;, &#x27;value_2&#x27;: 10&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ul><li>初始传入的数据字典，必须与 <code>State</code> 类型定义一致。s</li></ul><h3 id="5-获取并绘制执行流程图"><a href="#5-获取并绘制执行流程图" class="headerlink" title="5. 获取并绘制执行流程图"></a>5. 获取并绘制执行流程图</h3><p>流程图有助于快速理解当前系统的执行路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 mermaid 格式流程图</span></span><br><span class="line">res = graph.get_graph().draw_mermaid()</span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 输出二进制编码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取执行流程图写入文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;graph.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    content = app.get_graph().draw_mermaid_png()</span><br><span class="line">    f.write(content)</span><br></pre></td></tr></table></figure><p>总结</p><ul><li><code>StateGraph</code> 是 LangGraph 流程构建的基础</li><li>需要先定义状态（TypedDict）</li><li>每个节点处理输入并返回部分更新</li><li>流程控制可以串行、并行、条件跳转</li><li>支持流程图可视化，方便理解和调试</li></ul><h1 id="Node-节点"><a href="#Node-节点" class="headerlink" title="Node(节点)"></a>Node(节点)</h1><h2 id="节点的参数"><a href="#节点的参数" class="headerlink" title="节点的参数"></a>节点的参数</h2><p>节点是图形的核心组成部分，可以使用 <a href="https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.state.StateGraph.add_node">add_node</a> 方法将这些节点添加到图形中</p><p>在 LangGraph 中，节点 可以 接受以下参数的 Python 函数（同步或异步）：</p><ol><li><code>state</code>：图形的状态</li><li><code>config</code>：包含配置信息（如）和跟踪信息（如<code>RunnableConfig</code> <code>thread_id</code> <code>tags</code>）</li><li><code>runtime</code>：包含运行时上下文和其他信息（如 <code>Runtime</code> <code>store</code> <code>stream_writer</code>）</li></ol><p>注意：需要将 langgraph 升级到<code>0.6.0a2</code> 的版本，<code>langgraph.runtime</code>模块最新的版本中才加入的，之前的版本中没有</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/29 14:40</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">节点函数可以接受以下三种类型的参数</span></span><br><span class="line"><span class="string">1. state：图形的状态</span></span><br><span class="line"><span class="string">    继承typeDict的类</span></span><br><span class="line"><span class="string">2. config：包含配置信息（如）和跟踪信息（如RunnableConfigthread_idtags）</span></span><br><span class="line"><span class="string">3. runtime：包含运行时上下文和其他信息（如 Runtimestorestream_writer）</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables <span class="keyword">import</span> RunnableConfig</span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.runtime <span class="keyword">import</span> Runtime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;状态&quot;&quot;&quot;</span></span><br><span class="line">    user_input: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义运行时的上下文参数</span></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RuntimeContext</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;运行时上下文参数&quot;&quot;&quot;</span></span><br><span class="line">    test_env: <span class="built_in">str</span>  <span class="comment"># 测试环境</span></span><br><span class="line">    tester_name: <span class="built_in">str</span>  <span class="comment"># 测试人员名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================定义运行节点函数=================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;用户输入的需求是:<span class="subst">&#123;state.get(<span class="string">&#x27;user_input&#x27;</span>)&#125;</span>,开始进行测试用例生成&quot;</span>)</span><br><span class="line">    <span class="comment"># 这里核心的功能实现需要调用llm进行生成，暂时跳过</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试用例已经生成&quot;</span>, )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: [<span class="string">&quot;测试用例1&quot;</span>, <span class="string">&quot;测试用例2&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_test_cases</span>(<span class="params">state: State, runtime: Runtime[RuntimeContext]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行测试用例：&quot;</span>, state[<span class="string">&#x27;test_cases&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前执行的测试环境&quot;</span>, runtime.context.test_env)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行人&quot;</span>, runtime.context.tester_name)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State, config: RunnableConfig</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试报告&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行generator_test_report节点&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;配置信息：&quot;</span>, config)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================工作流的创建个编排===================</span></span><br><span class="line">graph = StateGraph(State, context_schema=RuntimeContext)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试用例&quot;</span>, generator_test_case)</span><br><span class="line">graph.add_node(<span class="string">&quot;执行测试用例&quot;</span>, run_test_cases)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试报告&quot;</span>, generator_test_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起点</span></span><br><span class="line"><span class="comment"># graph.set_entry_point(&quot;生成测试用例&quot;)</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试用例&quot;</span>, <span class="string">&quot;执行测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;执行测试用例&quot;</span>, <span class="string">&quot;生成测试报告&quot;</span>)</span><br><span class="line"><span class="comment"># graph.set_finish_point(&quot;生成测试报告&quot;)</span></span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试报告&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">app = graph.<span class="built_in">compile</span>()</span><br><span class="line">res = app.invoke(&#123;<span class="string">&quot;user_input&quot;</span>: <span class="string">&quot;测试项目A&quot;</span>&#125;,</span><br><span class="line">                 config=&#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">5</span>&#125;,</span><br><span class="line">                 context=&#123;<span class="string">&quot;test_env&quot;</span>: <span class="string">&quot;测试环境A&quot;</span>, <span class="string">&quot;tester_name&quot;</span>: <span class="string">&quot;阿花&quot;</span>&#125;</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="特殊的节点"><a href="#特殊的节点" class="headerlink" title="特殊的节点"></a>特殊的节点</h3><h4 id="START节点"><a href="#START节点" class="headerlink" title="START节点"></a>START节点</h4><p>节点是一个特殊节点，表示将用户输入发送到图表的节点。引用此节点的主要目的是确定应该首先调用哪些节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> START</span><br><span class="line"></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;node_a&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="END节点"><a href="#END节点" class="headerlink" title="END节点"></a>END节点</h4><p>节点是一个表示终端节点的特殊节点。当您想要指示哪些边在完成后没有作时，将引用此节点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> END</span><br><span class="line"></span><br><span class="line">graph.add_edge(<span class="string">&quot;node_a&quot;</span>, END)</span><br></pre></td></tr></table></figure><h1 id="Edges-边"><a href="#Edges-边" class="headerlink" title="Edges(边)"></a>Edges(边)</h1><p>Edges (边）定义逻辑的路由方式以及图形决定停止的方式。这是代理工作方式以及不同节点之间如何通信的重要组成部分。边缘有几种关键类型：</p><ul><li>法线边：直接从一个节点转到下一个节点。</li><li>条件边：调用函数来确定下一步要转到哪个节点。</li><li>入口点：当用户输入到达时首先调用哪个节点。</li><li>条件入口点：调用一个函数来确定在用户输入到达时首先调用哪个节点。</li></ul><p>一个节点可以有多个传出边。如果一个节点有多个传出边，则所有这些目标节点将作为下一个超级步骤的一部分并行执行。</p><h2 id="切入点"><a href="#切入点" class="headerlink" title="切入点"></a>切入点</h2><p>入口点是图形启动时运行的第一个节点。您可以使用从虚拟 <a href="https://langchain-ai.github.io/langgraph/reference/constants/#langgraph.constants.START">START</a> 节点到第一个要执行的节点的 <a href="https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.state.StateGraph.add_edge">add_edge</a> 方法来指定进入图形的位置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> START</span><br><span class="line"></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;node_a&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="法线边（Normal-Edges）"><a href="#法线边（Normal-Edges）" class="headerlink" title="法线边（Normal Edges）"></a>法线边（Normal Edges）</h2><p>如果想从节点A转到节点B，可以直接使用<em>add_edge</em>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.add_edge(<span class="string">&quot;node_a&quot;</span>, <span class="string">&quot;node_b&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="条件边"><a href="#条件边" class="headerlink" title="条件边"></a>条件边</h2><p>如果要选择性地路由到 1 个或多个边（或选择性地终止），可以使用 add_conditional_edges 方法。此方法接受节点的名称和在执行该节点后调用的“路由函数”：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.add_conditional_edges(<span class="string">&quot;node_a&quot;</span>, routing_function)</span><br></pre></td></tr></table></figure><h2 id="条件入口点"><a href="#条件入口点" class="headerlink" title="条件入口点"></a>条件入口点</h2><p>条件入口点允许您根据自定义逻辑从不同的节点开始。您可以使用虚拟 START 节点中的add_conditional_edges来完成此作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">graph.add_conditional_edges(START, routing_function, &#123;<span class="literal">True</span>: <span class="string">&quot;node_b&quot;</span>, <span class="literal">False</span>: <span class="string">&quot;node_c&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><h1 id="Send-节点并发执行"><a href="#Send-节点并发执行" class="headerlink" title="Send(节点并发执行)"></a>Send(节点并发执行)</h1><p><strong>核心作用</strong>：在运行时动态生成多条边，适用于处理未知数量的并行任务（如批量生成测试用例）。<br><strong>测试场景</strong>：一个测试生成节点产生多个测试用例，需要分发到不同的测试执行节点。</p><ul><li><strong>向哪个节点发送数据</strong>（目标节点名称）</li><li><strong>发送什么数据</strong>（携带的状态内容)</li></ul><h2 id="基本使用-示例代码"><a href="#基本使用-示例代码" class="headerlink" title="基本使用(示例代码)"></a>基本使用(示例代码)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Send</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_tasks</span>(<span class="params">state</span>):</span><br><span class="line"> <span class="keyword">return</span> [</span><br><span class="line">     Send(<span class="string">&quot;task&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>&#125;),</span><br><span class="line">     Send(<span class="string">&quot;task&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="number">2</span>&#125;),</span><br><span class="line">     Send(<span class="string">&quot;task&quot;</span>, &#123;<span class="string">&quot;id&quot;</span>: <span class="number">3</span>&#125;)</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line">graph.add_conditional_edges(</span><br><span class="line"> <span class="string">&quot;start&quot;</span>,</span><br><span class="line"> run_tasks,  <span class="comment"># 返回[Send(...), Send(...), ...]</span></span><br><span class="line"> [<span class="string">&quot;task&quot;</span>]   </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>案例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/29 15:16</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Send</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"># 并发执行特定节点：</span></span><br><span class="line"><span class="string">使用Send去实现：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输入一个接口文档：</span></span><br><span class="line"><span class="string">    生成测试点 ：10个测试点</span></span><br><span class="line"><span class="string">    10个测试点--&gt; 10条可以执行的用例</span></span><br><span class="line"><span class="string">    # 将测试点---&gt;转换为可执行用例的节点  (调用用大模型去实现)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;状态&quot;&quot;&quot;</span></span><br><span class="line">    user_input: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">list</span></span><br><span class="line">    <span class="comment"># 如果多个节点需求去修改某个状态的值，那么可以使用Annotated</span></span><br><span class="line">    runnable_api_case: Annotated[<span class="built_in">list</span>[<span class="built_in">dict</span>], operator.add]</span><br><span class="line">    <span class="keyword">case</span>: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================定义运行节点函数=================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 实际在使用的时候，是使用大模型去生成的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始执行生成用例的节点,用户输入的需求是：&quot;</span>, state.get(<span class="string">&quot;user_input&quot;</span>))</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">5</span>) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: [<span class="string">&quot;测试用例1&quot;</span>, <span class="string">&quot;测试用例2&quot;</span>]&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: [<span class="string">&quot;测试用例1&quot;</span>, <span class="string">&quot;测试用例2&quot;</span>, <span class="string">&quot;测试用例3&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_test_cases</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始执行测试用例：&quot;</span>, state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State, </span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试报告&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行generator_test_report节点,生成测试报告&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_runnable_api_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成可执行的接口用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在生成可执行的接口用例&quot;</span>, state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">case</span> <span class="keyword">in</span> state.get(<span class="string">&quot;test_cases&quot;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;case:&quot;</span>, <span class="keyword">case</span>)</span><br><span class="line">        result.append(Send(<span class="string">&quot;api用例生成&quot;</span>, &#123;<span class="string">&quot;case&quot;</span>: <span class="keyword">case</span>&#125;))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">runnable_api</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行api用例生成，生成可执行的接口用例:&quot;</span>, state.get(<span class="string">&#x27;case&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="string">&quot;runnable_api_case&quot;</span>: [&#123;<span class="string">&quot;api_name&quot;</span>: state.get(<span class="string">&#x27;case&#x27;</span>), <span class="string">&quot;api_url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/api/a&quot;</span>,</span><br><span class="line">                               <span class="string">&quot;api_method&quot;</span>: <span class="string">&quot;POST&quot;</span>&#125;]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================工作流的创建个编排===================</span></span><br><span class="line">graph = StateGraph(State)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试用例点&quot;</span>, generator_test_case)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成可执行接口用例&quot;</span>, generator_runnable_api_case)</span><br><span class="line">graph.add_node(<span class="string">&quot;api用例生成&quot;</span>, runnable_api)</span><br><span class="line">graph.add_node(<span class="string">&quot;执行测试用例&quot;</span>, run_test_cases)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试报告&quot;</span>, generator_test_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起点</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;生成测试用例点&quot;</span>)</span><br><span class="line"><span class="comment"># 设置一个边进行并发执行</span></span><br><span class="line">graph.add_conditional_edges(<span class="string">&quot;生成测试用例点&quot;</span>, generator_runnable_api_case)</span><br><span class="line"></span><br><span class="line">graph.add_edge(<span class="string">&quot;api用例生成&quot;</span>, <span class="string">&quot;执行测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;执行测试用例&quot;</span>, <span class="string">&quot;生成测试报告&quot;</span>)</span><br><span class="line"></span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试报告&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">app = graph.<span class="built_in">compile</span>()</span><br><span class="line">res = app.invoke(&#123;<span class="string">&quot;user_input&quot;</span>: <span class="string">&quot;测试项目A&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="状态合并机制"><a href="#状态合并机制" class="headerlink" title="状态合并机制"></a>状态合并机制</h2><p>在并行任务中（如批量测试、分布式处理），多个节点可能同时修改共享状态。LangGraph 通过 Annotated 类型注解和运算符（如 operator.add）定义状态字段的合并规则，确保并发更新时数据正确聚合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/29 15:20</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict, Annotated</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态：使用 Annotated 声明 cases 字段的合并规则（通过 + 操作符合并列表）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OverallState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    cases: Annotated[<span class="built_in">list</span>[<span class="built_in">str</span>], operator.add]  <span class="comment"># 关键点：并发时自动合并列表</span></span><br><span class="line">    cases2: Annotated[<span class="built_in">dict</span>, operator.or_]  <span class="comment"># 并发时自动合并字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟并行任务节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_a</span>(<span class="params">state: OverallState</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;cases&quot;</span>: [<span class="string">&quot;结果A&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">task_b</span>(<span class="params">state: OverallState</span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;cases&quot;</span>: [<span class="string">&quot;结果B&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建并行流程图</span></span><br><span class="line">builder = StateGraph(OverallState)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;task_a&quot;</span>)</span><br><span class="line">builder.add_node(<span class="string">&quot;task_a&quot;</span>, task_a)</span><br><span class="line">builder.add_node(<span class="string">&quot;task_b&quot;</span>, task_b)</span><br><span class="line">builder.add_edge(<span class="string">&quot;task_a&quot;</span>, <span class="string">&quot;task_b&quot;</span>)  <span class="comment"># 实际场景中可能是并行分支</span></span><br><span class="line"></span><br><span class="line">workflow = builder.<span class="built_in">compile</span>()</span><br><span class="line">result = workflow.invoke(&#123;<span class="string">&quot;cases&quot;</span>: []&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)  <span class="comment"># 输出: &#123;&#x27;cases&#x27;: [&#x27;结果A&#x27;, &#x27;结果B&#x27;], &#x27;cases2&#x27;: &#123;&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li>Annotated 类型注解<ul><li>语法：Annotated[类型, 操作符]</li><li>作用：声明字段的合并行为。例如 operator.add 表示用 + 操作符合并数据。</li></ul></li><li>支持的运算符<ul><li>operator.add：合并列表/数值（list1 + list2）</li><li>operator.or_：字典合并（dict1 | dict2）</li></ul></li></ol><h1 id="分支和循环流程"><a href="#分支和循环流程" class="headerlink" title="分支和循环流程"></a>分支和循环流程</h1><h2 id="条件分支流程"><a href="#条件分支流程" class="headerlink" title="条件分支流程"></a>条件分支流程</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/29 15:25</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;状态&quot;&quot;&quot;</span></span><br><span class="line">    user_input: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">list</span></span><br><span class="line">    check_result: <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================定义运行节点函数=================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始执行生成用例的节点,用户输入的需求是：&quot;</span>, state.get(<span class="string">&quot;user_input&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: [<span class="string">&quot;测试用例1&quot;</span>, <span class="string">&quot;测试用例2&quot;</span>, <span class="string">&#x27;测试用例3&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_test_case_router</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查测试用例是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;校验测试用例是否可用,当前的用例为：&quot;</span>, state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line">    <span class="comment"># 校验逻辑后续讲项目的时候完善,校验用例的数量是否大于3</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state.get(<span class="string">&quot;test_cases&quot;</span>)) &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="comment"># return &quot;执行测试用例&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return &quot;补充生成测试用例&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_case2</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;补充生成测试用例的节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在补充生成测试用例的节点&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: state.get(<span class="string">&quot;test_cases&quot;</span>) + [<span class="string">&#x27;测试用例3&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_test_cases</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始执行测试用例：&quot;</span>, state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State, </span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试报告&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行generator_test_report节点,生成测试报告&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================工作流的创建个编排===================</span></span><br><span class="line">graph = StateGraph(State)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试用例&quot;</span>, generator_test_case)</span><br><span class="line">graph.add_node(<span class="string">&quot;检查测试用例&quot;</span>, check_test_case_router)</span><br><span class="line">graph.add_node(<span class="string">&quot;补充生成测试用例&quot;</span>, generator_test_case2)</span><br><span class="line">graph.add_node(<span class="string">&quot;执行测试用例&quot;</span>, run_test_cases)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试报告&quot;</span>, generator_test_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起点</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line"><span class="comment"># 设置一个控制节点执行分支的条件</span></span><br><span class="line"><span class="comment"># graph.add_conditional_edges(&quot;生成测试用例&quot;, check_test_case_router, [&quot;补充生成测试用例&quot;, &quot;执行测试用例&quot;])</span></span><br><span class="line">graph.add_conditional_edges(<span class="string">&quot;生成测试用例&quot;</span>, check_test_case_router, &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="string">&quot;执行测试用例&quot;</span>,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: <span class="string">&quot;补充生成测试用例&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">graph.add_edge(<span class="string">&quot;补充生成测试用例&quot;</span>, <span class="string">&quot;执行测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;执行测试用例&quot;</span>, <span class="string">&quot;生成测试报告&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试报告&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">app = graph.<span class="built_in">compile</span>()</span><br><span class="line">res = app.invoke(&#123;<span class="string">&quot;user_input&quot;</span>: <span class="string">&quot;测试项目A&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="循环流程"><a href="#循环流程" class="headerlink" title="循环流程"></a>循环流程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/29 15:28</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;状态&quot;&quot;&quot;</span></span><br><span class="line">    user_input: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">list</span></span><br><span class="line">    check_result: <span class="built_in">bool</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================定义运行节点函数=================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 实际在使用的时候，是使用大模型去生成的</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始执行生成用例的节点,用户输入的需求是：&quot;</span>, state.get(<span class="string">&quot;user_input&quot;</span>))</span><br><span class="line">    <span class="keyword">import</span> random</span><br><span class="line">    <span class="keyword">if</span> random.randint(<span class="number">0</span>, <span class="number">5</span>) &gt; <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: [<span class="string">&quot;测试用例1&quot;</span>, <span class="string">&quot;测试用例2&quot;</span>]&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: [<span class="string">&quot;测试用例1&quot;</span>, <span class="string">&quot;测试用例2&quot;</span>, <span class="string">&quot;测试用例3&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_test_case_router</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;检查测试用例是否可用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;校验测试用例是否可用,当前的用例为：&quot;</span>, state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line">    <span class="comment"># 校验逻辑后续讲项目的时候完善,校验用例的数量是否大于3</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state.get(<span class="string">&quot;test_cases&quot;</span>)) &gt;= <span class="number">3</span>:</span><br><span class="line">        <span class="comment"># return &quot;执行测试用例&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;a&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># return &quot;补充生成测试用例&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_test_cases</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始执行测试用例：&quot;</span>, state.get(<span class="string">&quot;test_cases&quot;</span>))</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State, </span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试报告&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行generator_test_report节点,生成测试报告&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================工作流的创建个编排===================</span></span><br><span class="line">graph = StateGraph(State)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试用例&quot;</span>, generator_test_case)</span><br><span class="line">graph.add_node(<span class="string">&quot;检查测试用例&quot;</span>, check_test_case_router)</span><br><span class="line">graph.add_node(<span class="string">&quot;执行测试用例&quot;</span>, run_test_cases)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试报告&quot;</span>, generator_test_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起点</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line"><span class="comment"># 设置一个控制节点执行分支的条件</span></span><br><span class="line">graph.add_conditional_edges(<span class="string">&quot;生成测试用例&quot;</span>, check_test_case_router, &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="string">&quot;执行测试用例&quot;</span>,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: <span class="string">&quot;生成测试用例&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">graph.add_edge(<span class="string">&quot;执行测试用例&quot;</span>, <span class="string">&quot;生成测试报告&quot;</span>)</span><br><span class="line"></span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试报告&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">app = graph.<span class="built_in">compile</span>()</span><br><span class="line">res = app.invoke(&#123;<span class="string">&quot;user_input&quot;</span>: <span class="string">&quot;测试项目A&quot;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第九讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之Agent开发</title>
    <link href="https://jinglv.github.io/2025/09/28/ai/langchain/langgraph/8-langgraph-agent/"/>
    <id>https://jinglv.github.io/2025/09/28/ai/langchain/langgraph/8-langgraph-agent/</id>
    <published>2025-09-27T16:00:00.000Z</published>
    <updated>2025-09-28T08:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>LangGraph 提供了用于构建基于代理的应用程序的低级原语和高级预构建组件。重点介绍预构建的、即用型组件，旨在帮助您快速可靠地构建代理系统，而无需从头开始实现编排、内存或人工反馈处理。</p><h1 id="Agent-核心架构"><a href="#Agent-核心架构" class="headerlink" title="Agent 核心架构"></a>Agent 核心架构</h1><h2 id="代理（Agent）由三大组件构成"><a href="#代理（Agent）由三大组件构成" class="headerlink" title="代理（Agent）由三大组件构成"></a>代理（Agent）由三大组件构成</h2><div class="table-container"><table><thead><tr><th>组件</th><th>功能说明</th></tr></thead><tbody><tr><td><strong>大型语言模型（LLM）</strong></td><td>驱动代理决策的核心推理引擎。</td></tr><tr><td><strong>工具集（Tools 在线的 mcp 提供的能力）</strong></td><td>代理可调用的函数/API（如搜索、计算、数据库操作等）。</td></tr><tr><td><strong>提示（Prompt）</strong></td><td>定义代理行为规则的指令模板（如任务目标、约束条件）。</td></tr></tbody></table></div><h2 id="代理运行流程（循环迭代）"><a href="#代理运行流程（循环迭代）" class="headerlink" title="代理运行流程（循环迭代）"></a>代理运行流程（循环迭代）</h2><ol><li><strong>选择工具</strong> → 2. <strong>执行工具</strong> → 3. <strong>观察结果</strong> → 4. <strong>决策下一步</strong> → <strong>（循环至任务完成）</strong></li></ol><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250928160627369.png" alt="image-20250928160627369" style="zoom:67%;" /></p><h1 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h1><div class="table-container"><table><thead><tr><th>特性</th><th>关键能力</th></tr></thead><tbody><tr><td><strong>内存集成</strong></td><td>短期（会话内记忆） + 长期（跨会话持久化存储）。</td></tr><tr><td><strong>人机交互控制</strong></td><td>支持异步暂停/恢复，允许人工干预（审批、修正）。</td></tr><tr><td><strong>实时流式支持</strong></td><td>代理状态、工具输出、模型Token流式传输。</td></tr><tr><td><strong>生产级部署工具</strong></td><td>内置测试/调试/部署支持，兼容多种基础设施。</td></tr><tr><td><strong>可视化IDE（Studio）</strong></td><td>提供工作流检查与调试的可视化界面。</td></tr></tbody></table></div><h1 id="高级构建模块"><a href="#高级构建模块" class="headerlink" title="高级构建模块"></a>高级构建模块</h1><p>LangGraph 提供预构建组件，避免从零开发： </p><ul><li><strong>编排逻辑</strong>：自动处理状态转移与任务调度。 </li><li><strong>内存管理</strong>：内置短期/长期记忆实现。 </li><li><strong>人工反馈集成</strong>：支持异步人工审核流程。</li></ul><p><strong>开发者价值</strong>：聚焦业务逻辑，无需重复实现底层基础设施。</p><h1 id="功能包生态系统"><a href="#功能包生态系统" class="headerlink" title="功能包生态系统"></a>功能包生态系统</h1><div class="table-container"><table><thead><tr><th>包名</th><th>用途</th><th>安装命令</th></tr></thead><tbody><tr><td><code>langgraph-prebuilt</code></td><td>基础代理组件（内置）</td><td><code>pip install -U langgraph</code></td></tr><tr><td><code>langgraph-supervisor</code></td><td>监督型代理工具</td><td><code>pip install -U langgraph-supervisor</code></td></tr><tr><td><code>langgraph-swarm</code></td><td>多智能体群体系统</td><td><code>pip install -U langgraph-swarm</code></td></tr><tr><td><code>langchain-mcp-adapters</code></td><td>工具/资源集成接口</td><td><code>pip install -U langchain-mcp-adapters</code></td></tr><tr><td><code>langmem</code></td><td>短期/长期记忆管理</td><td><code>pip install -U langmem</code></td></tr><tr><td><code>agentevals</code></td><td>代理性能评估工具</td><td><code>pip install -U agentevals</code></td></tr></tbody></table></div><h1 id="Agent智能体创建"><a href="#Agent智能体创建" class="headerlink" title="Agent智能体创建"></a>Agent智能体创建</h1><h2 id="创建ReAct-Agent（create-react-agent）"><a href="#创建ReAct-Agent（create-react-agent）" class="headerlink" title="创建ReAct Agent（create_react_agent）"></a>创建ReAct Agent（create_react_agent）</h2><p>使用 LangGraph 提供的 <code>create_react_agent</code> 快速创建一个具备工具调用能力的代理。 </p><p>先了解下什么是 create_react_agent（<a href="https://langchain-ai.github.io/langgraph/reference/agents/）：">https://langchain-ai.github.io/langgraph/reference/agents/）：</a></p><p>使用以下工具可视化由 <a href="https://langchain-ai.github.io/langgraph/reference/prebuilt/#langgraph.prebuilt.chat_agent_executor.create_react_agent"><code>create_react_agent</code></a> 并查看相应代码的大纲。 它允许您探索代理的基础结构，如以下内容的存在所定义：</p><ul><li><a href="https://langchain-ai.github.io/langgraph/how-tos/tool-calling/"><code>tools</code></a>：代理可用于执行任务的工具（函数、API 或其他可调用对象）的列表。</li><li><a href="https://langchain-ai.github.io/langgraph/how-tos/create-react-agent-manage-message-history/"><code>pre_model_hook</code></a>：在调用模型之前调用的函数。它可用于压缩消息或执行其他预处理任务</li><li><a href="https://langchain-ai.github.io/langgraph/agents/agents/#6-configure-structured-output"><code>response_format</code></a>：用于约束最终输出类型的数据结构，例如 <code>pydantic BaseModel</code></li></ul><p>示例代码如下：</p><p>通过create_react_agent创建一个智能体，生成代理图（Mermaid 格式）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/28 16:29</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool(<span class="params"><span class="string">&quot;加法计算&quot;</span>, description=<span class="string">&quot;计算数值相加的工具&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算两个数值相加的工具</span></span><br><span class="line"><span class="string">    :param a: 数值a</span></span><br><span class="line"><span class="string">    :param b: 数值b</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行工具：add&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool(<span class="params"><span class="string">&quot;乘法计算&quot;</span>, description=<span class="string">&quot;计算数值相加的工具&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算两个数值相乘的工具</span></span><br><span class="line"><span class="string">    :param a: 数值a</span></span><br><span class="line"><span class="string">    :param b: 数值b</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行工具：multiply&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===============创建一个agent==============</span></span><br><span class="line">agent = create_react_agent(</span><br><span class="line">    model=qv_llm.bind_tools([add, multiply]),</span><br><span class="line">    tools=[add, multiply],</span><br><span class="line">    <span class="comment"># 使用字符串，直接传模版对象会有问题</span></span><br><span class="line">    prompt=<span class="string">&quot;您是一位数学计算助手，请根据输入的指令，选择合适的工具计算出结果,&quot;</span>,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 流式执行</span></span><br><span class="line">response = agent.stream(&#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请计算1*2的结果&quot;</span>&#125;]&#125;)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> response:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===============获取agent执行的流程图谱==============</span></span><br><span class="line">res = agent.get_graph().draw_mermaid_png()</span><br><span class="line"><span class="built_in">print</span>(res)  <span class="comment"># 输出二进制编码</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;langgraph开发Agent.png&quot;</span>, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Agent详解"><a href="#Agent详解" class="headerlink" title="Agent详解"></a>Agent详解</h2><h3 id="执行模式概览"><a href="#执行模式概览" class="headerlink" title="执行模式概览"></a>执行模式概览</h3><p>LangGraph 代理支持 <strong>同步</strong> 与 <strong>异步</strong> 两种执行方式：</p><div class="table-container"><table><thead><tr><th><strong>模式</strong></th><th><strong>方法</strong></th><th>适用场景</th><th>代码示例</th></tr></thead><tbody><tr><td><strong>同步调用</strong></td><td><code>.invoke()</code> / <code>.stream()</code></td><td>简单脚本/阻塞式任务</td><td><code>response = agent.invoke(input)</code></td></tr><tr><td><strong>异步调用</strong></td><td><code>.ainvoke()</code> / <code>.astream()</code></td><td>Web服务/高并发场景</td><td><code>response = await agent.ainvoke(input)</code></td></tr></tbody></table></div><h3 id="输入输出规范"><a href="#输入输出规范" class="headerlink" title="输入输出规范"></a>输入输出规范</h3><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>代理输入必须为包含 <code>messages</code> 键的字典，支持多种消息结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 字符串快捷输入（自动转为 HumanMessage）</span></span><br><span class="line">&#123;<span class="string">&quot;messages&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 单条消息字典</span></span><br><span class="line">&#123;<span class="string">&quot;messages&quot;</span>: &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;&#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 消息列表（支持多轮对话）</span></span><br><span class="line">&#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hello&quot;</span>&#125;]&#125;  </span><br></pre></td></tr></table></figure><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出字典包含以下字段：</p><ul><li><code>messages</code>: 完整对话消息历史（含工具调用/响应）</li><li><code>structured_response</code>: 结构化输出（如配置）</li><li>自定义状态字段（若定义 <code>state_schema</code>）</li></ul><h3 id="流式传输控制"><a href="#流式传输控制" class="headerlink" title="流式传输控制"></a>流式传输控制</h3><div class="table-container"><table><thead><tr><th><strong>流模式</strong> (<code>stream_mode</code>)</th><th>输出内容</th></tr></thead><tbody><tr><td><code>&quot;updates&quot;</code></td><td>状态增量更新（默认）</td></tr><tr><td><code>&quot;tokens&quot;</code></td><td>LLM 生成的原始 Token</td></tr><tr><td><code>&quot;tools&quot;</code></td><td>工具调用/响应事件</td></tr></tbody></table></div><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 同步流式调用</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> agent.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;上海天气&quot;</span>&#125;]&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>  <span class="comment"># 可选 &quot;tokens&quot; 或 &quot;tools&quot;</span></span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)  <span class="comment"># 实时处理数据块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 异步流式调用</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">for</span> chunk <span class="keyword">in</span> agent.astream(...):</span><br><span class="line">    process(chunk)</span><br></pre></td></tr></table></figure><h3 id="执行安全控制-设置最大递归限制"><a href="#执行安全控制-设置最大递归限制" class="headerlink" title="执行安全控制(设置最大递归限制)"></a>执行安全控制(设置最大递归限制)</h3><p>防止无限循环，通过 <code>recursion_limit</code> 控制最大迭代次数</p><h4 id="设置默认最大递归次数"><a href="#设置默认最大递归次数" class="headerlink" title="设置默认最大递归次数"></a>设置默认最大递归次数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">agent = create_react_agent(</span><br><span class="line">    <span class="comment"># 绑定模型</span></span><br><span class="line">    model=llm.bind_tools([add, multiply]),</span><br><span class="line">    <span class="comment"># 绑定工具</span></span><br><span class="line">    tools=[add, multiply],</span><br><span class="line">    <span class="comment"># 使用字符串，直接传模版对象会有问题</span></span><br><span class="line">    prompt=PromptTemplate(template=<span class="string">&quot;您是一位数学计算助手，请根据输入的指令，选择合适的工具计算出结果,请计算1*2的结果&quot;</span>),</span><br><span class="line">).with_config(&#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">30</span>&#125;)</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">agent = create_react_agent(</span><br><span class="line">    <span class="comment"># 绑定模型</span></span><br><span class="line">    model=llm.bind_tools([add, multiply]),</span><br><span class="line">    <span class="comment"># 绑定工具</span></span><br><span class="line">    tools=[add, multiply],</span><br><span class="line">    <span class="comment"># 使用字符串，直接传模版对象会有问题</span></span><br><span class="line">    prompt=PromptTemplate(template=<span class="string">&quot;您是一位数学计算助手，请根据输入的指令，选择合适的工具计算出结果,请计算1*2的结果&quot;</span>),</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 设置默认最大递归次数</span></span><br><span class="line">agent = agent.with_config(&#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">30</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="执行时设置最大递归次数"><a href="#执行时设置最大递归次数" class="headerlink" title="执行时设置最大递归次数"></a>执行时设置最大递归次数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">agent = create_react_agent(</span><br><span class="line">    <span class="comment"># 绑定模型</span></span><br><span class="line">    model=llm.bind_tools([add, multiply]),</span><br><span class="line">    <span class="comment"># 绑定工具</span></span><br><span class="line">    tools=[add, multiply],</span><br><span class="line">    <span class="comment"># 使用字符串，直接传模版对象会有问题</span></span><br><span class="line">    prompt=PromptTemplate(template=<span class="string">&quot;您是一位数学计算助手，请根据输入的指令，选择合适的工具计算出结果,请计算1*2的结果&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在执行的时候去设置最大递归的次数</span></span><br><span class="line">response = agent.stream(&#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请计算1*2的结果&quot;</span>&#125;]&#125;,</span><br><span class="line">                        &#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">30</span>&#125;</span><br><span class="line">                        )</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> response:</span><br><span class="line">    <span class="built_in">print</span>(item)</span><br></pre></td></tr></table></figure><h1 id="Agent开发案例"><a href="#Agent开发案例" class="headerlink" title="Agent开发案例"></a>Agent开发案例</h1><p>实现一个数据库操作智能体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/29 09:20</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dotenv</span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载.env文件中的环境变量</span></span><br><span class="line">dotenv.load_dotenv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步定义工具函数</span></span><br><span class="line"><span class="meta">@tool(<span class="params"><span class="string">&#x27;数据库操作&#x27;</span>, description=<span class="string">&#x27;连接数据库,执行sql语句，并返回执行的结果&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mysql_executor</span>(<span class="params">sql: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    连接数据库，执行sql语句</span></span><br><span class="line"><span class="string">    需要先安装pymysql</span></span><br><span class="line"><span class="string">    :param sql:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        connent = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">                                  port=<span class="number">3306</span>,</span><br><span class="line">                                  user=<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">                                  password=<span class="string">&#x27;12345678&#x27;</span>,</span><br><span class="line">                                  cursorclass=pymysql.cursors.DictCursor,</span><br><span class="line">                                  db=<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">                                  autocommit=<span class="literal">True</span>,</span><br><span class="line">                                  )</span><br><span class="line">        cursor = connent.cursor()</span><br><span class="line">        cursor.execute(sql)</span><br><span class="line">        connent.commit()</span><br><span class="line">    <span class="keyword">except</span> pymysql.err.OperationalError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    result = cursor.fetchall()</span><br><span class="line">    cursor.close()</span><br><span class="line">    connent.cursor()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DBAgent</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.llm = qv_llm</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">self, <span class="built_in">input</span></span>):</span><br><span class="line">        agent = create_react_agent(</span><br><span class="line">            model=<span class="variable language_">self</span>.llm,</span><br><span class="line">            tools=[mysql_executor],</span><br><span class="line">            <span class="comment"># # 这个是给智能体进行身份定位，和决策建议的提示词</span></span><br><span class="line">            prompt=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            你是一位资深的DBA，现在需要你根据用户的需求，编写对应的sql语句，调用数据库操作的工具，执行sql语句，并返回执行的结果,</span></span><br><span class="line"><span class="string">            每一步执行完都需要去分析当前的执行进度，以及规划下一步的任务执行</span></span><br><span class="line"><span class="string">            &quot;&quot;&quot;</span></span><br><span class="line">        )</span><br><span class="line">        response = agent.stream(&#123;<span class="string">&quot;messages&quot;</span>: <span class="built_in">input</span>&#125;)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> response:</span><br><span class="line">            <span class="built_in">print</span>(item)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    DBAgent().main(<span class="string">&quot;创建一个用户表，需要用户id，用户名，用户密码，用户邮箱，用户手机号，用户地址，用户性别这些字段&quot;</span>)</span><br><span class="line">    <span class="comment"># DBAgent().main(&quot;往用户表里面插入10条数据&quot;)</span></span><br><span class="line">    <span class="comment"># DBAgent().main(</span></span><br><span class="line">    <span class="comment">#     &quot;创建一个学生表，需要学生id，学生名，学生性别，学生年龄，学生手机号，学生邮箱，学生地址，学生生日，学生班级，学生部门这些字段，并往学生表中插入20条数据&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：以上没有实现记忆功能，在进行已创建表的基础上进行数据表的增删改查操作是会报错的</p>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第八讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>AI大模型提示词工程</title>
    <link href="https://jinglv.github.io/2025/09/23/ai/llm/2-prompts/"/>
    <id>https://jinglv.github.io/2025/09/23/ai/llm/2-prompts/</id>
    <published>2025-09-22T16:00:00.000Z</published>
    <updated>2025-09-23T08:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="与AI对话"><a href="#与AI对话" class="headerlink" title="与AI对话"></a>与AI对话</h1><h2 id="提示词Prompt介绍"><a href="#提示词Prompt介绍" class="headerlink" title="提示词Prompt介绍"></a>提示词Prompt介绍</h2><ol><li>对于普通人：提示词是和 AI 沟通的桥梁，提示词的好坏决定了返回的结果是否准确。</li><li>对于开发者：提示工程是一种相对较新的学科，专门用于开发和优化提示，以高效地使用语言模型（LM）来处理各种应用和研究主题。</li></ol><h2 id="提示词的原则与技巧"><a href="#提示词的原则与技巧" class="headerlink" title="提示词的原则与技巧"></a>提示词的原则与技巧</h2><div class="table-container"><table><thead><tr><th style="text-align:left">原则</th><th style="text-align:left">原因</th></tr></thead><tbody><tr><td style="text-align:left">写清楚需求</td><td style="text-align:left">GPT 模型无法读懂您的想法，因此在提供需求时尽可能具体是很重要的。这包括在您的查询中包含详细信息，要求模型采用角色，以及使用定界符清楚地指示输入的不同部分。</td></tr><tr><td style="text-align:left">提供参考文本</td><td style="text-align:left">如果可以，请提供与您希望模型生成的内容相似的参考文本。这将有助于模型了解您要查找的内容并生成更准确的结果。</td></tr><tr><td style="text-align:left">将复杂的任务拆分为更简单的子任务</td><td style="text-align:left">如果您试图让模型做一些复杂的事情，将任务分解为更小、更易于管理的子任务会很有帮助。这将使模型更容易理解您的要求并生成更准确的结果。</td></tr><tr><td style="text-align:left">角色扮演</td><td style="text-align:left">这个技巧的作用是告诉ChatGPT在对话中扮演一个特定的角色或人物。这对于创造更有吸引力和沉浸感的对话，或模拟真实世界的场景特别有用。</td></tr><tr><td style="text-align:left">系统地测试变化</td><td style="text-align:left">对需求或参考文本进行更改时，重要的是系统地测试结果以了解它们如何影响模型的输出。这将帮助您确定对改进结果最有效的更改。</td></tr></tbody></table></div><h3 id="写清楚需求"><a href="#写清楚需求" class="headerlink" title="写清楚需求"></a>写清楚需求</h3><p>编写有效的ChatGPT的难点之一是表达含糊不清。为了避免这个问题，有以下几个问题需要注意：</p><ol><li>定义任何专业术语或技术术语。</li><li>避免使用模棱两可的语言。</li><li>使用清晰或简明的语言</li></ol><ul><li><p>错误案例：”你是我的哈基米吗？”</p><p>哈基米属于网络用语，而且诞生在2023年，ChatGPT是无法理解这个词的语意的。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041538865.png" alt="image-20230904153857689" style="zoom:40%;" /></p></li><li><p>好的案例：”请帮我提供在深圳市宝安区所有的咖啡馆”</p><p>简明扼要说清楚自己的需求，无需多言，ChatGPT便很好理解了。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041540977.png" alt="image-20230904154007912" style="zoom:40%;" /></p></li></ul><h3 id="提供参考文本"><a href="#提供参考文本" class="headerlink" title="提供参考文本"></a>提供参考文本</h3><ol><li><p>对于文本比较短的引用，可以直接贴到提问里面即可： 如果你有一段法律条款，并希望模型使用这段条款来解释某个概念，例如，我给ChatGPT一段代码，分析代码的Bug</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041544431.png" alt="image-20230904154421304" style="zoom:40%;" /></p></li><li><p>网页链接的引用： 也可以直接将网页链接里面的内容提供给 GPT 来作为引用文本。比如可以直接给它一个链接地址，让它总结文章内的内容。（注意这个功能需要使用web插件）</p></li></ol><h3 id="拆解复杂任务"><a href="#拆解复杂任务" class="headerlink" title="拆解复杂任务"></a>拆解复杂任务</h3><p>作为一个厨师，在做饭的时候需要完成这些步骤：准备食材、清理食材、处理食材、开始烹饪、摆盘。</p><p>在这个过程中，其实厨师就是把一个复杂的任务，拆解成了多个简单的任务。其实在编程的过程中，也是同样的道理。也会把一个复杂需求，拆解为N个简单的子需求。</p><p>如果需要ChatGPT帮助我们完成一个复杂的任务，那么，我们需要预先帮它把任务拆分。这样做的优点是：</p><ol><li>更好理解每一个操作步骤。</li><li>不被上下文限制影响。</li><li>方便调整。</li></ol><p>例如，我们提出了一个如下的复杂任务：</p><ul><li>提示词：作为一个测试工程师，我即将进行述职答辩，我想编写一个述职报告，述职报告需要包含我今年的成绩、我明年的目标、以及我在今年的工作过程中碰到的问题</li></ul><p>ChatGPT 虽然给到了相应的回复，但是还有问题：</p><ol><li>工作成绩没有清晰的数据也没有说服力，看着比较干瘪。报告内容没有图表。</li><li>内容太过简单空洞。</li><li>格式不够优雅。</li></ol><p>如果我们把提问的方式做进一步优化，把这个复杂问题一步步进行拆解，并给ChatGPT一定的修改反馈，则产生的内容会更加符合我们的需求，比如我们可以把问题分解为：</p><ul><li><p>提示词：作为一个测试工程师，我即将进行述职答辩，我想编写一个述职报告。述职报告需要包含我今年的成绩，我今年带领测试团队将bug的逃逸率降低了10%的比例。并且我希望有一个通过echarts绘制的折线图。请将我的述职报告做进一步优化。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041550209.png" alt="image-20230904155058134" style="zoom:40%;" /></p></li><li><p>提示词： echarts 折线图没有展示出来</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041552696.png" alt="image-20230904155223593" style="zoom:40%;" /></p></li></ul><h3 id="借助外部工具"><a href="#借助外部工具" class="headerlink" title="借助外部工具"></a>借助外部工具</h3><p>作为一个大语言生成模型，GPT4 并不擅长各种数学计算。比如下面的问题(来自官方 GPT 最佳指南中的示例问题)：</p><ul><li>提示词：查找以下多项式的所有实值根：3x^5 - 5x^4 - 3x^3 - 7x - 10</li></ul><p>如果直接提问的话，通常没法直接给出答案，如下图所示，虽然借助Python，给出了运算过程，但是其实ChatGPT无法像人类数学家一样，给出直接的推导过程：</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041553313.png" alt="image-20230904155335208" style="zoom:40%;" /></p><p>所以可以将提示词改为：</p><ul><li><p>提示词：查找以下多项式的所有实值根：3x^5 - 5x^4 - 3x^3 - 7x - 10 ，使用Python 实现</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041555133.png" alt="image-20230904155551020" style="zoom:40%;" /></p></li></ul><h3 id="角色扮演"><a href="#角色扮演" class="headerlink" title="角色扮演"></a>角色扮演</h3><p>角色扮演的过程就更为简单了，我们在编写提示词的时候，只需要给它加上一些角色的设定。</p><p>ChatGPT甚至可以扮演领导，面试官，浏览器的console插件等各种各样我们可以想象到的角色：</p><ul><li><p>提示词：我希望你作为一个 javascript 控制台。我将输入命令，你回复javascript 控制台应显示的内容。我希望您只在一个唯一的代码块内回复终端输出，而不是其他任何内容。不要写解释。我的第一个命令是 console.log(“Hello World”);</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041559763.png" alt="image-20230904155950703" style="zoom:40%;" /></p></li></ul><h3 id="系统的测试变化"><a href="#系统的测试变化" class="headerlink" title="系统的测试变化"></a>系统的测试变化</h3><p>正如人在回复信息的时候，也无法保证所有的回复都是正确的，ChatGPT 也无法保证每次给到的信息都是“靠谱的”或者是满足需求的。</p><p>所以ChatGPT的每一次回复，在确认没有问题之后，再使用。如果有问题的话，可以进一步进行提问，ChatGPT会根据提示词不停的纠正回复。以达到一个满意的效果。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041600359.png" alt="image-20230904160046303" style="zoom:50%;" /></p><p>比如这个示例：</p><ul><li><p>提示词：请问 App 的产品在测试的过程中需要注意什么</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041602068.png" alt="image-20230904160251993" style="zoom:40%;" /></p></li><li><p>提示词：请针对兼容性测试再做一些补充</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/202309041604429.png" alt="image-20230904160422314" style="zoom:40%;" /></p></li></ul><p>通过不停的测试以及纠正 ChatGPT 的回复，即可最终获得一个满意的回复。</p><h1 id="提示词相关概念"><a href="#提示词相关概念" class="headerlink" title="提示词相关概念"></a>提示词相关概念</h1><p>通过上面内容对大模型如何进行对话介绍，下面内容则是详细介绍提示词相关具体内容</p><h2 id="什么是提示词（Prompt）？"><a href="#什么是提示词（Prompt）？" class="headerlink" title="什么是提示词（Prompt）？"></a>什么是提示词（Prompt）？</h2><p>概念说明：</p><ul><li>提示词是<strong>用户与大模型交互的输入指令</strong>，用于告诉模型你希望它完成什么任务。</li><li>它既可以是一句话，也可以是一段上下文或示例。</li></ul><p>举例：</p><p>请撰写一份关于用户注册功能的测试用例。</p><h2 id="什么是-Token？"><a href="#什么是-Token？" class="headerlink" title="什么是 Token？"></a>什么是 Token？</h2><p>概念说明：</p><ul><li>模型处理的最小单位，通常是词的一部分、一个单词，甚至一个符号*。</li></ul><p>举例：</p><ul><li>“Deepseek 是厉害的。” → 分词可能为： <code>[&quot;Deepseek&quot;, &quot; 是&quot;, &quot; 厉&quot;, &quot;害&quot;, &quot;的&quot;, &quot;。&quot;]</code></li></ul><h2 id="上下文窗口（Context-Window）"><a href="#上下文窗口（Context-Window）" class="headerlink" title="上下文窗口（Context Window）"></a>上下文窗口（Context Window）</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">128K 的上下文==128000 个 token</span><br></pre></td></tr></table></figure><p>概念说明：</p><ul><li>指模型每次处理输入 + 输出的<strong>最大 token 数量</strong>。</li><li>超出后旧内容将被“遗忘”</li></ul><p>注意点💡</p><ul><li>长 prompt ≠ 好效果，要“<strong>信息密度高且结构清晰</strong>”。</li><li>内容越多，token 消耗越多 → 成本 ↑、速度 ↓。</li></ul><p>常见大模型的上下文最大Token记忆数量：</p><ul><li>GPT4 —-&gt; 128K</li><li>DeepSeekV3 —-&gt;128K</li></ul><h2 id="Prompt-与响应的关系"><a href="#Prompt-与响应的关系" class="headerlink" title="Prompt 与响应的关系"></a>Prompt 与响应的关系</h2><p>基本流程：</p><ol><li>用户发出 Prompt</li><li>模型理解并生成响应</li><li>模型根据上下文和历史对话生成“合理推测”</li></ol><p>模型生成原理：</p><ul><li>本质是<strong>下一个最可能的 token 预测</strong>。</li><li>模型没有“理解”，而是基于概率选择“合适的词”。</li></ul><p>Prompt 与输出质量的关系：</p><ul><li>Prompt 不清晰 → 响应不确定甚至出现“幻觉”</li><li>Prompt 精准 → 响应更专业、格式更一致</li></ul><h2 id="什么是提示词工程？"><a href="#什么是提示词工程？" class="headerlink" title="什么是提示词工程？"></a>什么是提示词工程？</h2><p>概念说明：</p><p>提示词工程是指<strong>系统性地设计、优化与测试提示词</strong>的技术和方法，以引导大语言模型产生预期、高质量、可控的输出。</p><p>作用：</p><ul><li>增强模型<strong>可靠性</strong>与<strong>一致性</strong></li><li>控制模型输出<strong>格式</strong>与<strong>风格</strong></li><li>降低“胡编乱造”（幻觉）的风险</li></ul><h1 id="提示词角色设定"><a href="#提示词角色设定" class="headerlink" title="提示词角色设定"></a>提示词角色设定</h1><h2 id="role-的类型及语义说明"><a href="#role-的类型及语义说明" class="headerlink" title="role 的类型及语义说明"></a>role 的类型及语义说明</h2><div class="table-container"><table><thead><tr><th>角色（role）</th><th>说明</th><th>示例场景</th></tr></thead><tbody><tr><td>system</td><td>系统设定。用来告诉模型它的角色、行为风格、语境范围等。</td><td>设定模型是“测试专家”、“英语老师”、“客服机器人”等</td></tr><tr><td>user</td><td>用户输入。代表人类给模型提的问题或指令。</td><td>提问、请求、任务说明</td></tr><tr><td>assistant</td><td>模型回复。由大语言模型根据前文生成的回答。</td><td>模型生成输出，如回答问题、给建议</td></tr><tr><td>tool（可选）</td><td>工具调用（部分模型支持）。用于中间调用工具函数或API时的中间交互。</td><td>使用函数调用插件、调用代码执行器等</td></tr></tbody></table></div><ul><li>在多数常见应用中，仅需关注前三种角色：system、user 和 assistant。</li></ul><h2 id="基础角色设定"><a href="#基础角色设定" class="headerlink" title="基础角色设定"></a>基础角色设定</h2><p>给模型“扮演”某个角色，设定行为风格与语言风格</p><p>特点：</p><ul><li>模拟身份让输出更真实、更符合特定语境</li><li>非常适合教育、技术、客服等行业场景</li></ul><p><strong>示例1：标准问答流程</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;请用通俗易懂的方式讲解“时态”概念？&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例2：英语教学风格</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;</span><br><span class="line">    &#x27;role&#x27;: &#x27;user&#x27;, </span><br><span class="line">    &#x27;content&#x27;: &#x27;你是一个专业的英语老师，请用通俗易懂的方式讲解“时态”概念。&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例3：测试主管角色扮演</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&#x27;role&#x27;: &#x27;user&#x27;, </span><br><span class="line">    &#x27;content&#x27;: &#x27;你是一个经验丰富的软件测试主管，请评审以下测试用例是否合理，并提出优化建议：\n用例：用户注册时输入无效邮箱应提示错误信息。&#x27;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="使用system设定角色"><a href="#使用system设定角色" class="headerlink" title="使用system设定角色"></a>使用system设定角色</h2><p><strong>示例1：设定身份与风格（使用 system）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;你是一名严谨且有经验的软件测试工程师，回答需清晰、专业、有条理。&quot;&#125;,</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;请列出注册功能的边界测试用例。&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例2：错误场景分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;你是一个擅长分析测试日志的QA专家，能快速定位问题根源。&quot;&#125;,</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;测试报告显示登录接口返回500错误，可能是什么原因？&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例3：技术方案咨询</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;system&quot;, &quot;content&quot;: &quot;你是自动化测试工具专家，熟悉主流测试框架。&quot;&#125;,</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;如何用Pytest对API响应做Schema验证？&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>对比</strong></p><ol><li>角色设定的位置不同：system消息用于长期角色设定，而user消息中的角色指示是即时的</li><li>结构规范性：按照官方的最佳实践，角色和风格应该放在system消息中，这样更清晰和持久。</li><li>效率：使用system消息可以避免重复指定角色，提高对话效率。</li><li>清晰度：system消息明确区分角色设定和具体请求，而user中的角色指示可能混合了指令和角色设定，不够清晰</li></ol><h1 id="提示词优化的技巧"><a href="#提示词优化的技巧" class="headerlink" title="提示词优化的技巧"></a>提示词优化的技巧</h1><h2 id="技巧1：明确指令"><a href="#技巧1：明确指令" class="headerlink" title="技巧1：明确指令"></a>技巧1：明确指令</h2><ul><li>模型更擅长处理任务明确的请求。</li><li>含糊的描述容易导致输出不符合预期。</li></ul><p><strong>示例一：写接口测试代码</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 模糊提示：</span><br><span class="line">messages = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;帮我写个接口测试代码&quot;&#125;]</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 明确提示：</span><br><span class="line">messages = [&#123;</span><br><span class="line">&quot;role&quot;: &quot;user&quot;, </span><br><span class="line">&quot;content&quot;: &quot;请使用 Python 和 requests 编写一个 POST 接口的测试脚本，接口地址为 https://api.mstest.vip/login，参数包括 username 和 password，校验响应中 code 是否为 200。&quot;</span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="技巧2：控制风格与格式"><a href="#技巧2：控制风格与格式" class="headerlink" title="技巧2：控制风格与格式"></a>技巧2：控制风格与格式</h2><ul><li>通过提示控制模型以 Markdown、表格、列表、JSON 等格式输出。</li><li>用于生成日报、Bug列表、测试报告、接口说明等结构化内容。</li></ul><p><strong>示例一：Markdown报告</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, </span><br><span class="line">     &quot;content&quot;: &quot;请用Markdown生成用户中心测试报告，必须包含：\n## 模块名称\n## 测试范围\n## 通过率\n## 关键缺陷\n## 剩余风险&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例二：表格用例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;,</span><br><span class="line">     &quot;content&quot;: &quot;请用表格展示5条注册测试用例，列名包括：\n| 用例ID | 测试点 | 测试数据 | 预期结果 |&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例三：JSON接口用例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;请生成JSON格式的&#x27;修改密码&#x27;接口测试用例，字段包含：\ntest_case_id, description, request_data, expected_response&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="技巧3：加入约束，减少幻觉"><a href="#技巧3：加入约束，减少幻觉" class="headerlink" title="技巧3：加入约束，减少幻觉"></a>技巧3：加入约束，减少幻觉</h2><ul><li>模型在生成实时性内容时可能产生“幻觉”（虚假或伪造内容）。</li><li>限定“来源、时间、事实标准”等可以有效降低这种风险。</li></ul><p><strong>示例一：对比Selenium版本新特性</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 宽泛提示</span><br><span class="line">messages = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;请介绍 Selenium 的最新变化&quot;&#125;]</span><br><span class="line"></span><br><span class="line"># 高约束提示</span><br><span class="line">messages = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;请根据 Selenium 4.20 官方文档，总结 Python 中相较 Selenium 3 的五个主要变化，并附对应代码示例。&quot;&#125;]</span><br></pre></td></tr></table></figure><p><strong>示例二：生成测试用例</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 宽泛提示</span><br><span class="line">messages = [&#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;请为用户注册功能设计5条测试用例&quot;&#125;]</span><br><span class="line"># 高约束提示</span><br><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, </span><br><span class="line">     &quot;content&quot;: &quot;请为用户注册功能设计 5 条测试用例，要求：\n- 包含有效与无效邮箱输入\n- 密码边界值测试（6~20位）\n- 每条用例需包含：用例名称、前置条件、输入、预期输出\n- 输出为纯文本描述，不包含自动化脚本&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例三：生成Bug报告</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, </span><br><span class="line">     &quot;content&quot;: &quot;请撰写一份缺陷报告模版&quot;&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, </span><br><span class="line">     &quot;content&quot;: &quot;请撰写一份缺陷报告模版，要求：\n- 模块：登录页\n- 问题描述：输入错误密码后无提示信息\n- 必须包含字段：缺陷标题、环境、重现步骤、实际结果、预期结果\n- 使用中性客观语言&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="技巧4：少量样本提示"><a href="#技巧4：少量样本提示" class="headerlink" title="技巧4：少量样本提示"></a>技巧4：少量样本提示</h2><ul><li>通过示例“教”模型学会相应的分类或转换任务。</li><li>非常适合缺陷分类、日志解析、测试案例格式转换等。</li></ul><p><strong>示例一：测试步骤转换</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;&quot;&quot;</span><br><span class="line">将自然语言测试步骤转换为结构化步骤：</span><br><span class="line">---</span><br><span class="line">示例1：</span><br><span class="line">输入：用户输入错误的密码点击登录</span><br><span class="line">输出：</span><br><span class="line">1. 在密码输入框输入错误密码</span><br><span class="line">2. 点击登录按钮</span><br><span class="line"></span><br><span class="line">示例2：</span><br><span class="line">输入：选择商品加入购物车并结算</span><br><span class="line">输出：</span><br><span class="line">1. 在商品页点击「加入购物车」</span><br><span class="line">2. 进入购物车页面</span><br><span class="line">3. 点击「结算」按钮</span><br><span class="line">---</span><br><span class="line">请转换以下步骤：</span><br><span class="line">输入：上传JPG文件后检查预览图显示</span><br><span class="line">输出：</span><br><span class="line">&quot;&quot;&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例二：自动化测试故障分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">instruction = &quot;&quot;&quot;</span><br><span class="line">作为资深测试开发工程师，请分析自动化测试失败日志：</span><br><span class="line">1. 失败类型分类：</span><br><span class="line">   - 定位问题（元素/XPath失效）</span><br><span class="line">   - 环境问题（服务/网络异常）</span><br><span class="line">   - 脚本缺陷（逻辑/断言错误）</span><br><span class="line">2. 标记可疑代码位置（文件+行号）</span><br><span class="line">3. 给出修复方案（含代码示例）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">examples = &quot;&quot;&quot;</span><br><span class="line">输入：</span><br><span class="line">[ERROR] ElementNotVisibleException: </span><br><span class="line">Failed to locate element #submit-btn</span><br><span class="line">at line 42 of login_test.py</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">失败类型：定位问题（元素ID变更）</span><br><span class="line">可疑位置：login_test.py第42行</span><br><span class="line">修复方案：</span><br><span class="line">原代码：driver.find_element(By.ID, &quot;submit-btn&quot;)</span><br><span class="line">改为：WebDriverWait(driver,10).until(</span><br><span class="line">    EC.presence_of_element_located((By.CSS_SELECTOR, &quot;[data-testid=submit]&quot;))</span><br><span class="line">)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">input_text = &#x27;[FAIL] AssertionError: Expected 200, got 404 at api_healthcheck.py:17&#x27;</span><br><span class="line"></span><br><span class="line">prompt = f&quot;&quot;&quot;</span><br><span class="line">&#123;instruction&#125;</span><br><span class="line"></span><br><span class="line">&#123;examples&#125;</span><br><span class="line"></span><br><span class="line">输入：</span><br><span class="line">&#123;input_text&#125;</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="技巧5：链式思维"><a href="#技巧5：链式思维" class="headerlink" title="技巧5：链式思维"></a>技巧5：链式思维</h2><p><strong>示例一：基础算术（分步推理）</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;&quot;&quot;</span><br><span class="line">请逐步解决以下数学问题，并展示推理过程：</span><br><span class="line">问题：如果3个人5天能挖15米水沟，6个人10天能挖多少米？</span><br><span class="line"></span><br><span class="line">分步思考：</span><br><span class="line">1. 计算单人单天效率：15米 ÷ 3人 ÷ 5天 = 1米/人天</span><br><span class="line">2. 计算6人10天总效率：1米/人天 × 6人 × 10天 = ?</span><br><span class="line">3. 最终结果：</span><br><span class="line">&quot;&quot;&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>示例二：测试点分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">messages = [</span><br><span class="line">    &#123;&quot;role&quot;: &quot;user&quot;, &quot;content&quot;: &quot;&quot;&quot;请逐步分析登录功能的测试点，</span><br><span class="line">    按以下逻辑展开：</span><br><span class="line">    1. 识别输入字段（用户名/密码）</span><br><span class="line">    2. 列出每个字段的合法/非法输入情况</span><br><span class="line">    3. 分析页面交互流程（按钮状态、错误提示等）</span><br><span class="line">    最终输出结构化测试点列表&quot;&quot;&quot;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h1 id="提示词指令模板"><a href="#提示词指令模板" class="headerlink" title="提示词指令模板"></a>提示词指令模板</h1><p><strong>作用</strong>：通过结构化模板控制模型输出，实现高效可复现的任务处理</p><p><strong>特点</strong>：</p><ul><li>✅ <strong>直接高效</strong> - 减少模糊指令导致的无效输出</li><li>✅ <strong>可复现性强</strong> - 固定模板确保结果一致性</li><li>✅ <strong>动态适配</strong> - 支持变量插值灵活填充内容</li></ul><h2 id="模板结构"><a href="#模板结构" class="headerlink" title="模板结构"></a>模板结构</h2><div class="table-container"><table><thead><tr><th>字段名</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td><code>&#123;instruction&#125;</code></td><td>定义任务目标和输出格式要求</td><td>“生成法语翻译，保留专业术语”</td></tr><tr><td><code>&#123;examples&#125;</code></td><td>提供输入-输出样本（可选）</td><td>“输入：Hello → 输出：Bonjour”</td></tr><tr><td><code>&#123;input_text&#125;</code></td><td>用户实际需要处理的内容</td><td>“How are you?”</td></tr><tr><td><code>&#123;output&#125;</code></td><td>模型生成结果的占位符</td><td>（留空由模型填充）</td></tr></tbody></table></div><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><p><strong>自动化测试故障分析</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">instruction = &quot;&quot;&quot;</span><br><span class="line">作为资深测试开发工程师，请分析自动化测试失败日志：</span><br><span class="line">1. 失败类型分类：</span><br><span class="line">   - 定位问题（元素/XPath失效）</span><br><span class="line">   - 环境问题（服务/网络异常）</span><br><span class="line">   - 脚本缺陷（逻辑/断言错误）</span><br><span class="line">2. 标记可疑代码位置（文件+行号）</span><br><span class="line">3. 给出修复方案（含代码示例）</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">examples = &quot;&quot;&quot;</span><br><span class="line">输入：</span><br><span class="line">[ERROR] ElementNotVisibleException: </span><br><span class="line">Failed to locate element #submit-btn</span><br><span class="line">at line 42 of login_test.py</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">失败类型：定位问题（元素ID变更）</span><br><span class="line">可疑位置：login_test.py第42行</span><br><span class="line">修复方案：</span><br><span class="line">原代码：driver.find_element(By.ID, &quot;submit-btn&quot;)</span><br><span class="line">改为：WebDriverWait(driver,10).until(</span><br><span class="line">    EC.presence_of_element_located((By.CSS_SELECTOR, &quot;[data-testid=submit]&quot;))</span><br><span class="line">)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">input_text = &#x27;[FAIL] AssertionError: Expected 200, got 404 at api_healthcheck.py:17&#x27;</span><br><span class="line"></span><br><span class="line">prompt = f&quot;&quot;&quot;</span><br><span class="line">&#123;instruction&#125;</span><br><span class="line"></span><br><span class="line">&#123;examples&#125;</span><br><span class="line"></span><br><span class="line">测试日志：</span><br><span class="line">&#123;input_text&#125;</span><br><span class="line"></span><br><span class="line">分析报告：</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习AI大模型和Agent智能体学习笔记第二讲</summary>
    
    
    
    <category term="AI大模型和Agent智能体学习" scheme="https://jinglv.github.io/categories/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8CAgent%E6%99%BA%E8%83%BD%E4%BD%93%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AI大模型和Agent智能体学习" scheme="https://jinglv.github.io/tags/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8CAgent%E6%99%BA%E8%83%BD%E4%BD%93%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之时光旅行</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/5-langgraph-time-travel/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/5-langgraph-time-travel/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>时光旅行（Time Travel）功能通过状态机管理实现数据流回溯与修改，支持重放和分叉操作。重放可回顾智能体执行流程，分叉则允许在特定节点更改数据并探索替代路径，提升调试与优化效率。</p><ul><li>重放（Replay）<ul><li>应用场景：如多步骤智能体任务回溯和分享</li></ul></li><li>分叉（Fork）<ul><li>应用场景：如在特定节点修改流程路径</li></ul></li></ul><p>基础示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置工具</span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, START</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> END, StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_song_on_qq</span>(<span class="params">song: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在qq音乐上播放歌曲&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 调用QQ音乐 API...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;成功在QQ音乐上播放了<span class="subst">&#123;song&#125;</span>！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_song_on_163</span>(<span class="params">song: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在网易云上播放歌曲&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 调用网易云 API...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;成功在网易云上播放了<span class="subst">&#123;song&#125;</span>！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [play_song_on_qq, play_song_on_163]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置模型</span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">deepseek = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model = deepseek.bind_tools(tools, parallel_tool_calls=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点和条件边</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义确定是否继续的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    last_message = messages[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果没有函数调用，则结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;end&quot;</span></span><br><span class="line">    <span class="comment"># 否则如果有，我们继续</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;continue&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将循环的两个节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为`agent`</span></span><br><span class="line"><span class="comment"># 这意味着这个节点是第一个被调用的</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用`agent`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在调用`agent`节点后采取的边。</span></span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">    <span class="comment"># 最后我们传入一个映射。</span></span><br><span class="line">    <span class="comment"># 键是字符串，值是其他节点。</span></span><br><span class="line">    <span class="comment"># END是一个特殊节点，标记图应该结束。</span></span><br><span class="line">    <span class="comment"># 将会发生的是我们调用`should_continue`，然后该函数的输出</span></span><br><span class="line">    <span class="comment"># 将与此映射中的键匹配。</span></span><br><span class="line">    <span class="comment"># 根据匹配的键，然后调用相应的节点。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 如果是`tools`，则调用工具节点。</span></span><br><span class="line">        <span class="string">&quot;continue&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">        <span class="comment"># 否则我们结束。</span></span><br><span class="line">        <span class="string">&quot;end&quot;</span>: END,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从`tools`到`agent`添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用`tools`之后，下一步调用`agent`节点。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置内存</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line"><span class="comment"># 这将它编译成一个LangChain Runnable，</span></span><br><span class="line"><span class="comment"># 意味着你可以像使用任何其他runnable一样使用它</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们添加`interrupt_before=[&quot;action&quot;]`</span></span><br><span class="line"><span class="comment"># 这将在调用`action`节点之前添加一个断点</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行简单调用，要求播放周杰伦的歌曲</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;你能播放一首周杰伦播放量最高的歌曲吗?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看记录并重放，get_state获取当前的状态，查看信息</span></span><br><span class="line">app.get_state(config).values[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用get_state_history将历史记录打印出来</span></span><br><span class="line">all_states = []</span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> app.get_state_history(config):</span><br><span class="line">    <span class="built_in">print</span>(state)</span><br><span class="line">    all_states.append(state)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="重放"><a href="#重放" class="headerlink" title="重放"></a>重放</h1><p>根据以上代码执行，我们可以返回任何一个状态节点，并从那个时候重新开始操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">to_replay = all_states[<span class="number">2</span>] <span class="comment"># 从第二状态开始，重新执行</span></span><br><span class="line"></span><br><span class="line">to_replay.values</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下一个节点执行什么</span></span><br><span class="line">to_replay.<span class="built_in">next</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想从这个状态节点重播，只需这样</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(<span class="literal">None</span>, to_replay.config):</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> event.values():</span><br><span class="line">        <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure><h1 id="分叉"><a href="#分叉" class="headerlink" title="分叉"></a>分叉</h1><p>根据重放中的代码，从某个节点开始，对执行的数据进行分叉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改最后一个消息的工具调用</span></span><br><span class="line"><span class="comment"># 我们将其从`play_song_on_qq`更改为`play_song_on_163`</span></span><br><span class="line">last_message = to_replay.values[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">last_message.tool_calls[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;play_song_on_163&quot;</span></span><br><span class="line"></span><br><span class="line">branch_config = app.update_state(</span><br><span class="line">    to_replay.config,</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [last_message]&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时整个图的流就进行了分叉处理</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(<span class="literal">None</span>, branch_config):</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> event.values():</span><br><span class="line">        <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第五讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之上下文和流式输出</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/6-langgraph-context-stream/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/6-langgraph-context-stream/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h1><p>LangGraph 支持三种主要方式向语言模型提供“上下文”：</p><div class="table-container"><table><thead><tr><th>类型</th><th>描述</th><th>可变？</th><th>生命周期</th></tr></thead><tbody><tr><td>运行时上下文</td><td>在运行开始时传入的静态数据</td><td>❌</td><td>每次运行</td></tr><tr><td>短期记忆（状态）</td><td>执行过程中可变化的中间状态</td><td>✅</td><td>每次运行/会话</td></tr><tr><td>长期记忆（存储）</td><td>可跨多次调用和会话共享的持久数据</td><td>✅</td><td>跨对话 / 全局</td></tr></tbody></table></div><h2 id="运行时上下文"><a href="#运行时上下文" class="headerlink" title="运行时上下文"></a>运行时上下文</h2><p><strong>注意点</strong>：需要将 langgraph 升级到0.6.0a2 的版本，langgraph.runtime 模块最新的版本中才加入的，之前的版本中没有</p><p>适用于：API 密钥、用户元信息等在运行过程中<strong>不会变化</strong>的数据。</p><ul><li>使用 <code>context</code> 参数传入；</li><li>通过 <code>get_runtime(ContextSchema)</code> 获取；</li><li>推荐使用 <code>context_schema</code> 定义数据结构。</li></ul><h2 id=""><a href="#" class="headerlink" title=" "></a> </h2><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="在工作流中使用"><a href="#在工作流中使用" class="headerlink" title="在工作流中使用"></a>在工作流中使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/30 15:01</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables <span class="keyword">import</span> RunnableConfig</span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.runtime <span class="keyword">import</span> Runtime</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;状态&quot;&quot;&quot;</span></span><br><span class="line">    user_input: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">list</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义运行时的上下文参数</span></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RuntimeContext</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;运行时上下文参数&quot;&quot;&quot;</span></span><br><span class="line">    test_env: <span class="built_in">str</span>  <span class="comment"># 测试环境</span></span><br><span class="line">    tester_name: <span class="built_in">str</span>  <span class="comment"># 测试人员名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ================定义运行节点函数=================</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;用户输入的需求是:<span class="subst">&#123;state.get(<span class="string">&#x27;user_input&#x27;</span>)&#125;</span>,开始进行测试用例生成&quot;</span>)</span><br><span class="line">    <span class="comment"># 这里核心的功能实现需要调用llm进行生成，暂时跳过</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;测试用例已经生成&quot;</span>, )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: [<span class="string">&quot;测试用例1&quot;</span>, <span class="string">&quot;测试用例2&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_test_cases</span>(<span class="params">state: State, runtime: Runtime[RuntimeContext]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行测试用例&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在执行测试用例：&quot;</span>, state[<span class="string">&#x27;test_cases&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;当前执行的测试环境&quot;</span>, runtime.context.test_env)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行人&quot;</span>, runtime.context.tester_name)</span><br><span class="line">    <span class="comment"># print(&quot;执行人&quot;, runtime.context.get(&#x27;tester_name&#x27;))</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State, config: RunnableConfig</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试报告&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行generator_test_report节点&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;配置信息：&quot;</span>, config)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================工作流的创建个编排===================</span></span><br><span class="line">graph = StateGraph(State, context_schema=RuntimeContext)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试用例&quot;</span>, generator_test_case)</span><br><span class="line">graph.add_node(<span class="string">&quot;执行测试用例&quot;</span>, run_test_cases)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试报告&quot;</span>, generator_test_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起点</span></span><br><span class="line"><span class="comment"># graph.set_entry_point(&quot;生成测试用例&quot;)</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试用例&quot;</span>, <span class="string">&quot;执行测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;执行测试用例&quot;</span>, <span class="string">&quot;生成测试报告&quot;</span>)</span><br><span class="line"><span class="comment"># graph.set_finish_point(&quot;生成测试报告&quot;)</span></span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试报告&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">app = graph.<span class="built_in">compile</span>()</span><br><span class="line"><span class="comment"># res = app.invoke(&#123;&quot;user_input&quot;: &quot;测试项目A&quot;&#125;,</span></span><br><span class="line"><span class="comment">#                  config=&#123;&quot;recursion_limit&quot;: 5&#125;,</span></span><br><span class="line"><span class="comment">#                  context=&#123;&quot;test_env&quot;: &quot;测试环境A&quot;, &quot;tester_name&quot;: &quot;张三&quot;&#125;</span></span><br><span class="line"><span class="comment">#                  )</span></span><br><span class="line"></span><br><span class="line">res = app.invoke(&#123;<span class="string">&quot;user_input&quot;</span>: <span class="string">&quot;测试项目A&quot;</span>&#125;,</span><br><span class="line">                 config=&#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">5</span>&#125;,</span><br><span class="line">                 context=RuntimeContext(test_env=<span class="string">&quot;测试环境A&quot;</span>, tester_name=<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">                 )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在Agent中使用"><a href="#在Agent中使用" class="headerlink" title="在Agent中使用"></a>在Agent中使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.runtime <span class="keyword">import</span> get_runtime</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ContextSchema</span>:</span><br><span class="line">    user_name: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用于构建 system prompt 的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">prompt</span>(<span class="params">state</span>):</span><br><span class="line">    runtime = get_runtime(ContextSchema)</span><br><span class="line">    user = runtime.context.user_name</span><br><span class="line">    <span class="keyword">return</span> [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;Hello <span class="subst">&#123;user&#125;</span>!&quot;</span>&#125;, *state[<span class="string">&quot;messages&quot;</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 agent 时声明上下文 schema</span></span><br><span class="line">agent = create_react_agent(</span><br><span class="line">    model=llm,</span><br><span class="line">    tools=[],</span><br><span class="line">    prompt=prompt,</span><br><span class="line">    context_schema=ContextSchema</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传入上下文</span></span><br><span class="line">agent.invoke(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;Hi&quot;</span>&#125;]&#125;,</span><br><span class="line">    context=&#123;<span class="string">&quot;user_name&quot;</span>: <span class="string">&quot;John Smith&quot;</span>&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="流式输出"><a href="#流式输出" class="headerlink" title="流式输出"></a>流式输出</h1><p>LangGraph对流式输出进行了改进，细化了输出模式（如Values、Updates、Debug、Messages），提升用户体验和调试效率，适用于生产环境AI应用。</p><p>LangGraph 支持从代理（Agent）或工作流（Graph）以流式方式输出执行过程与结果。</p><h2 id="支持的流模式（stream-mode）"><a href="#支持的流模式（stream-mode）" class="headerlink" title="支持的流模式（stream_mode）"></a>支持的流模式（stream_mode）</h2><p>将以下一种或多种流模式作为列表传递给 <a href="https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.state.CompiledStateGraph.stream"><code>stream（）</code></a> 或 <a href="https://langchain-ai.github.io/langgraph/reference/graphs/#langgraph.graph.state.CompiledStateGraph.astream"><code>astream（）</code></a> 方法：</p><div class="table-container"><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td><code>values</code></td><td>每个图步骤后流式传输完整状态值。</td></tr><tr><td><code>updates</code></td><td>每个步骤后流式传输状态的增量更新。</td></tr><tr><td><code>custom</code></td><td>从图中节点流式传输自定义数据。</td></tr><tr><td><code>messages</code></td><td>从调用 LLM 的节点流式传输生成的 token 及元数据（元组）。</td></tr><tr><td><code>debug</code></td><td>尽可能多地流式传输调试信息。</td></tr></tbody></table></div><p>支持将多种模式作为列表同时传递，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stream_mode=[<span class="string">&quot;updates&quot;</span>, <span class="string">&quot;messages&quot;</span>, <span class="string">&quot;custom&quot;</span>]</span><br></pre></td></tr></table></figure><p>定义一个常见的图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    topic: <span class="built_in">str</span></span><br><span class="line">    joke: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">refine_topic</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;topic&quot;</span>: state[<span class="string">&quot;topic&quot;</span>] + <span class="string">&quot;和小狗&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_joke</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;joke&quot;</span>: <span class="string">f&quot;这是一个关于<span class="subst">&#123;state[<span class="string">&#x27;topic&#x27;</span>]&#125;</span>的笑话&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph = (</span><br><span class="line">    StateGraph(State)</span><br><span class="line">    .add_node(refine_topic)</span><br><span class="line">    .add_node(generate_joke)</span><br><span class="line">    .add_edge(START, <span class="string">&quot;refine_topic&quot;</span>)</span><br><span class="line">    .add_edge(<span class="string">&quot;refine_topic&quot;</span>, <span class="string">&quot;generate_joke&quot;</span>)</span><br><span class="line">    .<span class="built_in">compile</span>()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="流式传输stream-mode-”values”"><a href="#流式传输stream-mode-”values”" class="headerlink" title="流式传输stream_mode=”values”"></a>流式传输stream_mode=”values”</h3><p>在图表的每个步骤之后传输状态的完整值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>, <span class="string">&#x27;joke&#x27;</span>: <span class="string">&#x27;这是一个关于冰激凌和小狗的笑话&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>说明：<code>values</code> 则输出完整状态值。</p><h3 id="流式传输stream-mode-”updates”"><a href="#流式传输stream-mode-”updates”" class="headerlink" title="流式传输stream_mode=”updates”"></a>流式传输stream_mode=”updates”</h3><p>将图表每一步之后的更新流式传输到状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;refine_topic&#x27;</span>: &#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;generate_joke&#x27;</span>: &#123;<span class="string">&#x27;joke&#x27;</span>: <span class="string">&#x27;这是一个关于冰激凌和小狗的笑话&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>说明：updates 模式输出节点的状态更新</p><h3 id="流式传输stream-mode-”debug”"><a href="#流式传输stream-mode-”debug”" class="headerlink" title="流式传输stream_mode=”debug”"></a>流式传输stream_mode=”debug”</h3><p>在图表的整个执行过程中传输尽可能多的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;debug&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 1, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.478123+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;671c3949-69b8-8e90-b997-e76a1f711f5f&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;refine_topic&#x27;</span>, <span class="string">&#x27;input&#x27;</span>: &#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌&#x27;</span>&#125;, <span class="string">&#x27;triggers&#x27;</span>: (<span class="string">&#x27;branch:to:refine_topic&#x27;</span>,)&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 1, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.478680+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task_result&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;671c3949-69b8-8e90-b997-e76a1f711f5f&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;refine_topic&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: None, <span class="string">&#x27;result&#x27;</span>: [(<span class="string">&#x27;topic&#x27;</span>, <span class="string">&#x27;冰激凌和小狗&#x27;</span>)], <span class="string">&#x27;interrupts&#x27;</span>: []&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 2, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.478828+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b7f1816a-7dab-4847-e8e6-78ae4d691a8e&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;generate_joke&#x27;</span>, <span class="string">&#x27;input&#x27;</span>: &#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>&#125;, <span class="string">&#x27;triggers&#x27;</span>: (<span class="string">&#x27;branch:to:generate_joke&#x27;</span>,)&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 2, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.479006+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task_result&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b7f1816a-7dab-4847-e8e6-78ae4d691a8e&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;generate_joke&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: None, <span class="string">&#x27;result&#x27;</span>: [(<span class="string">&#x27;joke&#x27;</span>, <span class="string">&#x27;这是一个关于冰激凌和小狗的笑话&#x27;</span>)], <span class="string">&#x27;interrupts&#x27;</span>: []&#125;&#125;</span><br></pre></td></tr></table></figure><p>从以上结果来看，可以看打执行的详细信息，每一个步骤执行</p><h3 id="LLM-token-流式传输stream-mode-”messages”"><a href="#LLM-token-流式传输stream-mode-”messages”" class="headerlink" title="LLM token 流式传输stream_mode=”messages”"></a>LLM token 流式传输stream_mode=”messages”</h3><p>为调用LLM的图形节点传输LLM令牌和元数据</p><p>需要接入大模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">llm = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_joke</span>(<span class="params">state: State</span>):</span><br><span class="line">    llm_response = llm.invoke(</span><br><span class="line">        [</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;生成一个关于 <span class="subst">&#123;state[<span class="string">&#x27;topic&#x27;</span>]&#125;</span>的笑话&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;joke&quot;</span>: llm_response.content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph = (</span><br><span class="line">    StateGraph(State)</span><br><span class="line">    .add_node(refine_topic)</span><br><span class="line">    .add_node(generate_joke)</span><br><span class="line">    .add_edge(START, <span class="string">&quot;refine_topic&quot;</span>)</span><br><span class="line">    .add_edge(<span class="string">&quot;refine_topic&quot;</span>, <span class="string">&quot;generate_joke&quot;</span>)</span><br><span class="line">    .<span class="built_in">compile</span>()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> message_chunk, metadata <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;messages&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="keyword">if</span> message_chunk.content:</span><br><span class="line">        <span class="built_in">print</span>(message_chunk.content, end=<span class="string">&quot;|&quot;</span>, flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>执行结果(流式输出的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">小狗|走进|一家|冰|激|凌|店|，|店员|问|：“|想要|什么|口|味的|？”</span><br><span class="line">|小狗|说|：“|汪|草|味的|！”</span><br><span class="line">|店员|愣|住|：“|抱歉|…|我们没有|汪|草|口味|。”</span><br><span class="line">|小狗|叹气|：“|那|好吧|，|给我|一个|‘|爪子|’|饼干|筒|装|香|草|味|——|但|记住|，|这次|别|再把|我的|球|藏|进|冰|激|凌|里|了|，|上次|我|挖|了|半小时|！”|🍦|🐶|</span><br><span class="line"></span><br><span class="line">|（|注|：|谐|音|梗|：|汪|草|=|香|草|，|爪子|=|甜|筒|品牌|“|可爱|多|”|的|经典|筒|身|设计|）|</span><br></pre></td></tr></table></figure><p>说明：每生成一个 token 就会立即输出，并附带上下文信息。</p><h3 id="工具中自定义数据流式输出stream-mode-”custom”"><a href="#工具中自定义数据流式输出stream-mode-”custom”" class="headerlink" title="工具中自定义数据流式输出stream_mode=”custom”"></a>工具中自定义数据流式输出stream_mode=”custom”</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/30 14:48</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables <span class="keyword">import</span> RunnableConfig</span><br><span class="line"><span class="keyword">from</span> langgraph.config <span class="keyword">import</span> get_stream_writer</span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.runtime <span class="keyword">import</span> Runtime</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> app.agent.model.llms <span class="keyword">import</span> qv_llm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;状态&quot;&quot;&quot;</span></span><br><span class="line">    user_input: <span class="built_in">str</span></span><br><span class="line">    test_cases: <span class="built_in">str</span></span><br><span class="line">    result: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义运行时的上下文参数</span></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RuntimeContext</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;运行时上下文参数&quot;&quot;&quot;</span></span><br><span class="line">    test_env: <span class="built_in">str</span>  <span class="comment"># 测试环境</span></span><br><span class="line">    tester_name: <span class="built_in">str</span>  <span class="comment"># 测试人员名称</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_case</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试用例&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始执行生成测试用例的节点&quot;</span>)</span><br><span class="line">    prompt = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    请帮我生成用户5条登录的测试用例，登录账号密码的长度限制为8到16位     </span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    cases = qv_llm.invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;test_cases&quot;</span>: cases&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_test_cases</span>(<span class="params">state: State, runtime: Runtime[RuntimeContext]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;执行测试用例&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始执行【分析测试用例】的节点&quot;</span>)</span><br><span class="line">    cases = state[<span class="string">&#x27;test_cases&#x27;</span>]</span><br><span class="line">    prompt = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    请分析当前的五条测试用例，是否有缺陷,</span></span><br><span class="line"><span class="string">    用例数据如下：<span class="subst">&#123;cases&#125;</span></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    result = qv_llm.invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;result&quot;</span>: result&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State, config: RunnableConfig</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;生成测试报告&quot;&quot;&quot;</span></span><br><span class="line">    writer = get_stream_writer()</span><br><span class="line">    writer(<span class="string">f&quot;开始【生成测试报告】的节点运行&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># =================工作流的创建个编排===================</span></span><br><span class="line">graph = StateGraph(State, context_schema=RuntimeContext)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试用例&quot;</span>, generator_test_case)</span><br><span class="line">graph.add_node(<span class="string">&quot;执行测试用例&quot;</span>, run_test_cases)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试报告&quot;</span>, generator_test_report)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置起点</span></span><br><span class="line"><span class="comment"># graph.set_entry_point(&quot;生成测试用例&quot;)</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试用例&quot;</span>, <span class="string">&quot;执行测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;执行测试用例&quot;</span>, <span class="string">&quot;生成测试报告&quot;</span>)</span><br><span class="line"><span class="comment"># graph.set_finish_point(&quot;生成测试报告&quot;)</span></span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试报告&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">app = graph.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line">response = app.stream(&#123;<span class="string">&quot;user_input&quot;</span>: <span class="string">&quot;测试项目A&quot;</span>&#125;,</span><br><span class="line">                      config=&#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">5</span>&#125;,</span><br><span class="line">                      context=RuntimeContext(test_env=<span class="string">&quot;测试环境A&quot;</span>, tester_name=<span class="string">&quot;张三&quot;</span>),</span><br><span class="line">                      stream_mode=[<span class="string">&#x27;messages&#x27;</span>, <span class="string">&#x27;custom&#x27;</span>]</span><br><span class="line">                      )</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> input_type, chunk <span class="keyword">in</span> response:</span><br><span class="line">    <span class="keyword">if</span> input_type == <span class="string">&quot;messages&quot;</span>:</span><br><span class="line">        <span class="comment"># ai的输出内容</span></span><br><span class="line">        <span class="built_in">print</span>(chunk[<span class="number">0</span>].content, end=<span class="string">&quot;&quot;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">elif</span> input_type == <span class="string">&quot;custom&quot;</span>:</span><br><span class="line">        <span class="comment"># 工具执行的输出内容</span></span><br><span class="line">        <span class="built_in">print</span>(chunk)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：必须在 LangGraph 执行上下文中调用 get_stream_writer()，否则无效。</p>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第六讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之工具调用</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/7-langgraph-tools/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/7-langgraph-tools/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T09:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Langgraph核心组件中的工具调用分为四步：定义工具、绑定工具、生成工具调用（2coin）和执行工具。通过拆解过程，用户可干预每个步骤，尤其在多智能体模式下，可加入人工节点检查调用准确性，提升工具使用的灵活性与控制力。</p><p>从工具执行流程图看</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918170343628.png" alt="image-20250918170343628" style="zoom:67%;" /></p><p>有以下四步：</p><ul><li>第一步：使用@tool修饰符创建工具</li><li>第二步：绑定工具到模型（注意：并不是所有大模型都支持工具绑定）</li><li>第三步：工具调用：将自然语言转为正确的参数</li><li>第四步：工具执行：将工具执行并将结果传递给下一步</li></ul><p>根据以上说明，下面根据这四步进行代码示例</p><h1 id="第一步：工具定义"><a href="#第一步：工具定义" class="headerlink" title="第一步：工具定义"></a>第一步：工具定义</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数获取当前天气。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> location.lower() <span class="keyword">in</span> [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;深圳&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;现在是20度，有雾。&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;现在是10度，晴朗。&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coolest_cities</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取最冷城市列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;北京，哈尔滨&quot;</span></span><br><span class="line"></span><br><span class="line">tools = [get_weather, get_coolest_cities]</span><br><span class="line">tool_node = ToolNode(tools) <span class="comment"># ToolNode是langgraph中运行工具的节点</span></span><br></pre></td></tr></table></figure><p>langgraph提供了低层面的封装，可以直接手动执行工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"></span><br><span class="line">message_with_single_tool_call = AIMessage(</span><br><span class="line">    content=<span class="string">&quot;&quot;</span>,</span><br><span class="line">    tool_calls=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: &#123;<span class="string">&quot;location&quot;</span>: <span class="string">&quot;北京&quot;</span>&#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;tool_call_id&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;tool_call&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tool_node.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [message_with_single_tool_call]&#125;)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [ToolMessage(content=<span class="string">&#x27;现在是20度，有雾。&#x27;</span>, name=<span class="string">&#x27;get_weather&#x27;</span>, tool_call_id=<span class="string">&#x27;tool_call_id&#x27;</span>)]&#125;</span><br></pre></td></tr></table></figure><h1 id="第二步：工具绑定"><a href="#第二步：工具绑定" class="headerlink" title="第二步：工具绑定"></a>第二步：工具绑定</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_with_tools = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">).bind_tools(tools)</span><br><span class="line"></span><br><span class="line">model_with_tools.invoke(<span class="string">&quot;深圳的天气如何?&quot;</span>).tool_calls</span><br></pre></td></tr></table></figure><h1 id="第三步：工具调用"><a href="#第三步：工具调用" class="headerlink" title="第三步：工具调用"></a>第三步：工具调用</h1><p>返回ToolMessage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tool_node.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [model_with_tools.invoke(<span class="string">&quot;深圳的天气如何?&quot;</span>)]&#125;)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [ToolMessage(content=<span class="string">&#x27;现在是20度，有雾。&#x27;</span>, name=<span class="string">&#x27;get_weather&#x27;</span>, tool_call_id=<span class="string">&#x27;call_00_0vppp9Iy24ryGv9a89hsxVHk&#x27;</span>)]&#125;</span><br></pre></td></tr></table></figure><h1 id="第四步：工具执行"><a href="#第四步：工具执行" class="headerlink" title="第四步：工具执行"></a>第四步：工具执行</h1><p>在ReAct智能体中执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, MessagesState, START, END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    last_message = messages[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">    <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model_with_tools.invoke(messages)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;tools&quot;</span>, tool_node) <span class="comment"># Add the tool node to the graph</span></span><br><span class="line"></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line">workflow.add_conditional_edges(<span class="string">&quot;agent&quot;</span>, should_continue, [<span class="string">&quot;tools&quot;</span>, END])</span><br><span class="line">workflow.add_edge(<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = workflow.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line">display(Image(app.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure><p>查看构成的图</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918172526485.png" alt="image-20250918172526485"></p><p>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> app.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;深圳的天气如何?&quot;</span>)]&#125;, stream_mode=<span class="string">&quot;values&quot;</span></span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">深圳的天气如何?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我来帮您查询深圳的天气情况。</span><br><span class="line">Tool Calls:</span><br><span class="line">  get_weather (call_00_a1KyKFbzutzxaD52Q9BHy4ep)</span><br><span class="line"> Call ID: call_00_a1KyKFbzutzxaD52Q9BHy4ep</span><br><span class="line">  Args:</span><br><span class="line">    location: 深圳</span><br><span class="line">================================= Tool Message =================================</span><br><span class="line">Name: get_weather</span><br><span class="line"></span><br><span class="line">现在是20度，有雾。</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">根据查询结果，深圳目前的天气情况是：</span><br><span class="line">- 温度：20°C</span><br><span class="line">- 天气状况：有雾</span><br><span class="line"></span><br><span class="line">这样的天气比较潮湿，建议您外出时注意安全，能见度可能较低。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第七讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之中断恢复和人工审核机制</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/4-langgraph-human-ai/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/4-langgraph-human-ai/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="检查点"><a href="#检查点" class="headerlink" title="检查点"></a>检查点</h1><h2 id="检查点（Checkpoint）"><a href="#检查点（Checkpoint）" class="headerlink" title="检查点（Checkpoint）"></a>检查点（Checkpoint）</h2><ul><li>作用：检查点是图执行过程中每个“超步骤”（superstep）时刻状态的快照。它使得以下功能成为可能：<ul><li>状态恢复</li><li>重播执行</li><li>容错与断点续跑</li><li>人机交互与内存更新</li></ul></li><li>自动持久化：使用 LangGraph  时，<strong>无需手动保存状态</strong>，它会自动在后台处理所有检查点</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> InMemorySaver</span><br><span class="line"></span><br><span class="line">checkpointer = InMemorySaver()</span><br><span class="line"><span class="comment"># 对graph对象进行编译，并配置检查点</span></span><br><span class="line">app = graph.<span class="built_in">compile</span>(checkpointer=checkpointer)</span><br></pre></td></tr></table></figure><p>检查点会自动在每个节点执行后保存当前状态，包括：</p><ul><li><strong>当前节点名</strong> : <code>state.next</code></li><li><strong>当前值</strong> : <code>state.values</code></li><li><strong>当前执行上下文</strong> : <code>state.config</code></li></ul><h2 id="线程（Thread）"><a href="#线程（Thread）" class="headerlink" title="线程（Thread）"></a>线程（Thread）</h2><ul><li>每次运行图时，都必须指定一个唯一的 <code>thread_id</code>。</li><li>一个 thread 保存该次执行过程的所有检查点状态。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">graph.invoke(input_data, config)</span><br></pre></td></tr></table></figure><ul><li>可使用 <code>graph.get_state(config)</code> 获取最新状态。</li><li>可使用 <code>graph.get_state_history(config)</code> 获取全部历史状态。</li></ul><h2 id="Langgraph-中使用检查点（示例代码）"><a href="#Langgraph-中使用检查点（示例代码）" class="headerlink" title="Langgraph 中使用检查点（示例代码）"></a>Langgraph 中使用检查点（示例代码）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> InMemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一、定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义状态</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    value_1: <span class="built_in">str</span></span><br><span class="line">    value_2: <span class="built_in">int</span></span><br><span class="line">    report: <span class="built_in">str</span></span><br><span class="line">    input_value: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、定义工作节点（本质就是一个函数）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义工作节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_1节点----------开始-----------&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_1节点----------结束-----------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_2</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义工作节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_2节点----------开始-----------&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_2节点----------结束-----------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_2&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义工作节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_3节点----------开始-----------&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_3节点----------结束-----------&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========================================================================</span></span><br><span class="line"><span class="comment"># 三、开发工作流</span></span><br><span class="line"><span class="comment"># 3.1 初始化工作流</span></span><br><span class="line">graph = StateGraph(State)</span><br><span class="line"><span class="comment"># 3.2 把节点(node)添加到状态图(工作流)中</span></span><br><span class="line">graph.add_node(<span class="string">&quot;步骤一&quot;</span>, step_1)</span><br><span class="line">graph.add_node(<span class="string">&quot;步骤二&quot;</span>, step_2)</span><br><span class="line">graph.add_node(<span class="string">&quot;步骤三&quot;</span>, generator_test_report)</span><br><span class="line"><span class="comment"># 3.3 对工作节点进行编排</span></span><br><span class="line"></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;步骤一&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;步骤一&quot;</span>, <span class="string">&quot;步骤二&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;步骤二&quot;</span>, <span class="string">&quot;步骤三&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;步骤三&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3.4 创建一个状态检查点</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;=================添加检查点配置信息=================&quot;</span>)</span><br><span class="line">checkpointer = InMemorySaver()</span><br><span class="line"><span class="comment"># 4、对graph对象进行编译</span></span><br><span class="line">app = graph.<span class="built_in">compile</span>(checkpointer=checkpointer)</span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">app.invoke(&#123;<span class="string">&quot;input_value&quot;</span>: <span class="string">&quot;你好，世界&quot;</span>&#125;, config)</span><br><span class="line"><span class="comment"># 获取检查点</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============获取执行的历史检查点===================&quot;</span>)</span><br><span class="line">states = <span class="built_in">list</span>(app.get_state_history(config))</span><br></pre></td></tr></table></figure><h2 id="agent-中使用检查点（示例代码）"><a href="#agent-中使用检查点（示例代码）" class="headerlink" title="agent 中使用检查点（示例代码）"></a>agent 中使用检查点（示例代码）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> InMemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line">checkpointer = InMemorySaver()</span><br><span class="line">agent = create_react_agent(</span><br><span class="line">    model=<span class="variable language_">self</span>.llm,</span><br><span class="line">    tools=[mysql_executor],</span><br><span class="line">    prompt=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    你是一位资深的DBA，现在需要你根据用户的需求，编写对应的sql语句，调用数据库操作的工具，执行sql语句，并返回执行的结果,</span></span><br><span class="line"><span class="string">    每一步执行完都需要去分析当前的执行进度，以及规划下一步的任务执行</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>,</span><br><span class="line">    <span class="comment"># 配置启用检查点</span></span><br><span class="line">    checkpointer=checkpointer</span><br><span class="line">)</span><br><span class="line"><span class="comment"># 运行agent时传入配置</span></span><br><span class="line">response = agent.invoke(<span class="built_in">input</span>=&#123;<span class="string">&quot;messages&quot;</span>: <span class="built_in">input</span>&#125;,</span><br><span class="line">                        config=&#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;thread_1&quot;</span>&#125;&#125;</span><br><span class="line">                        )</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;==================检查点====================&quot;</span>)</span><br><span class="line"><span class="comment"># 执行完获去历史检查点状态</span></span><br><span class="line">states = agent.get_state_history(config=&#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;thread_1&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> states:</span><br><span class="line">    <span class="built_in">print</span>(state.<span class="built_in">next</span>)  <span class="comment"># 下一节点</span></span><br><span class="line">    <span class="built_in">print</span>(state.config[<span class="string">&quot;configurable&quot;</span>][<span class="string">&quot;checkpoint_id&quot;</span>])</span><br></pre></td></tr></table></figure><h2 id="持久化检查点"><a href="#持久化检查点" class="headerlink" title="持久化检查点"></a>持久化检查点</h2><div class="table-container"><table><thead><tr><th><strong>实现名称</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><code>InMemorySaver</code></td><td>内存持久化</td></tr><tr><td><code>MongoDBSaver</code></td><td>使用 mongodb 持久化</td></tr><tr><td><code>RedisSaver</code></td><td>使用 Redis持久化</td></tr></tbody></table></div><h3 id="使用-redis-存储检查点"><a href="#使用-redis-存储检查点" class="headerlink" title="使用 redis 存储检查点"></a>使用 redis 存储检查点</h3><ul><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langgraph-checkpoint-redis</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.redis <span class="keyword">import</span> RedisSaver</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> RedisSaver.from_conn_string(<span class="string">&quot;redis://192.168.0.108:6379&quot;</span>) <span class="keyword">as</span> checkpointer:</span><br><span class="line">    <span class="built_in">print</span>(checkpointer)</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用-mongodb存储检查点"><a href="#使用-mongodb存储检查点" class="headerlink" title="使用 mongodb存储检查点"></a>使用 mongodb存储检查点</h3><ul><li><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langgraph-checkpoint-mongodb</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.mongodb <span class="keyword">import</span> MongoDBSaver</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MongoDBSaver.from_conn_string(<span class="string">&quot;localhost:27017&quot;</span>) <span class="keyword">as</span> checkpointer:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;checkpointer:&quot;</span>, checkpointer)</span><br></pre></td></tr></table></figure></li></ul><h1 id="重运行机制"><a href="#重运行机制" class="headerlink" title="重运行机制"></a>重运行机制</h1><p>在使用由大模型驱动的非确定性系统（例如 Agent）时，我们常常希望深入理解其决策过程。LangGraph 提供了 时间旅行功能（Time Travel） 来支持以下用途：</p><ul><li>🤔 理解推理过程：分析系统如何得出当前结果。</li><li>🐞 调试错误：找出错误发生的位置和原因。</li><li>🔍 探索备选路径：尝试不同的执行分支，寻找更优结果。</li></ul><p>核心功能是：可以从某个历史检查点（checkpoint）恢复执行，你可以选择重放旧状态，或修改状态后探索新路径。每次恢复执行都会在执行历史中生成一个新的分支。</p><h3 id="获取历史检查点"><a href="#获取历史检查点" class="headerlink" title="获取历史检查点"></a>获取历史检查点</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============获取执行的历史检查点===================&quot;</span>)</span><br><span class="line">states = <span class="built_in">list</span>(app.get_state_history(config))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> states:</span><br><span class="line">    <span class="built_in">print</span>(state.<span class="built_in">next</span>)  <span class="comment"># 下一节点</span></span><br><span class="line">    <span class="built_in">print</span>(state.config[<span class="string">&quot;configurable&quot;</span>][<span class="string">&quot;checkpoint_id&quot;</span>])  <span class="comment"># 检查点 ID</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="选中某个重放的检查点进行更新"><a href="#选中某个重放的检查点进行更新" class="headerlink" title="选中某个重放的检查点进行更新"></a>选中某个重放的检查点进行更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;========================重放的检查点进行更新===========================&quot;</span>)</span><br><span class="line"><span class="comment"># 获取特定的执行节点</span></span><br><span class="line">selected_state = states[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 输出节点信息</span></span><br><span class="line"><span class="built_in">print</span>(selected_state.<span class="built_in">next</span>)</span><br><span class="line"><span class="built_in">print</span>(selected_state.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建重新执行的节点数据</span></span><br><span class="line"><span class="comment"># 更新状态并创建新检查点（主题改为 &quot;chickens&quot;）</span></span><br><span class="line">new_config = app.update_state(</span><br><span class="line">    selected_state.config,</span><br><span class="line">    values=&#123;<span class="string">&quot;input_value&quot;</span>: <span class="string">&quot;你好 python771&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;================新的执行配置信息===================&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_config)  <span class="comment"># 打印新的 checkpoint 配置</span></span><br></pre></td></tr></table></figure><h3 id="从检查点恢复执行"><a href="#从检查点恢复执行" class="headerlink" title="从检查点恢复执行"></a>从检查点恢复执行</h3><p>注意：重放是输入的值直接传入 None 即可，然后传入更新后的检查点配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;================重新执行===================&quot;</span>)</span><br><span class="line">result = app.invoke(<span class="literal">None</span>, new_config)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;重新直接的结果如下：&quot;</span>, result)</span><br></pre></td></tr></table></figure><p>完整示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.constants <span class="keyword">import</span> START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一、定义状态</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    定义状态</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    value_1: <span class="built_in">str</span></span><br><span class="line">    value_2: <span class="built_in">int</span></span><br><span class="line">    report: <span class="built_in">str</span></span><br><span class="line">    input_value: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二、定义工作节点（本质就是一个函数）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义工作节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_1节点&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_2</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义工作节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_2节点&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_2&quot;</span>: <span class="number">100</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_test_report</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;定义工作节点&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;执行step_3节点&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;report&quot;</span>: <span class="string">&quot;这个是一个测试报告&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ===========================================================================</span></span><br><span class="line"><span class="comment"># 三、开发工作流</span></span><br><span class="line"><span class="comment"># 3.1 初始化工作流</span></span><br><span class="line">graph = StateGraph(State)</span><br><span class="line"><span class="comment"># 3.2 把节点(node)添加到状态图(工作流)中</span></span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试用例&quot;</span>, step_1)</span><br><span class="line">graph.add_node(<span class="string">&quot;执行测试用例&quot;</span>, step_2)</span><br><span class="line">graph.add_node(<span class="string">&quot;生成测试报告&quot;</span>, generator_test_report)</span><br><span class="line"><span class="comment"># 3.3 对工作节点进行编排</span></span><br><span class="line"></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;生成测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试用例&quot;</span>, <span class="string">&quot;执行测试用例&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;执行测试用例&quot;</span>, <span class="string">&quot;生成测试报告&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;生成测试报告&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># =============启用检查点的配置==========================</span></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> InMemorySaver</span><br><span class="line"></span><br><span class="line">checkpoint = InMemorySaver()</span><br><span class="line"><span class="comment"># 4、对graph对象进行编译</span></span><br><span class="line">app = graph.<span class="built_in">compile</span>(checkpointer=checkpoint)</span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">app.invoke(<span class="built_in">input</span>=&#123;<span class="string">&quot;input_value&quot;</span>: <span class="string">&quot;你好，pythonAI&quot;</span>&#125;, config=config)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================获取检查点信息=========================</span></span><br><span class="line">result = <span class="built_in">list</span>(app.get_state_history(config=config))[::-<span class="number">1</span>]</span><br><span class="line"><span class="comment"># 使用检查点进行节点重复置</span></span><br><span class="line">step3_checkpoint = result[<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;检查点的信息：&quot;</span>, step3_checkpoint.<span class="built_in">next</span>, <span class="string">&quot;检查点id:&quot;</span>, step3_checkpoint.config[<span class="string">&quot;configurable&quot;</span>][<span class="string">&quot;checkpoint_id&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ===================实现节点重运行=========================</span></span><br><span class="line">new_config = app.update_state(</span><br><span class="line">    step3_checkpoint.config,</span><br><span class="line">    values=&#123;<span class="string">&quot;input_value&quot;</span>: <span class="string">&quot;你好，pythonAI&quot;</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;===============开始节点重复运行===================&quot;</span>)</span><br><span class="line"><span class="comment"># 注意点：再进行节点重复时，input输出的值为None，第二个值为配置信息</span></span><br><span class="line">app.invoke(<span class="literal">None</span>, config=new_config)</span><br></pre></td></tr></table></figure><h1 id="人工干预机制"><a href="#人工干预机制" class="headerlink" title="人工干预机制"></a>人工干预机制</h1><p>LangGraph 支持强大的<strong>人工参与循环（HIL）</strong>工作流，允许在自动化过程中的任何环节进行人工干预。这在大型语言模型（LLM）驱动的应用程序中尤其有用，因为模型输出可能需要验证、更正或额外的上下文。</p><p><strong>主要功能</strong></p><ul><li>持久化执行状态：LangGraph 在每个步骤后都会检查图状态，允许在定义好的节点处无限期地暂停执行。这支持异步的人工审查或输入，不受时间限制。</li><li>灵活的集成点：HIL 逻辑可以在工作流的任何点引入。这允许有针对性的人工参与，例如批准 API 调用、更正输出或引导对话</li></ul><p><strong>使用场景</strong>：</p><ul><li>审查工具调用：在工具执行之前，人工可以审查、编辑或批准 LLM 请求的工具调用。</li><li>验证 LLM 输出：人工可以审查、编辑或批准 LLM 生成的内容。</li><li>提供上下文：使 LLM 能够明确请求人工输入以进行澄清或提供额外细节，或支持多轮对话。</li></ul><p><strong>核心点</strong>：</p><ul><li>interrupt(…) 暂停图执行，并返回需要人工处理的内容</li><li>Command(resume=…) 用于恢复图，并携带人工提供的输入</li></ul><h3 id="interrupt-的使用"><a href="#interrupt-的使用" class="headerlink" title="interrupt 的使用"></a>interrupt 的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> interrupt, Command</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">human_node</span>(<span class="params">state</span>):</span><br><span class="line">    value = interrupt(&#123;<span class="string">&quot;text_to_revise&quot;</span>: state[<span class="string">&quot;some_text&quot;</span>]&#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;some_text&quot;</span>: value&#125;</span><br><span class="line"></span><br><span class="line">result = graph.invoke(&#123;<span class="string">&quot;some_text&quot;</span>: <span class="string">&quot;原始文本&quot;</span>&#125;, config)</span><br><span class="line"><span class="built_in">print</span>(result[<span class="string">&quot;__interrupt__&quot;</span>])  <span class="comment"># 图将在此中断，等待输入</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复执行</span></span><br><span class="line">graph.invoke(Command(resume=<span class="string">&quot;修改后的文本&quot;</span>), config)</span><br></pre></td></tr></table></figure><p>注意：</p><ul><li><p><code>__interrupt__</code> 是执行结果中保存中断上下文的关键字段。</p></li><li><p>中断恢复时，会重新执行节点中从头到 interrupt() 的代码块。 </p></li></ul><h3 id="Command-的使用"><a href="#Command-的使用" class="headerlink" title="Command 的使用"></a>Command 的使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line">Command(</span><br><span class="line">    goto: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,       <span class="comment"># 指定跳转节点</span></span><br><span class="line">    update: <span class="type">Optional</span>[<span class="built_in">dict</span>] = <span class="literal">None</span>,    <span class="comment"># 更新状态值</span></span><br><span class="line">    resume: <span class="type">Optional</span>[<span class="type">Any</span>] = <span class="literal">None</span>      <span class="comment"># 恢复中断（仅适用于graph节点外部调用）</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="常见中断场景"><a href="#常见中断场景" class="headerlink" title="常见中断场景"></a>常见中断场景</h3><h4 id="审批-拒绝"><a href="#审批-拒绝" class="headerlink" title="审批 / 拒绝"></a>审批 / 拒绝</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">human_review</span>(<span class="params">state: State</span>):</span><br><span class="line">    action = interrupt(<span class="string">&quot;确认操作？&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> action == <span class="string">&quot;确认&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;生成LLM&quot;</span>, update=&#123;<span class="string">&quot;messages&quot;</span>: [<span class="string">&quot;新的用户反馈&quot;</span>]&#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;下一个步骤&quot;</span>)</span><br></pre></td></tr></table></figure><p>根据人工输入，控制图表路径走向</p><h4 id="数据修改"><a href="#数据修改" class="headerlink" title="数据修改"></a>数据修改</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">human_editing</span>(<span class="params">state: State</span>):</span><br><span class="line">    result = interrupt(&#123;</span><br><span class="line">        <span class="string">&quot;task&quot;</span>: <span class="string">&quot;编辑摘要&quot;</span>,</span><br><span class="line">        <span class="string">&quot;llm_generated_summary&quot;</span>: state[<span class="string">&quot;llm_generated_summary&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;llm_generated_summary&quot;</span>: result&#125;</span><br></pre></td></tr></table></figure><p>适用人类对 LLM 输出进行修改。</p><h4 id="信息补充"><a href="#信息补充" class="headerlink" title="信息补充"></a>信息补充</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">request_input</span>(<span class="params">state: State</span>):</span><br><span class="line">    info = interrupt(<span class="string">&quot;请补充信息：&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;info&quot;</span>: info&#125;</span><br></pre></td></tr></table></figure><h1 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h1><p>强调在AI系统中加入人工审核环节以提升系统成熟度和稳定性，特别是在对错误容忍度低的场景下，通过人工审批、状态编辑、工具调用审查等方式保障决策正确性与系统安全。</p><ul><li>审查工具调用情况（是否正确等）</li><li>审查和验证LLM输出</li><li>人工提供更好的上下文背景</li></ul><p>人机交互的场景：</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918090250968.png" alt="image-20250918090250968"></p><h2 id="基本运用：等待用户数据"><a href="#基本运用：等待用户数据" class="headerlink" title="基本运用：等待用户数据"></a>基本运用：等待用户数据</h2><p>等待用户输入的本质是在节点间增加人类反馈节点，定义包含input和user feedback属性的状态对象，引入interrupt组件来打断流程并等待用户反馈，通过Command组件恢复被打断的流程</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> interrupt</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点间通讯的消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="built_in">input</span>: <span class="built_in">str</span></span><br><span class="line">    user_feedback: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 1---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户反馈节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">human_feedback</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---human_feedback---&quot;</span>)</span><br><span class="line">    feedback = interrupt(<span class="string">&quot;Please provide feedback:&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_feedback&quot;</span>: feedback&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_3</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 3---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_1&quot;</span>, step_1)</span><br><span class="line">builder.add_node(<span class="string">&quot;human_feedback&quot;</span>, human_feedback)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_3&quot;</span>, step_3)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;step_1&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_1&quot;</span>, <span class="string">&quot;human_feedback&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;human_feedback&quot;</span>, <span class="string">&quot;step_3&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_3&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设计记忆内存</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the graph until the first interruption</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 添加human反馈</span></span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(</span><br><span class="line">    <span class="comment"># 人类反馈内容：resume=&quot;go to step 3!&quot;</span></span><br><span class="line">    Command(resume=<span class="string">&quot;go to step 3!&quot;</span>), thread, stream_mode=<span class="string">&quot;updates&quot;</span></span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>在智能体中引入人工介入环节，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> ToolMessage</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, START, END, StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 1. 设置状态 ---</span></span><br><span class="line"><span class="comment"># MessagesState 是一个内置的状态类型，它简单地将所有消息累加起来。</span></span><br><span class="line"><span class="comment"># 这对于大多数聊天机器人应用来说都非常方便。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 2. 设置工具 ---</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">query: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数来浏览网络以查找信息。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这是一个实际工具实现的占位符</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;---正在执行搜索: <span class="subst">&#123;query&#125;</span>---&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;我查询了：<span class="subst">&#123;query&#125;</span>。结果：北京天气晴朗，温度25度。&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将有一个真实工具和一个&quot;假&quot;工具&quot;ask_human&quot;</span></span><br><span class="line">tools = [search]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们为&quot;ask_human&quot;工具定义一个Pydantic模型，以便模型知道它的签名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AskHuman</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;当你需要用户的澄清或额外信息时，调用此工具向人类提问。&quot;&quot;&quot;</span></span><br><span class="line">    question: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 3. 设置模型 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有工具（真实的和模拟的）绑定到模型上</span></span><br><span class="line">model = model.bind_tools(tools + [AskHuman])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 4. 定义图的节点和边 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---调用大模型---&quot;</span>)</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们定义一个节点来处理&quot;ask_human&quot;工具调用</span></span><br><span class="line"><span class="comment"># 这个节点会暂停流程并等待用户输入</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interrupt</span>(<span class="params">question: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个简单的函数，用于在命令行中暂停并向用户提问。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n[需要人类输入] 问题: <span class="subst">&#123;question&#125;</span>&quot;</span>)</span><br><span class="line">    answer = <span class="built_in">input</span>(<span class="string">&quot;你的回答: &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ask_human</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---等待人类输入---&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取最后一条消息中的工具调用信息</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    tool_call = last_message.tool_calls[<span class="number">0</span>]</span><br><span class="line">    tool_call_id = tool_call[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析工具调用的参数</span></span><br><span class="line">    ask_args = AskHuman.model_validate(tool_call[<span class="string">&quot;args&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用interrupt函数暂停并获取用户输入</span></span><br><span class="line">    user_response = interrupt(ask_args.question)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将用户的回答构造成一个ToolMessage</span></span><br><span class="line">    tool_message = ToolMessage(content=user_response, tool_call_id=tool_call_id)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [tool_message]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ★★★ 修改点 1: 修改条件函数 ★★★</span></span><br><span class="line"><span class="comment"># 定义决定流程走向的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果模型没有进行工具调用，则流程结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__end__&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果模型调用的是 &quot;AskHuman&quot; 工具</span></span><br><span class="line">    <span class="keyword">if</span> last_message.tool_calls[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;AskHuman&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ask_human&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 否则，执行常规工具调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;action&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 5. 构建图 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将循环的节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line">workflow.add_node(<span class="string">&quot;ask_human&quot;</span>, ask_human)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置入口点</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ★★★ 修改点 2: 添加显式的路径映射 ★★★</span></span><br><span class="line"><span class="comment"># 添加条件边，这是图的核心逻辑</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    should_continue,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ask_human&quot;</span>: <span class="string">&quot;ask_human&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__end__&quot;</span>: END,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加从工具执行节点返回到agent节点的边</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"><span class="comment"># 添加从人类输入节点返回到agent节点的边</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;ask_human&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置内存检查点</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译图，使其成为可运行的应用</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 6. 可视化和运行 ---</span></span><br><span class="line">display(Image(app.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment"># 创建一个线程ID，用于保持对话状态</span></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            (</span><br><span class="line">                <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="string">&quot;询问用户他们在哪里，然后查询那里的天气&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    config,</span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"><span class="comment"># 注意：会出现一个输入用户区域地方，然后等待输入，输入信息后才会进行接续内容，输入内容：我在北京</span></span><br></pre></td></tr></table></figure><p>执行查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918100254757.png" alt="image-20250918100254757"></p><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">---Step 1---</span><br><span class="line">&#123;<span class="string">&#x27;step_1&#x27;</span>: None&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---human_feedback---</span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=<span class="string">&#x27;Please provide feedback:&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;e8b5902129c677d43844e5aff7857cc4&#x27;</span>),)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---human_feedback---</span><br><span class="line">&#123;<span class="string">&#x27;human_feedback&#x27;</span>: &#123;<span class="string">&#x27;user_feedback&#x27;</span>: <span class="string">&#x27;go to step 3!&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---Step 3---</span><br><span class="line">&#123;<span class="string">&#x27;step_3&#x27;</span>: None&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">询问用户他们在哪里，然后查询那里的天气</span><br><span class="line">---调用大模型---</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line">Tool Calls:</span><br><span class="line">  AskHuman (call_00_TpzUc16Jdly70xacNN1qq9PW)</span><br><span class="line"> Call ID: call_00_TpzUc16Jdly70xacNN1qq9PW</span><br><span class="line">  Args:</span><br><span class="line">    question: 请问您在哪里？我想为您查询当地的天气信息。</span><br><span class="line">---等待人类输入---</span><br><span class="line"></span><br><span class="line">[需要人类输入] 问题: 请问您在哪里？我想为您查询当地的天气信息。</span><br><span class="line">================================= Tool Message =================================</span><br><span class="line"></span><br><span class="line">我在北京</span><br><span class="line">---调用大模型---</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line">Tool Calls:</span><br><span class="line">  search (call_00_RlGPZ0yP4eioQByUs8rzdZe2)</span><br><span class="line"> Call ID: call_00_RlGPZ0yP4eioQByUs8rzdZe2</span><br><span class="line">  Args:</span><br><span class="line">    query: 北京天气</span><br><span class="line">---正在执行搜索: 北京天气---</span><br><span class="line">================================= Tool Message =================================</span><br><span class="line">...</span><br><span class="line">- 天气状况：晴朗</span><br><span class="line">- 温度：25度</span><br><span class="line"></span><br><span class="line">这是一个相当宜人的天气，适合外出活动！</span><br></pre></td></tr></table></figure><h2 id="基本运用：审查工具调用"><a href="#基本运用：审查工具调用" class="headerlink" title="基本运用：审查工具调用"></a>基本运用：审查工具调用</h2><p>通过人机协作审查智能体的工具调用，包括设置审查节点、判断人类反馈、执行工具及结果插入，并展示了在不同反馈（继续、更新、反馈）下流程的导航与处理方式。</p><p>根据不同的人类反馈（continue、update、feedback）导航至不同节点。</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict, <span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END, MessagesState</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command, interrupt</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weather_search</span>(<span class="params">city: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;搜索天气&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在搜索：<span class="subst">&#123;city&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;晴朗！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置模型</span></span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">deepseek = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model = deepseek.bind_tools(</span><br><span class="line">    [weather_search]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">MessagesState</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;简单状态。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_llm</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [model.invoke(state[<span class="string">&quot;messages&quot;</span>])]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">human_review_node</span>(<span class="params">state</span>) -&gt; Command[<span class="type">Literal</span>[<span class="string">&quot;call_llm&quot;</span>, <span class="string">&quot;run_tool&quot;</span>]]:</span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    tool_call = last_message.tool_calls[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是我们将通过Command(resume=&lt;human_review&gt;)提供的值</span></span><br><span class="line">    human_review = interrupt(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;question&quot;</span>: <span class="string">&quot;这是正确的吗？&quot;</span>,</span><br><span class="line">            <span class="comment"># 显示工具调用以供审核</span></span><br><span class="line">            <span class="string">&quot;tool_call&quot;</span>: tool_call,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    review_action = human_review[<span class="string">&quot;action&quot;</span>]</span><br><span class="line">    review_data = human_review.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果批准，调用工具</span></span><br><span class="line">    <span class="keyword">if</span> review_action == <span class="string">&quot;continue&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;run_tool&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新AI消息并调用工具</span></span><br><span class="line">    <span class="keyword">elif</span> review_action == <span class="string">&quot;update&quot;</span>:</span><br><span class="line">        updated_message = &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;ai&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: last_message.content,</span><br><span class="line">            <span class="string">&quot;tool_calls&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: tool_call[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: tool_call[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                    <span class="comment"># 这是人类提供的更新</span></span><br><span class="line">                    <span class="string">&quot;args&quot;</span>: review_data,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment"># 这很重要 - 这需要与你替换的消息相同！</span></span><br><span class="line">            <span class="comment"># 否则，它将显示为一个单独的消息</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span>: last_message.<span class="built_in">id</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;run_tool&quot;</span>, update=&#123;<span class="string">&quot;messages&quot;</span>: [updated_message]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向LLM提供反馈</span></span><br><span class="line">    <span class="keyword">elif</span> review_action == <span class="string">&quot;feedback&quot;</span>:</span><br><span class="line">        <span class="comment"># 注意：我们将反馈消息添加为ToolMessage</span></span><br><span class="line">        <span class="comment"># 以保持消息历史中的正确顺序</span></span><br><span class="line">        <span class="comment"># （带有工具调用的AI消息需要后跟工具调用消息）</span></span><br><span class="line">        tool_message = &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">            <span class="comment"># 这是我们的自然语言反馈</span></span><br><span class="line">            <span class="string">&quot;content&quot;</span>: review_data,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: tool_call[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">            <span class="string">&quot;tool_call_id&quot;</span>: tool_call[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;call_llm&quot;</span>, update=&#123;<span class="string">&quot;messages&quot;</span>: [tool_message]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到工具的允许结果，然后插入到消息里面去</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_tool</span>(<span class="params">state</span>):</span><br><span class="line">    new_messages = []</span><br><span class="line">    tools = &#123;<span class="string">&quot;weather_search&quot;</span>: weather_search&#125;</span><br><span class="line">    tool_calls = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].tool_calls</span><br><span class="line">    <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">        tool = tools[tool_call[<span class="string">&quot;name&quot;</span>]]</span><br><span class="line">        result = tool.invoke(tool_call[<span class="string">&quot;args&quot;</span>])</span><br><span class="line">        new_messages.append(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: tool_call[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: result,</span><br><span class="line">                <span class="string">&quot;tool_call_id&quot;</span>: tool_call[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: new_messages&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route_after_llm</span>(<span class="params">state</span>) -&gt; <span class="type">Literal</span>[END, <span class="string">&quot;human_review_node&quot;</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].tool_calls) == <span class="number">0</span>: <span class="comment"># 拿到最新一条数据的tool_calls</span></span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;human_review_node&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(call_llm)</span><br><span class="line">builder.add_node(run_tool)</span><br><span class="line">builder.add_node(human_review_node)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;call_llm&quot;</span>)</span><br><span class="line">builder.add_conditional_edges(<span class="string">&quot;call_llm&quot;</span>, route_after_llm)</span><br><span class="line">builder.add_edge(<span class="string">&quot;run_tool&quot;</span>, <span class="string">&quot;call_llm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置内存</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918100530221.png" alt="image-20250918100530221"></p><ul><li><p>当不涉及工具调用的时候，不会触发人工审核</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;你好！很高兴为您服务。我可以帮您查询天气信息，如果您需要了解某个城市的天气情况，请告诉我城市名称，我会为您查询最新的天气信息。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 33, <span class="string">&#x27;prompt_tokens&#x27;</span>: 144, <span class="string">&#x27;total_tokens&#x27;</span>: 177, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 144&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;d95943e0-85bc-4aae-a037-393a500e8c7a&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--b490a400-5a86-403d-b459-3d972a6b1474-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 144, <span class="string">&#x27;output_tokens&#x27;</span>: 33, <span class="string">&#x27;total_tokens&#x27;</span>: 177, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>一旦涉及到工具调用 就会触发人工介入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Input，提问到天气相关的问题</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;北京的天气如何?&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;我来帮您查询北京的天气情况。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;\\u5317\\u4eac&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 27, <span class="string">&#x27;prompt_tokens&#x27;</span>: 146, <span class="string">&#x27;total_tokens&#x27;</span>: 173, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 18&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;03bd6516-9777-4042-b4ed-02ea6d6d004f&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--b4693d60-2881-4ab6-9e96-4670276ec95a-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 146, <span class="string">&#x27;output_tokens&#x27;</span>: 27, <span class="string">&#x27;total_tokens&#x27;</span>: 173, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=&#123;<span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;这是正确的吗？&#x27;</span>, <span class="string">&#x27;tool_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;183597080f78b79c566b124a34223821&#x27;</span>),)&#125;</span><br></pre></td></tr></table></figure><p>使用Command进行人机交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(</span><br><span class="line">    <span class="comment"># 输入值</span></span><br><span class="line">    Command(resume=&#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;continue&quot;</span>&#125;),</span><br><span class="line">    thread,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;human_review_node&#x27;</span>: None&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">正在搜索：北京</span><br><span class="line">----</span><br><span class="line">&#123;<span class="string">&#x27;run_tool&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;tool&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;晴朗！&#x27;</span>, <span class="string">&#x27;tool_call_id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;根据查询结果，北京目前的天气是晴朗的！天气状况很好，适合外出活动。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 19, <span class="string">&#x27;prompt_tokens&#x27;</span>: 172, <span class="string">&#x27;total_tokens&#x27;</span>: 191, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 44&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;cd0943c6-f6d0-4228-aa4e-2be23df3a798&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--d5f3dae7-d3f1-4ee5-98e3-98abc54e7071-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 172, <span class="string">&#x27;output_tokens&#x27;</span>: 19, <span class="string">&#x27;total_tokens&#x27;</span>: 191, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>更进一步，对智能体调用的工具进行参数编辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;深圳的天气如何?&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;我来帮您查询深圳的天气情况。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;\\u6df1\\u5733&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 28, <span class="string">&#x27;prompt_tokens&#x27;</span>: 147, <span class="string">&#x27;total_tokens&#x27;</span>: 175, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 19&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b944f986-9c42-4d99-ac66-1e90ac5d8514&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--2d7d12ff-727e-4649-a735-44aac3346a5b-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 147, <span class="string">&#x27;output_tokens&#x27;</span>: 28, <span class="string">&#x27;total_tokens&#x27;</span>: 175, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=&#123;<span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;这是正确的吗？&#x27;</span>, <span class="string">&#x27;tool_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;0f55d9ce7b22cdd30d7d25afd89223ae&#x27;</span>),)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接对工具的参数进行编辑</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(</span><br><span class="line">    Command(resume=&#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;update&quot;</span>, <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;city&quot;</span>: <span class="string">&quot;上海,中国&quot;</span>&#125;&#125;),</span><br><span class="line">    thread,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;human_review_node&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;我来帮您查询深圳的天气情况。&#x27;</span>, <span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;上海,中国&#x27;</span>&#125;&#125;], <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;run--2d7d12ff-727e-4649-a735-44aac3346a5b-0&#x27;</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">正在搜索：上海,中国</span><br><span class="line">----</span><br><span class="line">&#123;<span class="string">&#x27;run_tool&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;tool&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;晴朗！&#x27;</span>, <span class="string">&#x27;tool_call_id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;让我重新查询深圳的天气：&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_eY6qquS2SjREeAhv2oD2Q9hL&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;深圳&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 20, <span class="string">&#x27;prompt_tokens&#x27;</span>: 176, <span class="string">&#x27;total_tokens&#x27;</span>: 196, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 48&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;73984e27-0ca3-421b-9d35-348907eabdf3&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--ae52f621-4c85-4e13-95a4-673939846f23-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_eY6qquS2SjREeAhv2oD2Q9hL&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 176, <span class="string">&#x27;output_tokens&#x27;</span>: 20, <span class="string">&#x27;total_tokens&#x27;</span>: 196, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=&#123;<span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;这是正确的吗？&#x27;</span>, <span class="string">&#x27;tool_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_eY6qquS2SjREeAhv2oD2Q9hL&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;5d83228c73ed5e60fe886c76117d2402&#x27;</span>),)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="基本使用：编辑图的状态"><a href="#基本使用：编辑图的状态" class="headerlink" title="基本使用：编辑图的状态"></a>基本使用：编辑图的状态</h2><p>通过设置中断点和人工干预，可以在流程执行中修改状态值，实现对智能体工具选择或动作的审核编辑。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918101102384.png" alt="image-20250918101102384" style="zoom:50%;" /></p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="built_in">input</span>: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 1---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_2</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 2---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_3</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 3---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_1&quot;</span>, step_1)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_2&quot;</span>, step_2)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_3&quot;</span>, step_3)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;step_1&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_1&quot;</span>, <span class="string">&quot;step_2&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_2&quot;</span>, <span class="string">&quot;step_3&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_3&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up memory</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add 注意interrupt_before</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory, interrupt_before=[<span class="string">&quot;step_2&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># View</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the graph until the first interruption</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br></pre></td></tr></table></figure><p>执行查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918101243460.png" alt="image-20250918101243460"></p><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;input&#x27;</span>: <span class="string">&#x27;你好&#x27;</span>&#125;</span><br><span class="line">---Step 1---</span><br></pre></td></tr></table></figure><p>执行到节点Step 1，就中断了，在代码中使用interrupt_before对Step 2设置了断点，此时我们可以进行人工干预，更新流状态并传入新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph.update_state(thread, &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好 everybody!&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---\n---\nUpdated state!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(graph.get_state(thread).values)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">---</span><br><span class="line">Updated state!</span><br><span class="line">&#123;<span class="string">&#x27;input&#x27;</span>: <span class="string">&#x27;你好 everybody!&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继续执行</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(<span class="literal">None</span>, thread, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;input&#x27;</span>: <span class="string">&#x27;你好 everybody!&#x27;</span>&#125;</span><br><span class="line">---Step 2---</span><br><span class="line">---Step 3---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第四讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之节点和可控制性</title>
    <link href="https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/2-langgraph-node-control/"/>
    <id>https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/2-langgraph-node-control/</id>
    <published>2025-09-16T16:00:00.000Z</published>
    <updated>2025-09-17T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个Langgraph"><a href="#第一个Langgraph" class="headerlink" title="第一个Langgraph"></a>第一个Langgraph</h1><h2 id="定义state"><a href="#定义state" class="headerlink" title="定义state"></a>定义state</h2><p>定义两种方式：</p><ol><li>TypedDict:属于 Python 标准库 typing 模块的一部分,仅提供静态类型检查，运行时不执行验证</li><li>Pydantic:第三方库，需要单独安装,提供运行时数据验证和序列化功能</li></ol><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AnyMessage</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点间通讯的消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: <span class="built_in">list</span>[AnyMessage]</span><br><span class="line">    extra_field: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><h2 id="定义节点"><a href="#定义节点" class="headerlink" title="定义节点"></a>定义节点</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">node</span>(<span class="params">state: State</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    new_message = AIMessage(<span class="string">&quot;你好!我是一个节点&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: messages + [new_message], <span class="string">&quot;extra_field&quot;</span>: <span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="创建图"><a href="#创建图" class="headerlink" title="创建图"></a>创建图</h2><ul><li>包含一个节点</li><li>使用state通信</li></ul><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line">graph_builder.add_node(node)</span><br><span class="line">graph_builder.set_entry_point(<span class="string">&quot;node&quot;</span>) <span class="comment"># 设置入口，入口名称为node</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>() <span class="comment"># 进行编译</span></span><br></pre></td></tr></table></figure><h2 id="查看节点与图结构（内置的方法）"><a href="#查看节点与图结构（内置的方法）" class="headerlink" title="查看节点与图结构（内置的方法）"></a>查看节点与图结构（内置的方法）</h2><p>Mermaid 是一种基于文本的图表和可视化工具，它允许用户通过简单的文本语法来创建复杂的图表和流程图。它特别适合开发者、文档编写者和技术人员在文档、代码库或网页中嵌入可视化内容。</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure><p>执行结果展示</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917103406179.png" alt="image-20250917103406179"  /></p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">result = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(<span class="string">&quot;你好啊，我是花花！&quot;</span>)]&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;你好啊，我是花花！&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;),</span><br><span class="line">  AIMessage(content=<span class="string">&#x27;你好!我是一个节点&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;)],</span><br><span class="line"> <span class="string">&#x27;extra_field&#x27;</span>: 10&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-pretty-print-来格式化显示"><a href="#使用-pretty-print-来格式化显示" class="headerlink" title="使用 pretty_print 来格式化显示"></a>使用 pretty_print 来格式化显示</h2><p>输出结果更清晰</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">result = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(<span class="string">&quot;你好啊，我是花花！&quot;</span>)]&#125;)</span><br><span class="line"><span class="keyword">for</span> message <span class="keyword">in</span> result[<span class="string">&quot;messages&quot;</span>]:</span><br><span class="line">    message.pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">你好啊，我是花花！</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好!我是一个节点</span><br></pre></td></tr></table></figure><h1 id="基本控制：串行控制"><a href="#基本控制：串行控制" class="headerlink" title="基本控制：串行控制"></a>基本控制：串行控制</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> START, END, StateGraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    value_1: <span class="built_in">str</span></span><br><span class="line">    value_2: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_2</span>(<span class="params">state: State</span>):</span><br><span class="line">    current_value_1 = state[<span class="string">&quot;value_1&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;current_value_1&#125;</span> + b&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_3</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_2&quot;</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"><span class="comment"># 设置图中节点</span></span><br><span class="line">graph_builder.add_node(step_1)</span><br><span class="line">graph_builder.add_node(step_2)</span><br><span class="line">graph_builder.add_node(step_3)</span><br><span class="line"><span class="comment"># 设置图中边</span></span><br><span class="line">graph_builder.add_edge(START, <span class="string">&quot;step_1&quot;</span>) <span class="comment"># 开始的边</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;step_1&quot;</span>, <span class="string">&quot;step_2&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;step_2&quot;</span>, <span class="string">&quot;step_3&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;step_3&quot;</span>, END) <span class="comment"># 结束的边</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">&quot;c&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917135828786.png" alt="image-20250917135828786" style="zoom:80%;" /></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;value_1&#x27;</span>: <span class="string">&#x27;a + b&#x27;</span>, <span class="string">&#x27;value_2&#x27;</span>: 10&#125;</span><br></pre></td></tr></table></figure><h1 id="基本控制：分支控制"><a href="#基本控制：分支控制" class="headerlink" title="基本控制：分支控制"></a>基本控制：分支控制</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, Annotated</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> START, END, StateGraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="comment"># Annotated允许为类型提供额外的元数据，而不影响类型检查时对类型本身的理解</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    aggregate: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;A&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;A&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;B&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;B&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;C&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;C&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;D&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;D&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"><span class="comment"># 设置图中节点</span></span><br><span class="line">graph_builder.add_node(a)</span><br><span class="line">graph_builder.add_node(b)</span><br><span class="line">graph_builder.add_node(c)</span><br><span class="line">graph_builder.add_node(d)</span><br><span class="line"><span class="comment"># 设置图中边</span></span><br><span class="line">graph_builder.add_edge(START, <span class="string">&quot;a&quot;</span>) <span class="comment"># 开始的边</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;d&quot;</span>, END) <span class="comment"># 结束的边</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;, &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;foo&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917140002989.png" alt="image-20250917140002989" style="zoom:67%;" /></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加<span class="string">&#x27;A&#x27;</span>到[]</span><br><span class="line">添加<span class="string">&#x27;B&#x27;</span>到[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">添加<span class="string">&#x27;C&#x27;</span>到[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">添加<span class="string">&#x27;D&#x27;</span>到[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;aggregate&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><h1 id="基本控制：条件分支与循环"><a href="#基本控制：条件分支与循环" class="headerlink" title="基本控制：条件分支与循环"></a>基本控制：条件分支与循环</h1><h2 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated, <span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    aggregate: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node A sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;A&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node B sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;B&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(a)</span><br><span class="line">builder.add_node(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">state: State</span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;b&quot;</span>, END]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state[<span class="string">&quot;aggregate&quot;</span>]) &lt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">builder.add_conditional_edges(<span class="string">&quot;a&quot;</span>, route) <span class="comment"># 条件边</span></span><br><span class="line">builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917140318708.png" alt="image-20250917140318708" /></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Node A sees []</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;aggregate&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><p>注意：使用递归限制recursion_limit，防止异常情况下的大量无用调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.errors <span class="keyword">import</span> GraphRecursionError</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;, &#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">4</span>&#125;)</span><br><span class="line"><span class="keyword">except</span> GraphRecursionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recursion Error&quot;</span>) <span class="comment"># 递归错误 超出限制</span></span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node A sees []</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Recursion Error</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated, <span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    aggregate: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node A sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;A&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node B sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;B&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node C sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;C&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node D sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;D&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置节点</span></span><br><span class="line">builder.add_node(a)</span><br><span class="line">builder.add_node(b)</span><br><span class="line">builder.add_node(c)</span><br><span class="line">builder.add_node(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">state: State</span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;b&quot;</span>, END]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state[<span class="string">&quot;aggregate&quot;</span>]) &lt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">builder.add_conditional_edges(<span class="string">&quot;a&quot;</span>, route)</span><br><span class="line">builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">builder.add_edge([<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>], <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917140631860.png" alt="image-20250917140631860"></p><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Node A sees []</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node C sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node D sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node C sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node D sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;aggregate&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><h1 id="精细控制：图的运行时配置"><a href="#精细控制：图的运行时配置" class="headerlink" title="精细控制：图的运行时配置"></a>精细控制：图的运行时配置</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated, <span class="type">Sequence</span></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> BaseMessage, HumanMessage</span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables.config <span class="keyword">import</span> RunnableConfig</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> END, StateGraph, START</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model1 = ChatOpenAI(</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;OPENAI_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;OPENAI_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要切换的模型</span></span><br><span class="line">models = &#123;</span><br><span class="line">    <span class="string">&quot;deepseek&quot;</span>: model,</span><br><span class="line">    <span class="string">&quot;openai&quot;</span>: model1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgentState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="type">Sequence</span>[BaseMessage], operator.add]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_call_model</span>(<span class="params">state: AgentState, config: RunnableConfig</span>):</span><br><span class="line">    <span class="comment"># 使用LCEL的配置</span></span><br><span class="line">    model_name = config[<span class="string">&quot;configurable&quot;</span>].get(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;deepseek&quot;</span>) <span class="comment"># 设置默认模型</span></span><br><span class="line">    model = models[model_name]</span><br><span class="line">    response = model.invoke(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(AgentState)</span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line">builder.add_node(<span class="string">&quot;model&quot;</span>, _call_model)</span><br><span class="line"><span class="comment"># 定义边</span></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;model&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;model&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure><p>没有增加运行时配置的情况下，它会默认调用deepseek</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(content=<span class="string">&quot;hi 你是谁？&quot;</span>)]&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>执行结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;hi 你是谁？&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;),</span><br><span class="line">  AIMessage(content=<span class="string">&#x27;嗨！我是DeepSeek-V3，你的智能助手，由深度求索公司创造。😊 我可以帮你解答问题、聊天、提供建议，甚至协助你处理各种学习和工作上的任务。有什么我可以帮你的吗？&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 49, <span class="string">&#x27;prompt_tokens&#x27;</span>: 8, <span class="string">&#x27;total_tokens&#x27;</span>: 57, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 8&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;228c33b4-21f7-4c47-82bd-7417ca36d81d&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--ff284eca-736c-4b89-bb63-7e5c07ea1786-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 8, <span class="string">&#x27;output_tokens&#x27;</span>: 49, <span class="string">&#x27;total_tokens&#x27;</span>: 57, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><p>增加运行时配置，动态切换模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;model&quot;</span>: <span class="string">&quot;openai&quot;</span>&#125;&#125;</span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(content=<span class="string">&quot;hi 你是谁？&quot;</span>)]&#125;, config=config)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;hi 你是谁？&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;),</span><br><span class="line">  AIMessage(content=<span class="string">&#x27;你好，我是一个人工智能助手。我可以回答你的问题和提供帮助。有什么可以帮到你的吗？&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 44, <span class="string">&#x27;prompt_tokens&#x27;</span>: 14, <span class="string">&#x27;total_tokens&#x27;</span>: 58, <span class="string">&#x27;completion_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;accepted_prediction_tokens&#x27;</span>: 0, <span class="string">&#x27;audio_tokens&#x27;</span>: 0, <span class="string">&#x27;reasoning_tokens&#x27;</span>: 0, <span class="string">&#x27;rejected_prediction_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: 0, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;gpt-3.5-turbo-0125&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: None, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;chatcmpl-CGcvpmH2o6wgubw0PLBymye0uPyzN&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--5a5fb090-eae6-4a54-bef8-c877446d5a63-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 14, <span class="string">&#x27;output_tokens&#x27;</span>: 44, <span class="string">&#x27;total_tokens&#x27;</span>: 58, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;audio&#x27;</span>: 0, <span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;<span class="string">&#x27;audio&#x27;</span>: 0, <span class="string">&#x27;reasoning&#x27;</span>: 0&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><h1 id="精细控制：map-reduce并行执行"><a href="#精细控制：map-reduce并行执行" class="headerlink" title="精细控制：map-reduce并行执行"></a>精细控制：map-reduce并行执行</h1><p>给定一个来自用户的一般主题，生成相关主题列表，为每个主题生成一个笑话，并从结果列表中选择最佳笑话。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917141044009.png" alt="image-20250917141044009"></p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Send</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> END, StateGraph, START</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型和提示词</span></span><br><span class="line"><span class="comment"># 定义我们将使用的模型和提示词</span></span><br><span class="line">subjects_prompt = <span class="string">&quot;&quot;&quot;生成一个逗号分隔的列表，包含2到5个与以下主题相关的例子：&#123;topic&#125;。&quot;&quot;&quot;</span></span><br><span class="line">joke_prompt = <span class="string">&quot;&quot;&quot;生成一个关于&#123;subject&#125;的笑话&quot;&quot;&quot;</span></span><br><span class="line">best_joke_prompt = <span class="string">&quot;&quot;&quot;以下是一些关于&#123;topic&#125;的笑话。选出最好的一个！返回最佳笑话的ID。&#123;jokes&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义以下三个数据模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subjects</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    subjects: <span class="built_in">list</span>[<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Joke</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    joke: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BestJoke</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = Field(description=<span class="string">&quot;最佳笑话的索引，从0开始&quot;</span>, ge=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义大模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图组件：定义构成图的组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这将是主图的整体状态。</span></span><br><span class="line"><span class="comment"># 它将包含一个主题（我们期望用户提供）</span></span><br><span class="line"><span class="comment"># 然后将生成一个主题列表，并为每个主题生成一个笑话</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OverallState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    topic: <span class="built_in">str</span></span><br><span class="line">    subjects: <span class="built_in">list</span></span><br><span class="line">    <span class="comment"># 注意这里我们使用operator.add</span></span><br><span class="line">    <span class="comment"># 这是因为我们想把从各个节点生成的所有笑话</span></span><br><span class="line">    <span class="comment"># 合并回一个列表 - 这本质上是&quot;归约&quot;部分</span></span><br><span class="line">    jokes: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line">    best_selected_joke: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这将是我们将&quot;映射&quot;所有主题的节点的状态</span></span><br><span class="line"><span class="comment"># 用于生成笑话</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JokeState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    subject: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="comment"># 这是我们用来生成笑话主题的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_topics</span>(<span class="params">state: OverallState</span>):</span><br><span class="line">    prompt = subjects_prompt.<span class="built_in">format</span>(topic=state[<span class="string">&quot;topic&quot;</span>])</span><br><span class="line">    <span class="comment"># 模型进行结构化输出</span></span><br><span class="line">    response = model.with_structured_output(Subjects).invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;subjects&quot;</span>: response.subjects&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们根据给定的主题生成笑话</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_joke</span>(<span class="params">state: JokeState</span>):</span><br><span class="line">    prompt = joke_prompt.<span class="built_in">format</span>(subject=state[<span class="string">&quot;subject&quot;</span>])</span><br><span class="line">    <span class="comment"># 模型进行结构化输出</span></span><br><span class="line">    response = model.with_structured_output(Joke).invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;jokes&quot;</span>: [response.joke]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们定义映射到生成的主题上的逻辑</span></span><br><span class="line"><span class="comment"># 我们将在图中使用这个作为边缘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continue_to_jokes</span>(<span class="params">state: OverallState</span>):</span><br><span class="line">    <span class="comment"># 我们将返回一个`Send`对象列表</span></span><br><span class="line">    <span class="comment"># 每个`Send`对象包含图中节点的名称</span></span><br><span class="line">    <span class="comment"># 以及要发送到该节点的状态</span></span><br><span class="line">    <span class="keyword">return</span> [Send(<span class="string">&quot;generate_joke&quot;</span>, &#123;<span class="string">&quot;subject&quot;</span>: s&#125;) <span class="keyword">for</span> s <span class="keyword">in</span> state[<span class="string">&quot;subjects&quot;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们将评判最佳笑话</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">best_joke</span>(<span class="params">state: OverallState</span>):</span><br><span class="line">    jokes = <span class="string">&quot;\n\n&quot;</span>.join(state[<span class="string">&quot;jokes&quot;</span>])</span><br><span class="line">    prompt = best_joke_prompt.<span class="built_in">format</span>(topic=state[<span class="string">&quot;topic&quot;</span>], jokes=jokes)</span><br><span class="line">    response = model.with_structured_output(BestJoke).invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;best_selected_joke&quot;</span>: state[<span class="string">&quot;jokes&quot;</span>][response.<span class="built_in">id</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建图：这里我们将所有内容组合在一起构建我们的图</span></span><br><span class="line">graph = StateGraph(OverallState)</span><br><span class="line"><span class="comment"># 设置节点</span></span><br><span class="line">graph.add_node(<span class="string">&quot;generate_topics&quot;</span>, generate_topics)</span><br><span class="line">graph.add_node(<span class="string">&quot;generate_joke&quot;</span>, generate_joke)</span><br><span class="line">graph.add_node(<span class="string">&quot;best_joke&quot;</span>, best_joke)</span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;generate_topics&quot;</span>)</span><br><span class="line">graph.add_conditional_edges(<span class="string">&quot;generate_topics&quot;</span>, continue_to_jokes, [<span class="string">&quot;generate_joke&quot;</span>]) <span class="comment"># 条件边</span></span><br><span class="line">graph.add_edge(<span class="string">&quot;generate_joke&quot;</span>, <span class="string">&quot;best_joke&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;best_joke&quot;</span>, END)</span><br><span class="line">app = graph.<span class="built_in">compile</span>() <span class="comment"># 图编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">Image(app.get_graph().draw_mermaid_png())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;动物&quot;</span>&#125;):</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917141132825.png" alt="image-20250917141132825"></p><p>执行结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;generate_topics&#x27;</span>: &#123;<span class="string">&#x27;subjects&#x27;</span>: [<span class="string">&#x27;动物&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;generate_joke&#x27;</span>: &#123;<span class="string">&#x27;jokes&#x27;</span>: [<span class="string">&#x27;为什么老虎不喝茶？因为它们喝茶会变成茶虎！&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;best_joke&#x27;</span>: &#123;<span class="string">&#x27;best_selected_joke&#x27;</span>: <span class="string">&#x27;为什么老虎不喝茶？因为它们喝茶会变成茶虎！&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第二讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph介绍</title>
    <link href="https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/1-langgraph-introduce/"/>
    <id>https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/1-langgraph-introduce/</id>
    <published>2025-09-16T16:00:00.000Z</published>
    <updated>2025-09-17T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是智能体"><a href="#什么是智能体" class="headerlink" title="什么是智能体"></a>什么是智能体</h1><p>智能体（AI Agents或Agents）是指能够<strong>自主感知环境、做出决策并执行行动的系统或程序</strong>。根据IBM的定义，智能体是“能够通过设计其工作流和利用可用工具，代表用户或其他系统自主执行任务的系统或程序”[<a href="https://www.ibm.com/cn-zh/think/topics/ai-agents">IBM</a>]。英伟达则将智能体描述为“AI 智能体是先进的 AI 系统，旨在<strong>根据高级目标自主进行推理，制定计划并执行复杂任务</strong>。”，代表了“从简单自动化向能够管理复杂工作流的自主系统过渡”的演进方向[<a href="https://www.nvidia.cn/glossary/ai-agents/">NVIDIA</a>]。</p><p>在更专业的学术定义中，百度百科指出：“智能体是指能够感知环境并自主采取行动以实现特定目标的实体。这一概念最早由“人工智能之父”马文·明斯基提出，他认为某些问题可经由社会中的一些个体经过协商后解决，这些个体就是智能体。”[<a href="https://baike.baidu.com/item/智能体/9446647">百度百科</a>]</p><p>智能体具有以下基本特征：</p><ul><li>自主性(Autonomy)：智能体能够在没有人类或其他实体的直接干预下运行，并对其行动和内部状态具有某种程度的控制。</li><li>反应性(Reactivity)：智能体能够感知其环境，并对环境变化做出实时响应。</li><li>交互性/社交性(Socialability)：智能体能够与其他智能体或人类进行交互和协作。</li><li>适应性/主动性(Proactivity)：智能体能够根据环境变化主动调整其行为策略，适应新的情况。</li><li>学习能力：许多智能体具有通过经验或数据学习和改进的能力。</li></ul><h1 id="单智能体与多智能体"><a href="#单智能体与多智能体" class="headerlink" title="单智能体与多智能体"></a>单智能体与多智能体</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917095828145.png" alt="image-20250917095828145" style="zoom:50%;" /></p><h2 id="LangChain内置"><a href="#LangChain内置" class="headerlink" title="LangChain内置"></a>LangChain内置</h2><p>注意：LangChain内置的Agent模块已经不在支持维护了，智能体开发重点使用LangGraph</p><p>单Agent的特点</p><ul><li>结构简单，只有一个智能体负责所有任务</li><li>决策过程中，不需要协调多个Agent之间的通信</li><li>适合处理相对简单或专一的任务</li><li>通常计算资源需求较少</li><li>响应速度可能更快，因为不需要多Agent间的协调</li></ul><h2 id="LangGraph内置"><a href="#LangGraph内置" class="headerlink" title="LangGraph内置"></a>LangGraph内置</h2><p>多Agents的特点</p><ul><li>系统由多个相互协作的智能体组成</li><li>各Agent可能有不同的专业领域或功能</li><li>需要Agent之间得的通信和协调机制</li><li>可以并行处理多个任务</li><li>系统整体更加复杂但也更加强大</li><li>具有更好的可扩展性和容错能力</li></ul><h1 id="多智能体"><a href="#多智能体" class="headerlink" title="多智能体"></a>多智能体</h1><ul><li>更小颗粒度和更低层面的封装</li><li>更灵活</li><li>难度也更高</li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917100224849.png" alt="image-20250917100224849" style="zoom:50%;" /></p><h1 id="常见的多智能体架构"><a href="#常见的多智能体架构" class="headerlink" title="常见的多智能体架构"></a>常见的多智能体架构</h1><p>多智能体架构中的网状结构、监管者模式、分级架构和自定义模式，并通过类比人类工作方式说明多智能体如何协作完成复杂任务。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917100621793.png" alt="image-20250917100621793" style="zoom:67%;" /></p><ul><li>网状结构：任何一个智能体都可以进行决策</li><li>监督者结构：由主管来决策下一步操作</li><li>监管者架构（工具）：智能体作为工具，接受一个LLM主管的调用</li><li>分级架构：多级架构每级都有一个监管者</li><li>自定义：只有部分智能体具备决策权</li></ul><h1 id="LangGraph介绍"><a href="#LangGraph介绍" class="headerlink" title="LangGraph介绍"></a>LangGraph介绍</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917101404838.png" alt="image-20250917101404838" style="zoom:50%;" /></p><p>官方地址：<a href="https://langchain-ai.github.io/langgraph">https://langchain-ai.github.io/langgraph</a></p><p><strong>LangGraph</strong> 是一个专注于构建、管理和部署 <strong>有状态（Stateful）</strong>、<strong>长期运行（Long-running）</strong> 的 LLM Agent 编排框架。 </p><ul><li><strong>核心设计思想</strong>：结合状态机模型与现代链式逻辑编排能力。 </li><li><strong>应用场景</strong>：智能代理系统、复杂工作流管理、人机协同任务。 </li><li><strong>行业应用</strong>：被 Klarna、Replit、Elastic 等一线公司广泛采用，逐步成为下一代 Agent 系统的核心底座。</li></ul><h2 id="核心优势"><a href="#核心优势" class="headerlink" title="核心优势"></a>核心优势</h2><p>LangGraph 为长期运行/有状态的工作流提供底层基础设施支持，具备以下特性： </p><div class="table-container"><table><thead><tr><th>优势</th><th>说明</th></tr></thead><tbody><tr><td><strong>持久执行</strong></td><td>支持故障恢复，自动从中断点继续执行。</td></tr><tr><td><strong>人机交互</strong></td><td>允许实时检查/修改代理状态，无缝集成人工监督。</td></tr><tr><td><strong>综合记忆</strong></td><td>短期工作记忆（推理） + 长期持久记忆（跨会话）。</td></tr><tr><td><strong>LangSmith 调试</strong></td><td>通过可视化工具跟踪执行路径、状态转换和运行时指标。</td></tr><tr><td><strong>生产就绪部署</strong></td><td>提供可扩展架构，专为有状态工作流的独特挑战设计。</td></tr></tbody></table></div><h2 id="LangGraph-生态系统"><a href="#LangGraph-生态系统" class="headerlink" title="LangGraph 生态系统"></a>LangGraph 生态系统</h2><p>LangGraph 可独立使用，也可与 LangChain 生态深度集成： </p><div class="table-container"><table><thead><tr><th>组件</th><th>功能</th></tr></thead><tbody><tr><td><strong>LangSmith</strong></td><td>代理评估与可观测性工具，支持生产环境监控和性能优化。</td></tr><tr><td><strong>LangGraph 平台</strong></td><td>专为长期工作流设计的部署平台，支持可视化原型设计（LangGraph Studio）。</td></tr><tr><td><strong>LangChain</strong></td><td>提供可组合的 LLM 开发组件，简化应用构建流程。</td></tr></tbody></table></div><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langgraph</span><br></pre></td></tr></table></figure><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: __start__</span><br><span class="line">st1=&gt;operation: step_1</span><br><span class="line">st2=&gt;operation: step_2</span><br><span class="line">e=&gt;end: step_3</span><br><span class="line">st-&gt;st1-&gt;st2-&gt;e</span><br></pre></td></tr></table></figure><h3 id="State（状态）"><a href="#State（状态）" class="headerlink" title="State（状态）"></a>State（状态）</h3><ul><li>状态是一个在整个图中共享和传递的对象，包含了流程执行过程中所有信息。</li><li>有状态（stateful）：程序具有“记忆”，能记住过去的步骤和结果，并根据这些信息来决定下一步</li><li>可变（mutable）：每个节点都可以修改状态。例如，一个节点可能会将LLM的回复写入状态中，而下一个节点则会读取这个回复并根据它来做决策</li></ul><h3 id="Node（节点）"><a href="#Node（节点）" class="headerlink" title="Node（节点）"></a>Node（节点）</h3><ul><li>节点是图中的基本单元，代表一个具体的功能或操作，视作流程中的一个步骤</li><li>每个节点负责完成一项特定任务（如查询数据、生成文本、做决策等）</li><li>节点接受输入，处理后产生输出</li><li>可以是简单的函数、API调用、LLM调用或其他复杂操作</li></ul><h3 id="Edges（边）"><a href="#Edges（边）" class="headerlink" title="Edges（边）"></a>Edges（边）</h3><ul><li>边决定了流程如何从一个节点移动到另一个节点。</li><li>LangGraph支持两种主要类型的边：<ul><li>Normal Edges（普通边）：简单的将流程从节点A -&gt; B</li><li>Conditional Edges（条件边）：根据当前状态的内容来决定下一步执行哪个节点，是根据LLM的回复或工具的结果动态的做出决策</li></ul></li></ul><h3 id="Graph（图）"><a href="#Graph（图）" class="headerlink" title="Graph（图）"></a>Graph（图）</h3><ul><li>图是节点及其连接关系的集合，代表整个工作流程</li><li>定义了信息如何从一个节点流向另一个节点</li><li>可以是线性的（A -&gt; B -&gt; C）或包含分支、循环复杂结构</li><li>控制整个应用的执行流程和逻辑</li></ul>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第一讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph之持久化瘀记忆</title>
    <link href="https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/3-langgraph-memory/"/>
    <id>https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/3-langgraph-memory/</id>
    <published>2025-09-16T16:00:00.000Z</published>
    <updated>2025-09-17T06:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://langchain-ai.github.io/langgraph/how-tos/memory/add-memory/">记忆</a>是一个记住有关先前交互的信息的系统。对于人工智能代理来说，记忆至关重要，因为它可以让他们记住以前的交互，从反馈中学习，并适应用户偏好。随着代理通过大量用户交互处理更复杂的任务，此功能对于效率和用户满意度都变得至关重要。</p><h1 id="持久化层"><a href="#持久化层" class="headerlink" title="持久化层"></a>持久化层</h1><ul><li>LangGraph 的内置功能，通过检查点器实现</li><li>保存和恢复图执行状态的<strong>机制</strong></li><li>让你的 AI 应用能够 “记住” 之前的交互</li><li>支持应用在中断后从上次停止的地方继续</li><li>为调试和人机协作提供基础支持</li></ul><h1 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h1><ul><li>是一种认知功能，允许 AI 存储、检索和使用信息</li><li>在 LangGraph 中分为两种类型：短期记忆和长期记忆</li><li>记忆是持久化的一种应用场景，使 AI 能够在交互中保持上下文</li><li>记忆提供了结构化的方式来组织信息</li><li>记忆提供了高效的检索机制</li><li>记忆定义了如何将存储的信息融入到当前对话中</li></ul><div class="table-container"><table><thead><tr><th>记忆类型</th><th>范围</th><th>特点</th></tr></thead><tbody><tr><td>短期记忆</td><td>单个线程内</td><td>储存在代理状态中，通过线程范围的检查点持久化，适合对话上下文维护。</td></tr><tr><td>长期记忆</td><td>跨线程/全局</td><td>存储于命名空间中，可被不同线程共享。适合存储用户偏好、操作规则等长期信息。</td></tr></tbody></table></div><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917142203967.png" alt="image-20250917142203967" style="zoom:50%;" /></p><ul><li>持久化层<ul><li>无论何种记忆方式，都要激活持久化层</li></ul></li><li>使用短期记忆<ul><li>适合简单应用，只需要在会话中保持基本状态，如保存用户名或简单偏好</li></ul></li><li>使用长期记忆<ul><li>适合需要跨会话学习和适应的高级 AI 应用，如个人助理或客户服务机器人</li></ul></li></ul><h1 id="基本运用：线程隔离的持久化层"><a href="#基本运用：线程隔离的持久化层" class="headerlink" title="基本运用：线程隔离的持久化层"></a>基本运用：线程隔离的持久化层</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, MessagesState, START</span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    response = model.invoke(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(MessagesState)</span><br><span class="line"><span class="comment"># 设置节点</span></span><br><span class="line">builder.add_node(<span class="string">&quot;call_model&quot;</span>, call_model)</span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;call_model&quot;</span>)</span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><p>没有激活持久化层，无法实现多轮对话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;hi! 我是小美&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小美</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好呀小美！😊 很高兴认识你～我是DeepSeek-V3，可以叫我小深或者DeepSeek。有什么我可以帮你的吗？无论是聊天、解答问题还是提供建议，我都在这里哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我不知道你的名字，但你可以告诉我！如果你愿意的话，我可以帮你记住，并在以后的对话中称呼你。😊</span><br></pre></td></tr></table></figure><p>激活持久化层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="comment"># 使用 MemorySaver 保存中间状态</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125; <span class="comment"># 配置对话的线程id</span></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;hi! 我是小美&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小美</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好呀小美！😊 很高兴认识你～我叫DeepSeek-V3，是你的AI助手，有什么可以帮你的吗？无论是聊天、解答问题还是提供建议，我都在这里哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你刚刚说你是“小美”呀～需要我帮你记住这个名字吗？还是说你有其他喜欢的称呼呢？😊</span><br></pre></td></tr></table></figure><p>注意对话线程thread_id的输入，输入1和2的区别</p><p>tread_id:2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;, <span class="comment"># different thread_id</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;, <span class="comment"># different thread_id</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-1].pretty_print()</span><br></pre></td></tr></table></figure><p>thread_id:1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;, <span class="comment"># different thread_id</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你之前告诉我你叫“小美”呀～需要我以后都这样称呼你吗？还是想换个新名字？随时可以告诉我哦！😊</span><br></pre></td></tr></table></figure><p>由以上看到，对话持久化内容，只能在同一个线程中获取，如果换一个线程，则是读取不到之前对话内容</p><h1 id="基本运用：跨线程持久化调用"><a href="#基本运用：跨线程持久化调用" class="headerlink" title="基本运用：跨线程持久化调用"></a>基本运用：跨线程持久化调用</h1><p>如果我们要跨线程读取持久层的对话信息，则需要在对话配置设置userid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langgraph.store.memory <span class="keyword">import</span> InMemoryStore</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用OpenAI的封装，但是运行国产嵌入模型</span></span><br><span class="line"><span class="comment"># 使用内存存储来保存向量化后记忆数据</span></span><br><span class="line">in_memory_store = InMemoryStore(</span><br><span class="line">    index=&#123;</span><br><span class="line">        <span class="string">&quot;embed&quot;</span>: OpenAIEmbeddings(</span><br><span class="line">            model=<span class="string">&quot;BAAI/bge-m3&quot;</span>,</span><br><span class="line">            api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">            base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables <span class="keyword">import</span> RunnableConfig</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, MessagesState, START</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.store.base <span class="keyword">import</span> BaseStore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：我们将 Store 参数传递给节点 --</span></span><br><span class="line"><span class="comment"># 这是我们编译图时使用的 Store</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState, config: RunnableConfig, *, store: BaseStore</span>):</span><br><span class="line">    <span class="comment"># 从存储中检索用户信息</span></span><br><span class="line">    user_id = config[<span class="string">&quot;configurable&quot;</span>][<span class="string">&quot;user_id&quot;</span>]</span><br><span class="line">    <span class="comment"># 从存储中检索用户信息</span></span><br><span class="line">    namespace = (<span class="string">&quot;memories&quot;</span>, user_id)</span><br><span class="line">    memories = store.search(namespace, query=<span class="built_in">str</span>(state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].content))</span><br><span class="line">    info = <span class="string">&quot;\n&quot;</span>.join([d.value[<span class="string">&quot;data&quot;</span>] <span class="keyword">for</span> d <span class="keyword">in</span> memories])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;在内存中检索到的用户信息：<span class="subst">&#123;info&#125;</span>&quot;</span>)</span><br><span class="line">    system_msg = <span class="string">f&quot;你是一个正在与用户交谈的小助手。用户信息：<span class="subst">&#123;info&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果用户要求模型记住信息，则存储新的记忆</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;记住&quot;</span> <span class="keyword">in</span> last_message.content.lower() <span class="keyword">or</span> <span class="string">&quot;remember&quot;</span> <span class="keyword">in</span> last_message.content.lower():</span><br><span class="line">        <span class="comment"># 硬编码一个记忆</span></span><br><span class="line">        memory = <span class="string">&quot;用户名字是花花&quot;</span></span><br><span class="line">        store.put(namespace, <span class="built_in">str</span>(uuid.uuid4()), &#123;<span class="string">&quot;data&quot;</span>: memory&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型调用</span></span><br><span class="line">    response = model.invoke(</span><br><span class="line">        [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_msg&#125;] + state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(MessagesState)</span><br><span class="line">builder.add_node(<span class="string">&quot;call_model&quot;</span>, call_model)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;call_model&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：我们在编译图时传递了 store 对象</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=MemorySaver(), store=in_memory_store)</span><br></pre></td></tr></table></figure><p>下面执行，注意线程id和用户id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125; <span class="comment"># 配置对话的线程id和用户id</span></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请记住我的名字叫花花!&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">请记住我的名字叫花花!</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">好的，花花！我会记住你的名字。如果有任何需要帮助的地方，随时告诉我哦！ 😊</span><br></pre></td></tr></table></figure><p>跨线程使用相同的用户ID查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意线程ID和用户ID，同一个user_id</span></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>, <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125; <span class="comment"># 配置对话的线程id和用户id</span></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">在内存中检索到的用户信息：用户名字是花花</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你的名字是花花！有什么我可以帮你的吗？😊</span><br></pre></td></tr></table></figure><p>我们可以查询存储在内存中的记忆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> memory <span class="keyword">in</span> in_memory_store.search((<span class="string">&quot;memories&quot;</span>, <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(memory.value)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;用户名字是花花&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>用户级的记忆隔离</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;3&quot;</span>, <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么?</span><br><span class="line">在内存中检索到的用户信息：</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我无法知道您的名字，因为您没有告诉我。如果您愿意，可以告诉我您的名字，我会记住它以便更好地为您服务！ 😊</span><br></pre></td></tr></table></figure><h1 id="记忆：短期记忆的实现"><a href="#记忆：短期记忆的实现" class="headerlink" title="记忆：短期记忆的实现"></a>记忆：短期记忆的实现</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：使用内存存储来存储记忆</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">query: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数可以浏览网络。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 模拟一个网络搜索返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;北京天气晴朗 大约22度 湿度30%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [search]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义大模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bound_model = model.bind_tools(tools)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回下一个要执行的节点。&quot;&quot;&quot;</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果没有函数调用，则结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line">    <span class="comment"># 否则如果有，我们继续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;action&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    response = bound_model.invoke(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这会被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将在其间循环的两个节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为 `agent`</span></span><br><span class="line"><span class="comment"># 这意味着这个节点是第一个被调用的</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用 `agent`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在 `agent` 节点被调用后采取的边。</span></span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">    <span class="comment"># 接下来，我们传入路径映射 - 这条边可能去往的所有可能节点</span></span><br><span class="line">    [<span class="string">&quot;action&quot;</span>, END],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从 `tools` 到 `agent` 添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用 `tools` 之后，接下来调用 `agent` 节点。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line"><span class="comment"># 这将它编译成一个 LangChain Runnable，</span></span><br><span class="line"><span class="comment"># 意味着你可以像使用任何其他 runnable 一样使用它</span></span><br><span class="line"><span class="comment"># 设置检查点为内存形式，注意没有设置store</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;hi! 我是阿花&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是阿花</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好阿花！很高兴认识你！我是AI助手，可以帮你搜索信息、回答问题。有什么我可以帮助你的吗？</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你刚才告诉我你叫<span class="string">&quot;阿花&quot;</span>！这个名字很可爱呢！有什么我可以帮阿花做的吗？</span><br></pre></td></tr></table></figure><h1 id="记忆：长期记忆的实现"><a href="#记忆：长期记忆的实现" class="headerlink" title="记忆：长期记忆的实现"></a>记忆：长期记忆的实现</h1><p>使用mongodb进行内容存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">city: <span class="type">Literal</span>[<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;深圳&quot;</span>]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用来返回天气信息的工具函数。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> city == <span class="string">&quot;北京&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;北京天气晴朗 大约22度 湿度30%&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> city == <span class="string">&quot;深圳&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;深圳天气多云 大约28度 湿度80%&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> AssertionError(<span class="string">&quot;Unknown city&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [get_weather]</span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接mongodb进行查询</span></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.mongodb <span class="keyword">import</span> MongoDBSaver</span><br><span class="line"></span><br><span class="line">MONGODB_URI = <span class="string">&quot;82.157.193.65:27017&quot;</span>  <span class="comment"># replace this with your connection string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MongoDBSaver.from_conn_string(MONGODB_URI) <span class="keyword">as</span> checkpointer:</span><br><span class="line">    graph = create_react_agent(model, tools=tools, checkpointer=checkpointer)</span><br><span class="line">    config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">    response = graph.invoke(</span><br><span class="line">        &#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;北京今天的天气如何？&quot;</span>)]&#125;, config</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;北京今天的天气如何？&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;b0bd092b-5519-4ca5-9018-f9a771813ec7&#x27;</span>), AIMessage(content=<span class="string">&#x27;我来帮您查询北京今天的天气情况。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_b7iojoLeBBIQTVuThfk9Mkxu&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;\\u5317\\u4eac&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;get_weather&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 29, <span class="string">&#x27;prompt_tokens&#x27;</span>: 161, <span class="string">&#x27;total_tokens&#x27;</span>: 190, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 161&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;478a99d7-5560-430a-9f82-8f2f7ae1b664&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--1267678f-a949-44d4-a980-d8f3e09a4b6e-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;get_weather&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_b7iojoLeBBIQTVuThfk9Mkxu&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 161, <span class="string">&#x27;output_tokens&#x27;</span>: 29, <span class="string">&#x27;total_tokens&#x27;</span>: 190, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;), ToolMessage(content=<span class="string">&#x27;北京天气晴朗 大约22度 湿度30%&#x27;</span>, name=<span class="string">&#x27;get_weather&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;0ef181b1-2988-4c14-a054-6f84c27b103c&#x27;</span>, tool_call_id=<span class="string">&#x27;call_00_b7iojoLeBBIQTVuThfk9Mkxu&#x27;</span>), AIMessage(content=<span class="string">&#x27;根据查询结果，北京今天的天气情况如下：\n\n- **天气状况**：晴朗\n- **温度**：大约22度\n- **湿度**：30%\n\n今天北京的天气很不错，晴朗且温度适宜，是个适合外出活动的好天气！&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 51, <span class="string">&#x27;prompt_tokens&#x27;</span>: 198, <span class="string">&#x27;total_tokens&#x27;</span>: 249, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 198&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;99d0def0-6636-4b59-b479-e417a7973a00&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--e1cf4802-1d6b-48f8-b706-e1a25dcef2f1-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 198, <span class="string">&#x27;output_tokens&#x27;</span>: 51, <span class="string">&#x27;total_tokens&#x27;</span>: 249, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><h1 id="记忆：使用总结技术优化"><a href="#记忆：使用总结技术优化" class="headerlink" title="记忆：使用总结技术优化"></a>记忆：使用总结技术优化</h1><p>注意：长期使用，记忆内容越来越多，会导致超出大模型的上下文窗口</p><ul><li>消息过滤：对旧消息进行类似删除或编辑的操作，目的是为了防止撑爆上下文</li><li>消息总结：对旧消息进行总结，目的一样是为了防止记忆内容过长</li><li>注意对记忆的管理是一项关于召回率和精度的平衡艺术</li></ul><h2 id="方式一：消息过滤（截取对话信息的部分内容）"><a href="#方式一：消息过滤（截取对话信息的部分内容）" class="headerlink" title="方式一：消息过滤（截取对话信息的部分内容）"></a>方式一：消息过滤（截取对话信息的部分内容）</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, StateGraph, START</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">query: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数可以浏览网络。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 模拟一个网络搜索返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;北京天气晴朗 大约22度 湿度30%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [search]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bound_model = model.bind_tools(tools)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回下一个要执行的节点。&quot;&quot;&quot;</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果没有函数调用，则结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line">    <span class="comment"># 否则，如果有函数调用，我们继续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;action&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_messages</span>(<span class="params">messages: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="comment"># 这是一个非常简单的辅助函数，它只使用最后一条消息</span></span><br><span class="line">    <span class="keyword">return</span> messages[-<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    messages = filter_messages(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    response = bound_model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将在其间循环的两个节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为 `agent`</span></span><br><span class="line"><span class="comment"># 这意味着这个节点是第一个被调用的</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用 `agent`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在调用 `agent` 节点后采取的边。</span></span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">    <span class="comment"># 接下来，我们传入路径图 - 此边可能去往的所有可能节点</span></span><br><span class="line">    [<span class="string">&quot;action&quot;</span>, END],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从 `action` 到 `agent` 添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用 `action` 之后，下一步调用 `agent` 节点。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line"><span class="comment"># 这将它编译成一个 LangChain Runnable，</span></span><br><span class="line"><span class="comment"># 意味着你可以像使用任何其他 runnable 一样使用它</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的示例，filter_messages直接截取了对话消息的最后一条，所以即便使用了memory，依然无法记住过往对话，以下调用代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;hi! 我是小黑&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请注意，我们在这里使用了一个辅助函数，它只使用最后一条消息，失去了记忆功能</span></span><br><span class="line"><span class="comment"># 这将导致我们的模型只看到最后一条消息</span></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小黑</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好小黑！很高兴认识你！我是DeepSeek-V3，一个AI助手。有什么我可以帮助你的吗？</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我无法直接知道您的名字，因为我没有访问个人信息的能力。您可以告诉我您的名字，这样我就可以在后续的对话中用名字来称呼您了。</span><br></pre></td></tr></table></figure><h2 id="方式二：消息总结-最常用"><a href="#方式二：消息总结-最常用" class="headerlink" title="方式二：消息总结(最常用)"></a>方式二：消息总结(最常用)</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> SystemMessage, RemoveMessage, HumanMessage</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, StateGraph, START, END</span><br><span class="line"></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将添加一个`summary`属性（除了MessagesState已有的`messages`键之外）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">MessagesState</span>):</span><br><span class="line">    summary: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将使用这个模型进行对话和总结</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="comment"># 如果存在摘要，我们将其作为系统消息添加</span></span><br><span class="line">    summary = state.get(<span class="string">&quot;summary&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> summary:</span><br><span class="line">        system_message = <span class="string">f&quot;之前对话的摘要: <span class="subst">&#123;summary&#125;</span>&quot;</span></span><br><span class="line">        messages = [SystemMessage(content=system_message)] + state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们定义确定是结束还是总结对话的逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: State</span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;summarize_conversation&quot;</span>, END]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回下一个要执行的节点。&quot;&quot;&quot;</span></span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    <span class="comment"># 如果消息超过六条(总对话数，包含人机)，则我们总结对话</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(messages) &gt; <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;summarize_conversation&quot;</span></span><br><span class="line">    <span class="comment"># 否则我们可以直接结束</span></span><br><span class="line">    <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summarize_conversation</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="comment"># 首先，我们总结对话</span></span><br><span class="line">    summary = state.get(<span class="string">&quot;summary&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> summary:</span><br><span class="line">        <span class="comment"># 如果已经存在摘要，我们使用不同的系统提示来总结它</span></span><br><span class="line">        <span class="comment"># 与没有摘要的情况不同</span></span><br><span class="line">        summary_message = (</span><br><span class="line">            <span class="string">f&quot;这是迄今为止对话的摘要: <span class="subst">&#123;summary&#125;</span>\n\n&quot;</span></span><br><span class="line">            <span class="string">&quot;考虑上面的新消息，扩展摘要:&quot;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        summary_message = <span class="string">&quot;创建上述对话的摘要:&quot;</span></span><br><span class="line"></span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>] + [HumanMessage(content=summary_message)]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 现在我们需要删除我们不再想显示的消息</span></span><br><span class="line">    <span class="comment"># 我将删除除最后两条以外的所有消息，但你可以更改这一点</span></span><br><span class="line">    delete_messages = [RemoveMessage(<span class="built_in">id</span>=m.<span class="built_in">id</span>) <span class="keyword">for</span> m <span class="keyword">in</span> state[<span class="string">&quot;messages&quot;</span>][:-<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;summary&quot;</span>: response.content, <span class="string">&quot;messages&quot;</span>: delete_messages&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对话节点和总结节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;conversation&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(summarize_conversation)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为对话</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;conversation&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用`conversation`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在调用`conversation`节点后采取的边。</span></span><br><span class="line">    <span class="string">&quot;conversation&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从`summarize_conversation`到END添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用`summarize_conversation`之后，我们结束。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;summarize_conversation&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级一下print函数以便可以更清晰的看到记忆过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_update</span>(<span class="params">update</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> update.items():</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> v[<span class="string">&quot;messages&quot;</span>]:</span><br><span class="line">            m.pretty_print()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;summary&quot;</span> <span class="keyword">in</span> v:</span><br><span class="line">            <span class="built_in">print</span>(v[<span class="string">&quot;summary&quot;</span>])</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;4&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;hi! 我是小红&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br><span class="line"></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br><span class="line"></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我喜欢AI应用开发!&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小红</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好呀小红！😊 很高兴认识你！我叫DeepSeek-V3，是你的AI助手～有什么我可以帮你的吗？无论是聊天、解答问题还是提供建议，我都会尽力帮你哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你刚刚说你是小红呀！😊 如果这是你喜欢的名字，那我就叫你小红啦～如果需要我记住其他名字或者昵称，也可以告诉我哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我喜欢AI应用开发!</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">太棒了！小红喜欢AI应用开发，这可是一个充满创造力和未来感的领域呢！🚀  </span><br><span class="line"></span><br><span class="line">如果你需要：  </span><br><span class="line">- **学习资源**（比如教程、课程推荐）  </span><br><span class="line">- **工具或框架**（如TensorFlow、PyTorch、LLM应用开发）  </span><br><span class="line">- **项目灵感**（比如趣味小应用或实战案例）  </span><br><span class="line">- **技术问题讨论**（模型训练、部署优化等）  </span><br><span class="line"></span><br><span class="line">或者只是想分享你的想法和作品，我都很乐意一起交流！🤖💡  </span><br><span class="line"></span><br><span class="line">最近有在做什么有趣的AI项目吗？或者对哪个方向特别感兴趣呀？😃</span><br></pre></td></tr></table></figure><p>以上执行结果，人机对话一共6次，代码should_continue中，是对话大于6次才会触发对话总结，因此这次执行结果来看，是没有进行对话总结的，我们可以输出原始对话记录看下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">values = app.get_state(config).values</span><br><span class="line"><span class="built_in">print</span>(values)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;hi! 我是小红&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;8d0e6e51-d6e9-4efc-9693-c5d04cadc37a&#x27;</span>), AIMessage(content=<span class="string">&#x27;你好呀小红！😊 很高兴认识你！我叫DeepSeek-V3，是你的AI助手～有什么我可以帮你的吗？无论是聊天、解答问题还是提供建议，我都会尽力帮你哦！✨&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 43, <span class="string">&#x27;prompt_tokens&#x27;</span>: 9, <span class="string">&#x27;total_tokens&#x27;</span>: 52, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 9&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;6e6881af-870c-4465-b8fe-1d8dc8daf72e&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--4814bca4-85e4-4d02-b6ce-9fbf48b6d2e6-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 9, <span class="string">&#x27;output_tokens&#x27;</span>: 43, <span class="string">&#x27;total_tokens&#x27;</span>: 52, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;), HumanMessage(content=<span class="string">&#x27;我叫什么名字?&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;decc7342-cafa-407d-b8a6-ea8dbd78001f&#x27;</span>), AIMessage(content=<span class="string">&#x27;哈哈，你刚刚说你是小红呀！😊 如果这是你喜欢的名字，那我就叫你小红啦～如果需要我记住其他名字或者昵称，也可以告诉我哦！✨&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 37, <span class="string">&#x27;prompt_tokens&#x27;</span>: 60, <span class="string">&#x27;total_tokens&#x27;</span>: 97, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 60&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b393889e-3089-4097-a35d-d833bc9cf6c0&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--dad889fe-a153-4fa5-9a3e-8229b5933d49-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 60, <span class="string">&#x27;output_tokens&#x27;</span>: 37, <span class="string">&#x27;total_tokens&#x27;</span>: 97, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;), HumanMessage(content=<span class="string">&#x27;我喜欢AI应用开发!&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;3521ae51-a210-4543-a21d-ef5508c874ae&#x27;</span>), AIMessage(content=<span class="string">&#x27;太棒了！小红喜欢AI应用开发，这可是一个充满创造力和未来感的领域呢！🚀  \n\n如果你需要：  \n- **学习资源**（比如教程、课程推荐）  \n- **工具或框架**（如TensorFlow、PyTorch、LLM应用开发）  \n- **项目灵感**（比如趣味小应用或实战案例）  \n- **技术问题讨论**（模型训练、部署优化等）  \n\n或者只是想分享你的想法和作品，我都很乐意一起交流！🤖💡  \n\n最近有在做什么有趣的AI项目吗？或者对哪个方向特别感兴趣呀？😃&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 129, <span class="string">&#x27;prompt_tokens&#x27;</span>: 106, <span class="string">&#x27;total_tokens&#x27;</span>: 235, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 64&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 64, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 42&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a08f5947-137c-495e-af6b-494628d45ae9&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--f7939311-fd82-428e-a050-5e8c61b074e5-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 106, <span class="string">&#x27;output_tokens&#x27;</span>: 129, <span class="string">&#x27;total_tokens&#x27;</span>: 235, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 64&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><p>从以上原始对话内容看到，是没有summary的总结记录</p><p>为了触发总结机制，对话数要超过设置的阈值（6），因此我们在执行一次对话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我更喜欢Python!&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">================================[1m Human Message [0m=================================</span><br><span class="line"></span><br><span class="line">我更喜欢Python!</span><br><span class="line">==================================[1m Ai Message [0m==================================</span><br><span class="line"></span><br><span class="line">👍 Python简直是AI开发的“王牌语言”！生态强大、库丰富，而且写起来像伪代码一样优雅～  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 你可能喜欢的Python AI工具链：</span></span><br><span class="line">- **机器学习**：Scikit-learn、XGBoost  </span><br><span class="line">- **深度学习**：TensorFlow、PyTorch、Keras  </span><br><span class="line">- **自然语言处理**：Hugging Face Transformers、spaCy、NLTK  </span><br><span class="line">- **数据处理**：Pandas、NumPy、Matplotlib  </span><br><span class="line">- **快速原型**：Jupyter Notebook + Colab  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 小建议：</span></span><br><span class="line">如果你用Python做AI开发，强烈试试 **Anaconda** 管理环境，用 **VS Code** 或 **PyCharm** 写代码，再搭配 **Git** 版本控制～  </span><br><span class="line"></span><br><span class="line">最近在尝试什么库或项目吗？可以一起聊聊思路！🐍✨</span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**对话摘要**  </span><br><span class="line">**参与者**：小红（用户）与 DeepSeek-V3（AI助手）  </span><br><span class="line">**主题**：AI应用开发与Python技术偏好  </span><br><span class="line"></span><br><span class="line">**关键内容**：  </span><br><span class="line">1. **自我介绍**：用户自称“小红”，AI助手表示欢迎并提供协助意愿。  </span><br><span class="line">2. **身份确认**：用户询问名字，AI重申用户名为“小红”并支持自定义称呼。  </span><br><span class="line">3. **兴趣表达**：用户明确喜欢AI应用开发，AI推荐学习资源、工具及项目灵感，并邀请分享具体方向。  </span><br><span class="line">4. **技术偏好**：用户强调更偏好Python，AI列举Python在AI领域的核心工具链（如PyTorch、Transformers等），并补充开发环境建议（Anaconda、VS Code等）。  </span><br><span class="line">5. **互动导向**：AI持续鼓励用户分享当前项目或兴趣点，保持开放讨论。  </span><br><span class="line"></span><br><span class="line">**特点**：对话简洁友好，聚焦技术交流，AI主动提供结构化建议并引导深入探讨。  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从执行的输出内容看，已经进行消息的删除以及对话的总结，我们查看下原始对话记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">values = app.get_state(config).values</span><br><span class="line"><span class="built_in">print</span>(values)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;messages&#x27;: [HumanMessage(content=&#x27;我更喜欢Python!&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;7d4f3a28-e18d-494f-a05b-a16063ede5b4&#x27;), AIMessage(content=&#x27;👍 Python简直是AI开发的“王牌语言”！生态强大、库丰富，而且写起来像伪代码一样优雅～  \n\n### 你可能喜欢的Python AI工具链：\n- **机器学习**：Scikit-learn、XGBoost  \n- **深度学习**：TensorFlow、PyTorch、Keras  \n- **自然语言处理**：Hugging Face Transformers、spaCy、NLTK  \n- **数据处理**：Pandas、NumPy、Matplotlib  \n- **快速原型**：Jupyter Notebook + Colab  \n\n### 小建议：\n如果你用Python做AI开发，强烈试试 **Anaconda** 管理环境，用 **VS Code** 或 **PyCharm** 写代码，再搭配 **Git** 版本控制～  \n\n最近在尝试什么库或项目吗？可以一起聊聊思路！🐍✨&#x27;, additional_kwargs=&#123;&#x27;refusal&#x27;: None&#125;, response_metadata=&#123;&#x27;token_usage&#x27;: &#123;&#x27;completion_tokens&#x27;: 178, &#x27;prompt_tokens&#x27;: 243, &#x27;total_tokens&#x27;: 421, &#x27;completion_tokens_details&#x27;: None, &#x27;prompt_tokens_details&#x27;: &#123;&#x27;audio_tokens&#x27;: None, &#x27;cached_tokens&#x27;: 192&#125;, &#x27;prompt_cache_hit_tokens&#x27;: 192, &#x27;prompt_cache_miss_tokens&#x27;: 51&#125;, &#x27;model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;system_fingerprint&#x27;: &#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;, &#x27;id&#x27;: &#x27;046eef7d-7034-4093-8e72-05c2d2c46211&#x27;, &#x27;service_tier&#x27;: None, &#x27;finish_reason&#x27;: &#x27;stop&#x27;, &#x27;logprobs&#x27;: None&#125;, id=&#x27;run--696f424e-0663-4653-a90c-42d156ff4ddb-0&#x27;, usage_metadata=&#123;&#x27;input_tokens&#x27;: 243, &#x27;output_tokens&#x27;: 178, &#x27;total_tokens&#x27;: 421, &#x27;input_token_details&#x27;: &#123;&#x27;cache_read&#x27;: 192&#125;, &#x27;output_token_details&#x27;: &#123;&#125;&#125;)], &#x27;summary&#x27;: &#x27;---\n\n**对话摘要**  \n**参与者**：小红（用户）与 DeepSeek-V3（AI助手）  \n**主题**：AI应用开发与Python技术偏好  \n\n**关键内容**：  \n1. **自我介绍**：用户自称“小红”，AI助手表示欢迎并提供协助意愿。  \n2. **身份确认**：用户询问名字，AI重申用户名为“小红”并支持自定义称呼。  \n3. **兴趣表达**：用户明确喜欢AI应用开发，AI推荐学习资源、工具及项目灵感，并邀请分享具体方向。  \n4. **技术偏好**：用户强调更偏好Python，AI列举Python在AI领域的核心工具链（如PyTorch、Transformers等），并补充开发环境建议（Anaconda、VS Code等）。  \n5. **互动导向**：AI持续鼓励用户分享当前项目或兴趣点，保持开放讨论。  \n\n**特点**：对话简洁友好，聚焦技术交流，AI主动提供结构化建议并引导深入探讨。  \n\n---&#x27;&#125;</span><br></pre></td></tr></table></figure><p>从以上原始对话内容看到，已经有summary的总结记录</p><p>此时由于总结中附带了过往的核心消息，所以我们依然可以进行记忆回顾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你之前说可以叫你「小红」呀～ 😊  </span><br><span class="line">如果你希望换一个名字，随时告诉我！毕竟名字权属于你本人✨</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第三讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>MCP模型上下文协议介绍</title>
    <link href="https://jinglv.github.io/2025/09/16/ai/langchain/11-langchain-mcp/"/>
    <id>https://jinglv.github.io/2025/09/16/ai/langchain/11-langchain-mcp/</id>
    <published>2025-09-15T16:00:00.000Z</published>
    <updated>2025-09-16T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是MCP"><a href="#什么是MCP" class="headerlink" title="什么是MCP"></a>什么是MCP</h1><p><strong>大模型和外部工具交互的标准化协议</strong>，官方网址：<a href="https://modelcontextprotocol.io/docs/getting-started/intro">https://modelcontextprotocol.io/docs/getting-started/intro</a></p><p><strong>模型上下文协议(MCP ModelContextProtocol)正迅速成为AI领域的核心基础设施标准，它通过标准化大语言模型与外部工具的交互方式，解决了AI应用开发中的关键瓶颈，推动了智能体从实验室走向商业化的进程</strong>。这一由Anthropic于2024年11月开源的协议，已被OpenAI、阿里云、腾讯、字节跳动等全球科技巨头广泛采纳，形成了一场静默的AI革命。MCP的流行不仅源于其技术创新，更在于它满足了AI产业从单体智能向互联网络转变的迫切需求，为AI应用的规模化落地提供了关键支撑。</p><p>可以将 MCP 想象成用于 AI 应用程序的 USB-C 端口。正如 USB-C 提供了一种将设备连接到各种外围设备和配件的标准化方式一样，MCP 也提供了一种将 AI 模型连接到不同数据源和工具的标准化方式。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/1748010742017-0e6ed1d9-b0c5-439a-94fc-a725bf009f2d.png" alt="image.png" style="zoom:40%;" /></p><h1 id="MCP原理"><a href="#MCP原理" class="headerlink" title="MCP原理"></a>MCP原理</h1><h2 id="MCP的核心原理"><a href="#MCP的核心原理" class="headerlink" title="MCP的核心原理"></a>MCP的核心原理</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/1748010605284-114cf209-b913-41dd-9613-626138c3796a.png" alt="image.png" style="zoom:60%;" /></p><h2 id="MCP服务应用"><a href="#MCP服务应用" class="headerlink" title="MCP服务应用"></a>MCP服务应用</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/1748010776601-c0d4944f-ea0d-4e0c-a5f3-a1a1bc7167e8.png" alt="image.png" style="zoom:50%;" /></p><p>MCP 的核心原理是将互联网服务（高德、谷歌）或本地操作系统 API（文件系统、数据库、终端）封装成 <strong>AI 智能体能够理解和使用的 Tools 工具</strong>，让 AI 智能体能够自由地调用这些 Tools 工具实现复杂的业务逻辑和功能。</p><p>我们可以在ModelScope市面上的一些各个方面的MCP服务，地址：<a href="https://modelscope.cn/mcp">https://modelscope.cn/mcp</a></p><h1 id="MCP的优势"><a href="#MCP的优势" class="headerlink" title="MCP的优势"></a>MCP的优势</h1><p><strong>解决了智能体开发过程中的关键效率问题</strong></p><p>MCP之所以迅速火爆，首先在于它解决了AI应用开发中的<strong>关键痛点</strong>。传统模式下，大模型与外部工具的集成需要为每个工具单独开发接口，形成了”<strong>M个智能体×N个工具</strong>“的复杂度。</p><p><strong>MCP通过标准化交互规则，将复杂的”M×N”集成简化为”M+N”模式，使开发者只需遵循协议标准，就能实现AI模型与各类工具的即插即用</strong>。这种标准化不仅降低了开发门槛，还提高了系统的可扩展性和互操作性。</p><h1 id="基于MCP的智能体架构"><a href="#基于MCP的智能体架构" class="headerlink" title="基于MCP的智能体架构"></a>基于MCP的智能体架构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[智能体] --&gt; B[大模型]</span><br><span class="line">    A --&gt; C[工具]</span><br><span class="line">    C --&gt; D[本地工具 Function]</span><br><span class="line">    C --&gt; E[远程工具 MCP]</span><br><span class="line">    E --&gt; F[远程MCP Server]</span><br><span class="line">    E --&gt; G[本地MCP Server]</span><br></pre></td></tr></table></figure><h1 id="MCP服务接入示例"><a href="#MCP服务接入示例" class="headerlink" title="MCP服务接入示例"></a>MCP服务接入示例</h1><p>接入MCP核心包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用于自定义MCP开发服务</span></span><br><span class="line">pip install mcp  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">langchian接入mcp服务</span></span><br><span class="line">pip install langchain-mcp-adapters</span><br></pre></td></tr></table></figure><h2 id="高德MCP服务接入与智能体"><a href="#高德MCP服务接入与智能体" class="headerlink" title="高德MCP服务接入与智能体"></a>高德MCP服务接入与智能体</h2><p>高德MCP服务介绍，官方地址：<a href="https://lbs.amap.com/api/mcp-server/summary">https://lbs.amap.com/api/mcp-server/summary</a></p><h3 id="第一步：MCP客户端开发"><a href="#第一步：MCP客户端开发" class="headerlink" title="第一步：MCP客户端开发"></a>第一步：MCP客户端开发</h3><ol><li><p>安装依赖：<code>pip install langchain_mcp_adapters</code></p></li><li><p>获取高德应用key: <a href="https://lbs.amap.com/api/mcp-server/create-project-and-key">https://lbs.amap.com/api/mcp-server/create-project-and-key</a></p></li><li><p>开发高德mcp客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 15:40</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_amap_mcp_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    amap_key = os.environ.get(<span class="string">&quot;AMAP_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;amap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">f&quot;https://mcp.amap.com/sse?key=<span class="subst">&#123;amap_key&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client, tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client, tools = asyncio.run(create_amap_mcp_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看是否创建完成客户端------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(client)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看提供的工具有哪些------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="第二步：创建智能体，集成MCP工具"><a href="#第二步：创建智能体，集成MCP工具" class="headerlink" title="第二步：创建智能体，集成MCP工具"></a>第二步：创建智能体，集成MCP工具</h3><ol><li>获取mcp tools</li><li>创建智能体</li><li>创建提示词</li><li>异步运行智能体</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_amap_mcp_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    amap_key = os.environ.get(<span class="string">&quot;AMAP_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;amap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">f&quot;https://mcp.amap.com/sse?key=<span class="subst">&#123;amap_key&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client, tools</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_run_agent</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建智能体，集成MCP工具&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1.获取mcp tools</span></span><br><span class="line">    client, tools = <span class="keyword">await</span> create_amap_mcp_client()</span><br><span class="line">    <span class="comment"># 2.创建智能体</span></span><br><span class="line">    qv_llm = ChatOpenAI(</span><br><span class="line">        model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">        base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">        api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">        streaming=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,  <span class="comment"># 打开调试模式</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 3.创建提示词</span></span><br><span class="line">    prompt_template = PromptTemplate.from_template(</span><br><span class="line">        <span class="string">&quot;你是一个智能助手，可以调用高德 MCP 工具。\n\n问题: &#123;input&#125;&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    prompt = prompt_template.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;提供北京南站的坐标&quot;</span>)</span><br><span class="line">    <span class="comment"># 4.异步运行智能体</span></span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="基于高德MCP的复杂路径规划-可视化展示"><a href="#基于高德MCP的复杂路径规划-可视化展示" class="headerlink" title="基于高德MCP的复杂路径规划+可视化展示"></a>基于高德MCP的复杂路径规划+可视化展示</h2><p>增加文件工具及扩展智能体工具，文件工具需要安装依赖:<code>pip install langchain_community</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_amap_mcp_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    amap_key = os.environ.get(<span class="string">&quot;AMAP_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;amap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">f&quot;https://mcp.amap.com/sse?key=<span class="subst">&#123;amap_key&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client, tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_community.agent_toolkits <span class="keyword">import</span> FileManagementToolkit</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_run_agent</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建智能体，集成MCP工具&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1.获取mcp tools</span></span><br><span class="line">    client, tools = <span class="keyword">await</span> create_amap_mcp_client()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加获取文件工具</span></span><br><span class="line">    file_toolkit = FileManagementToolkit(root_dir=<span class="string">&quot;/Users/jinglv/PycharmProjects/ai-agent-dev/temp&quot;</span>)</span><br><span class="line">    file_tools = file_toolkit.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.创建智能体</span></span><br><span class="line">    qv_llm = ChatOpenAI(</span><br><span class="line">        model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">        base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">        api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">        streaming=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools + file_tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,  <span class="comment"># 打开调试模式</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 3.创建提示词</span></span><br><span class="line">    prompt_template = PromptTemplate.from_template(</span><br><span class="line">        <span class="string">&quot;你是一个智能助手，可以调用高德 MCP 工具。\n\n问题: &#123;input&#125;&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    prompt = prompt_template.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    目标：</span></span><br><span class="line"><span class="string">    - 明天上午10点我要从北京南站到北京望京SOHO</span></span><br><span class="line"><span class="string">    - 线路选择：公路地址或打车</span></span><br><span class="line"><span class="string">    - 考虑出行时间和路线，以及天气状况和穿衣建议</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    要求:</span></span><br><span class="line"><span class="string">    - 制作网页来展示出现线路和位置，输出一个HTML页面，将网页保存到：/Users/jinglv/PycharmProjects/ai-agent-dev/temp目录下</span></span><br><span class="line"><span class="string">    - 网页使用简约美观的页面风格，以及卡片展示</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 4.异步运行智能体</span></span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client, tools = asyncio.run(create_amap_mcp_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看是否创建完成客户端------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(client)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看提供的工具有哪些------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line">    res = asyncio.run(create_run_agent())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------智能体结合MCP客户端执行结果------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangChain学习笔记第十一讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/tags/LangChain/"/>
    
  </entry>
  
  <entry>
    <title>MCP通信方式</title>
    <link href="https://jinglv.github.io/2025/09/16/ai/langchain/12-langchain-mcp-protocol/"/>
    <id>https://jinglv.github.io/2025/09/16/ai/langchain/12-langchain-mcp-protocol/</id>
    <published>2025-09-15T16:00:00.000Z</published>
    <updated>2025-09-16T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三种MCP通讯方式"><a href="#三种MCP通讯方式" class="headerlink" title="三种MCP通讯方式"></a>三种MCP通讯方式</h1><p>MCP（Model Context Protocol）协议目前支持<strong>三种主要通信方式</strong>，分别是：</p><h2 id="stdio（标准输入输出）"><a href="#stdio（标准输入输出）" class="headerlink" title="stdio（标准输入输出）"></a><code>stdio</code>（标准输入输出）</h2><ul><li><p>工作原理：</p><p>通过本地进程的标准输入（stdin）和标准输出（stdout）进行通信。客户端以子进程的形式启动MCP服务器，双方通过管道交换JSON-RPC格式的消息，消息以换行符分隔。</p></li><li><p>适用场景：</p><ul><li>本地进程间通信（如命令行工具、文件系统操作）。</li><li>简单的批处理任务或工具调用。</li></ul></li><li><p>优点：</p><ul><li>实现简单，低延迟。</li><li>无需网络配置，适合本地开发。</li></ul></li><li><p>限制：</p><ul><li>仅限本地使用，不支持分布式部署。</li><li>服务端不能输出控制台日志（会污染协议流）。</li></ul></li><li><p>示例配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;math&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;command&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">        <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;/absolute/path/to/math_server.py&quot;</span>],</span><br><span class="line">        <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;stdio&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="SSE（Server-Sent-Events）"><a href="#SSE（Server-Sent-Events）" class="headerlink" title="SSE（Server-Sent Events）"></a><code>SSE</code>（Server-Sent Events）</h2><ul><li><p>工作原理：</p><p>基于HTTP长连接实现服务器到客户端的单向消息推送。客户端通过<code>GET /sse</code>建立长连接，服务器通过SSE流发送JSON-RPC消息；客户端通过<code>POST /message</code>发送请求或响应。</p></li><li><p>适用场景：</p><ul><li>远程服务调用（如云服务、多客户端监控）。</li><li>需要实时数据推送的场景（如对话式AI的流式输出）。</li></ul></li><li><p>优点：</p><ul><li>支持实时单向推送，适合流式交互。</li></ul></li><li><p>限制：</p><ul><li><strong>已逐步被弃用</strong>（2025年3月后被Streamable HTTP取代）。</li><li>连接中断后无法恢复，需重新建立。</li><li>服务器需维持长连接，资源消耗较高。</li></ul></li><li><p>示例配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;weather&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://localhost:8000/sse&quot;</span>,</span><br><span class="line">        <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Streamable-HTTP（流式HTTP）"><a href="#Streamable-HTTP（流式HTTP）" class="headerlink" title="Streamable HTTP（流式HTTP）"></a><code>Streamable HTTP</code>（流式HTTP）</h2><ul><li><p>工作原理：</p><p>2025年3月引入的新传输方式，替代了SSE。通过统一的/message端点实现双向通信，支持以下特性：</p><ul><li>客户端通过HTTP POST发送请求（如工具调用）。</li><li>服务器可将响应升级为SSE流式传输（当需要时）。</li><li>支持无状态模式（Stateless Server），无需维持长连接。</li></ul></li><li><p>适用场景：</p><ul><li>高并发远程服务调用。</li><li>需要灵活流式响应的场景（如AI助手的动态输出）。</li></ul></li><li><p>优点：</p><ul><li>解决SSE的缺陷：<ul><li>支持连接恢复（无需重新开始）。</li><li>无需服务器维持长连接，降低资源压力。</li><li>统一端点（/message），简化接口设计。</li></ul></li><li>兼容基础设施（如中间件、负载均衡）。</li></ul></li><li><p>推荐使用：</p><p>当前MCP官方推荐的传输方式，尤其适合生产环境和云服务。</p></li><li><p>示例配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;weather&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://localhost:8000/mcp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;streamable_http&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="实现基于stdio的mcp服务"><a href="#实现基于stdio的mcp服务" class="headerlink" title="实现基于stdio的mcp服务"></a>实现基于stdio的mcp服务</h1><p>stdio模式mcp服务架构：</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250916171800738.png" alt="image-20250916171800738" style="zoom:50%;" /></p><h2 id="第一步：创建mcp-server（包含工具能力）"><a href="#第一步：创建mcp-server（包含工具能力）" class="headerlink" title="第一步：创建mcp server（包含工具能力）"></a>第一步：创建mcp server（包含工具能力）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 17:19</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Match Tools&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Multiply two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mcp.run(transport=<span class="string">&quot;stdio&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码包含两部分内容：</p><ol><li>使用<code>@mcp.tool()</code>装饰器注册的 mcp 工具方法；</li><li>使用 <code>mcp.run(transport=&quot;stdio&quot;)</code>启动 stdio mcp 服务。</li></ol><h2 id="第二步：启动mcp-server"><a href="#第二步：启动mcp-server" class="headerlink" title="第二步：启动mcp server"></a>第二步：启动mcp server</h2><p>找到 mcp server 所在文件夹，使用 python 命令启动服务（相当于启动了对 IO 流中 read 和 write 事件的监听）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(.venv) jinglv@localhost ai-agent-dev % python demo/mcp/stdio/mcp_stdio_server.py</span><br></pre></td></tr></table></figure><p>启动后，一直处于监听状态</p><h2 id="第三步：开发mcp-client（包含智能体）"><a href="#第三步：开发mcp-client（包含智能体）" class="headerlink" title="第三步：开发mcp client（包含智能体）"></a>第三步：开发mcp client（包含智能体）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 17:25</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.tools <span class="keyword">import</span> load_mcp_tools</span><br><span class="line"><span class="keyword">from</span> mcp <span class="keyword">import</span> StdioServerParameters, ClientSession</span><br><span class="line"><span class="keyword">from</span> mcp.client.stdio <span class="keyword">import</span> stdio_client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">qv_llm = ChatOpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_mcp_stdio_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义stdio server参数</span></span><br><span class="line">    server_params = StdioServerParameters(</span><br><span class="line">        command=<span class="string">&quot;python&quot;</span>,</span><br><span class="line">        args=[<span class="string">&quot;/Users/jinglv/PycharmProjects/ai-agent-dev/demo/mcp/stdio/mcp_stdio_server.py&quot;</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 stdio mcp tools</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> stdio_client(server_params) <span class="keyword">as</span> (read, write):</span><br><span class="line">        <span class="comment"># 设置会话，并初始化</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> ClientSession(read, write) <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">await</span> session.initialize()</span><br><span class="line">            tools = <span class="keyword">await</span> load_mcp_tools(session)</span><br><span class="line">            <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 定义智能体，加载 mcp tools</span></span><br><span class="line">            agent = initialize_agent(</span><br><span class="line">                tools=tools,</span><br><span class="line">                llm=qv_llm,</span><br><span class="line">                agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">                verbose=<span class="literal">True</span>,</span><br><span class="line">            )</span><br><span class="line">            res = <span class="keyword">await</span> agent.ainvoke(<span class="string">&quot;100+100=?&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = asyncio.run(create_mcp_stdio_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行结果：<span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：stdio方式是可以不启动mcp server的，在客户端定义stdio server参数会加载进去的</p><h1 id="实现基于sse的mcp服务"><a href="#实现基于sse的mcp服务" class="headerlink" title="实现基于sse的mcp服务"></a>实现基于sse的mcp服务</h1><p>注意：sse已被官方废弃，优先使用streamable-http，两者从代码层面来看，差异不大</p><p>sse/streamable-http模式mcp服务架构：</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250916184135754.png" alt="image-20250916184135754" style="zoom:50%;" /></p><h2 id="第一步：创建mcp-server端"><a href="#第一步：创建mcp-server端" class="headerlink" title="第一步：创建mcp server端"></a>第一步：创建mcp server端</h2><p>与stdio的区别，是将MCP启动修改为sse：transport=”stdio”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:43</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Match Tools&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Multiply two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mcp.run(transport=<span class="string">&quot;sse&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二步：启动mcp-server-1"><a href="#第二步：启动mcp-server-1" class="headerlink" title="第二步：启动mcp server"></a>第二步：启动mcp server</h2><p>注意：这个是基于网络协议的，需要启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(.venv) jinglv@localhost ai-agent-dev % python demo/mcp/sse/mcp_sse_server.py </span><br></pre></td></tr></table></figure><p>启动服务会暴露一个端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Started server process [36603]</span><br><span class="line">INFO:     Waiting <span class="keyword">for</span> application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第三步：开发mcp-client（包含智能体）-1"><a href="#第三步：开发mcp-client（包含智能体）-1" class="headerlink" title="第三步：开发mcp client（包含智能体）"></a>第三步：开发mcp client（包含智能体）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:45</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">qv_llm = ChatOpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_mcp_sse_client</span>():</span><br><span class="line">    <span class="comment"># 创建MCP客户端</span></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;mcp&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(<span class="string">&quot;100+100=?&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = asyncio.run(create_mcp_sse_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行结果：<span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="实现基于streamable-http的mcp服务"><a href="#实现基于streamable-http的mcp服务" class="headerlink" title="实现基于streamable_http的mcp服务"></a>实现基于streamable_http的mcp服务</h1><p>注意：sse已被官方废弃，优先使用streamable-http，两者从代码层面来看，差异不大，和sse的区别也只是服务启动方式和创建客户端方式有差异其他基本一致</p><h2 id="mcp-server端"><a href="#mcp-server端" class="headerlink" title="mcp server端"></a>mcp server端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:54</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Match Tools&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Multiply two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mcp.run(transport=<span class="string">&quot;streamable-http&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mcp-client端（包含智能体）"><a href="#mcp-client端（包含智能体）" class="headerlink" title="mcp client端（包含智能体）"></a>mcp client端（包含智能体）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:54</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">qv_llm = ChatOpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_mcp_streamable_http_client</span>():</span><br><span class="line">    <span class="comment"># 创建MCP客户端</span></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;mcp&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/mcp&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;streamable_http&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(<span class="string">&quot;100+100=?&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = asyncio.run(create_mcp_streamable_http_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行结果：<span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><h2 id="工具转换为MCP服务"><a href="#工具转换为MCP服务" class="headerlink" title="工具转换为MCP服务"></a>工具转换为MCP服务</h2><p>以上示例使用FastMCP定义工具，也可以使用langchain_mcp_adapters.tools.to_fastmcp` 用于将 LangChain 工具转换为 FastMCP 的服务</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.tools <span class="keyword">import</span> to_fastmcp</span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将两个数字相加&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将工具转换为mcp服务</span></span><br><span class="line">fastmcp_tool = to_fastmcp(add)</span><br><span class="line"><span class="comment"># 创建mcp服务，使用tools参数注入转换后的工具</span></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Math&quot;</span>, tools=[fastmcp_tool])</span><br><span class="line">mcp.run(transport=<span class="string">&quot;stdio&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="MCP在工作流中的使用"><a href="#MCP在工作流中的使用" class="headerlink" title="MCP在工作流中的使用"></a>MCP在工作流中的使用</h2><p>以上的示例是介绍了MCP在Agent中的使用，下面的示例是介绍MCP在工作流中的使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/10/9 10:04</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dotenv</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载.env文件中的环境变量</span></span><br><span class="line">dotenv.load_dotenv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MCPGraphAgent</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, mcp_config: <span class="built_in">dict</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化MCP Graph Agent</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            mcp_config: MCP客户端配置</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 初始化语言模型</span></span><br><span class="line">        <span class="variable language_">self</span>.model = ChatOpenAI(</span><br><span class="line">            model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">            base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">            api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">            streaming=<span class="literal">True</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 配置并启动多个 MCP 工具服务客户端</span></span><br><span class="line">        <span class="variable language_">self</span>.client = MultiServerMCPClient(mcp_config)</span><br><span class="line">        <span class="variable language_">self</span>.tools = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.model_with_tools = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.tool_node = <span class="literal">None</span></span><br><span class="line">        <span class="variable language_">self</span>.graph = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">initialize</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化agent，获取工具并构建图结构</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 异步获取工具列表（通过 MCP 协议从服务端动态获取工具定义）</span></span><br><span class="line">        <span class="variable language_">self</span>.tools = <span class="keyword">await</span> <span class="variable language_">self</span>.client.get_tools()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;工具列表：&quot;</span>, <span class="variable language_">self</span>.tools)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 将工具绑定到模型，使其具备调用工具的能力</span></span><br><span class="line">        <span class="variable language_">self</span>.model_with_tools = <span class="variable language_">self</span>.model.bind_tools(<span class="variable language_">self</span>.tools)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 创建 ToolNode，用于根据模型生成的 tool_calls 实际调用工具</span></span><br><span class="line">        <span class="variable language_">self</span>.tool_node = ToolNode(<span class="variable language_">self</span>.tools)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 构建状态图（StateGraph）</span></span><br><span class="line">        builder = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加节点：模型调用节点</span></span><br><span class="line">        builder.add_node(<span class="string">&quot;call_model&quot;</span>, <span class="variable language_">self</span>._call_model)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加节点：工具调用节点（通过 MCP 执行工具）</span></span><br><span class="line">        builder.add_node(<span class="string">&quot;tools&quot;</span>, <span class="variable language_">self</span>.tool_node)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加边：从起始节点 START 跳转到模型调用节点</span></span><br><span class="line">        builder.add_edge(START, <span class="string">&quot;call_model&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加条件边：根据模型输出决定下一步跳转到工具调用或结束</span></span><br><span class="line">        builder.add_conditional_edges(</span><br><span class="line">            <span class="string">&quot;call_model&quot;</span>,</span><br><span class="line">            <span class="variable language_">self</span>._should_continue,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加边：工具调用完成后继续调用模型（形成循环，直到无需再调用工具）</span></span><br><span class="line">        builder.add_edge(<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;call_model&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 编译图结构</span></span><br><span class="line">        <span class="variable language_">self</span>.graph = builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_should_continue</span>(<span class="params">self, state: MessagesState</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        条件判断函数：判断模型响应是否包含 tool_calls（即是否需要调用工具）</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">        last_message = messages[-<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">if</span> last_message.tool_calls:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;tools&quot;</span>  <span class="comment"># 如果包含工具调用请求，跳转到 tools 节点执行</span></span><br><span class="line">        <span class="keyword">return</span> END  <span class="comment"># 否则流程结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">_call_model</span>(<span class="params">self, state: MessagesState</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        模型调用函数：向模型发送历史消息并获取响应</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">        response = <span class="keyword">await</span> <span class="variable language_">self</span>.model_with_tools.ainvoke(messages)</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">query</span>(<span class="params">self, content: <span class="built_in">str</span></span>) -&gt; <span class="built_in">dict</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        执行查询</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            content: 查询内容</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            查询结果</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.graph:</span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&quot;Agent未初始化，请先调用initialize()方法&quot;</span>)</span><br><span class="line"></span><br><span class="line">        response = <span class="keyword">await</span> <span class="variable language_">self</span>.graph.ainvoke(</span><br><span class="line">            &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: content&#125;]&#125;</span><br><span class="line">        )</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="comment"># MCP配置</span></span><br><span class="line">    mcp_config = &#123;</span><br><span class="line">        <span class="string">&quot;math&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;python&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [<span class="string">&quot;/Users/jinglv/PycharmProjects/ai-agent-dev/demo/mcp/stdio/mcp_stdio_server.py&quot;</span>],</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;stdio&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建并初始化agent</span></span><br><span class="line">    agent = MCPGraphAgent(mcp_config)</span><br><span class="line">    <span class="keyword">await</span> agent.initialize()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 测试图流程：提问数学问题，模型应识别并调用 math 工具</span></span><br><span class="line">    math_response = <span class="keyword">await</span> agent.query(<span class="string">&quot;计算一下 (3 + 5) x 12的结果？&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;math_response:&quot;</span>, math_response)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line">    asyncio.run(main())</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangChain学习笔记第十二讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/tags/LangChain/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库检索（搜索）、度量类型和条件过滤</title>
    <link href="https://jinglv.github.io/2025/09/02/ai/rag/23-vector-db-action/"/>
    <id>https://jinglv.github.io/2025/09/02/ai/rag/23-vector-db-action/</id>
    <published>2025-09-01T16:00:00.000Z</published>
    <updated>2025-09-02T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Milvus混合检索实战"><a href="#Milvus混合检索实战" class="headerlink" title="Milvus混合检索实战"></a>Milvus混合检索实战</h1><h2 id="稠密向量"><a href="#稠密向量" class="headerlink" title="稠密向量"></a>稠密向量</h2><p>稠密向量通常表示为<strong>具有固定长度的浮点数数组</strong>，例如[0.2, 0.7, 0.1, 0.8, 0.3, …, 0.5]。这些向量的维数通常在数百到数千之间，例如 128、256、768 或 1024。每个维度都捕获对象的特定语义特征，使其通过相似度计算适用于各种场景。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090321879.png" alt="image-20250902090321879" style="zoom:50%;" /></p><ul><li>定义：由固定长度的浮点数数组表示，如﻿$[0.2,0.7,0.1,0.8,0.3,…,0.5]$﻿</li><li>维度范围：通常在数百到数千之间（如128/256/768/1024维）</li><li>特性：每个维度捕获对象的特定语义特征，通过相似度计算适用于多种场景</li><li>语义表示：坐标值表示语义维度强度，点间距反映语义相似度（越近越相似）</li></ul><h2 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h2><p>稀疏向量的特点是<strong>向量维数高且非零值较少</strong>。这种结构使其特别适合传统的信息检索应用。在大多数情况下，稀疏向量中使用的维度数对应于一种或多种语言中的不同标记。每个维度都被赋予一个值，该值指示该标记在文档中的相对重要性。这种布局对于涉及文本匹配的任务非常有利。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090518281.png" alt="image-20250902090518281" style="zoom:80%;" /></p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090551605.png" alt="image-20250902090551605" style="zoom:67%;" /></p><ul><li>特点：维度数高但非零值少，传统信息检索中常用</li><li>表示方式：<ul><li>早期：二进制表示（0/1）</li><li>现代：通过机器学习习得的实数值（如﻿$\{2:0.2,…,9997:0.5,9999:0.7\}$﻿）</li></ul></li><li>适用场景：文本匹配任务，维度对应语言中的不同标记，值表示标记在文档中的相对重要性</li></ul><h2 id="混合检索"><a href="#混合检索" class="headerlink" title="混合检索"></a>混合检索</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090904917.png" alt="image-20250902090904917" style="zoom:67%;" /></p><p>工作流程：</p><ol><li>通过嵌入模型（如BERT和Transformers）生成密集向量。</li><li>通过BM25、BGE-M3、SPLADE等嵌入模型生成稀疏向量。（可以使用 Function生成稀疏向量）</li><li>创建一个集合并定义包含密集和稀疏矢量场的集合模式。</li><li>将稀疏密集向量插入到上一步刚刚创建的集合中。</li><li>进行混合搜索：对密集向量进行 ANN 搜索将返回一组前 K 个最相似的结果，对稀疏向量进行文本匹配也将返回一组前 K 个结果。</li><li>归一化：将两组top-K结果的得分进行归一化，将得分转换到[0,1]之间的范围。</li><li>选择合适的<strong>重排序</strong>策略，对两组top-K结果进行合并、重排序，最终返回一组top-K结果。</li></ol><p>重排序</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902091114481.png" alt="image-20250902091114481" style="zoom:67%;" /></p><p>优势：同时保留密集向量的语义相似度和稀疏向量的关键字查询优势</p><h2 id="实战代码（说明）"><a href="#实战代码（说明）" class="headerlink" title="实战代码（说明）"></a>实战代码（说明）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/2 09:15</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> (</span><br><span class="line">    connections,</span><br><span class="line">    utility,</span><br><span class="line">    FieldSchema,</span><br><span class="line">    CollectionSchema,</span><br><span class="line">    DataType,</span><br><span class="line">    Collection,</span><br><span class="line">    AnnSearchRequest,</span><br><span class="line">    WeightedRanker</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> pymilvus.exceptions <span class="keyword">import</span> MilvusException</span><br><span class="line"><span class="keyword">from</span> pymilvus.model.hybrid <span class="keyword">import</span> BGEM3EmbeddingFunction  <span class="comment"># pip install &quot;pymilvus[model]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0. 配置 (方便修改)</span></span><br><span class="line">DATA_PATH = <span class="string">&quot;../../../data/灭神纪/战斗场景.json&quot;</span></span><br><span class="line">COLLECTION_NAME = <span class="string">&quot;wukong_hybrid_v4&quot;</span>  <span class="comment"># 使用新的集合名以避免旧数据冲突</span></span><br><span class="line">MILVUS_URI = <span class="string">&quot;http://82.157.193.65:19530&quot;</span>  <span class="comment"># 使用新的数据库文件</span></span><br><span class="line">BATCH_SIZE = <span class="number">50</span>  <span class="comment"># 可以尝试减小批次大小，例如 10 或 20，进行测试</span></span><br><span class="line">DEVICE = <span class="string">&quot;cpu&quot;</span>  <span class="comment"># 或者 &quot;cuda&quot; 如果有GPU并已正确配置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;脚本开始执行...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1. 正在从 <span class="subst">&#123;DATA_PATH&#125;</span> 加载数据...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(DATA_PATH, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = json.load(f)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误: 数据文件 <span class="subst">&#123;DATA_PATH&#125;</span> 未找到。请检查路径。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">except</span> json.JSONDecodeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误: 数据文件 <span class="subst">&#123;DATA_PATH&#125;</span> JSON 格式错误。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">docs = []</span><br><span class="line">metadata = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataset.get(<span class="string">&#x27;data&#x27;</span>, []):  <span class="comment"># 使用 .get 避免 &#x27;data&#x27; 键不存在的错误</span></span><br><span class="line">    text_parts = [item.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;&#x27;</span>), item.get(<span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;&#x27;</span>)]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;combat_details&#x27;</span> <span class="keyword">in</span> item <span class="keyword">and</span> <span class="built_in">isinstance</span>(item[<span class="string">&#x27;combat_details&#x27;</span>], <span class="built_in">dict</span>):</span><br><span class="line">        text_parts.extend(item[<span class="string">&#x27;combat_details&#x27;</span>].get(<span class="string">&#x27;combat_style&#x27;</span>, []))</span><br><span class="line">        text_parts.extend(item[<span class="string">&#x27;combat_details&#x27;</span>].get(<span class="string">&#x27;abilities_used&#x27;</span>, []))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;scene_info&#x27;</span> <span class="keyword">in</span> item <span class="keyword">and</span> <span class="built_in">isinstance</span>(item[<span class="string">&#x27;scene_info&#x27;</span>], <span class="built_in">dict</span>):</span><br><span class="line">        text_parts.extend([</span><br><span class="line">            item[<span class="string">&#x27;scene_info&#x27;</span>].get(<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            item[<span class="string">&#x27;scene_info&#x27;</span>].get(<span class="string">&#x27;environment&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            item[<span class="string">&#x27;scene_info&#x27;</span>].get(<span class="string">&#x27;time_of_day&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        ])</span><br><span class="line">    <span class="comment"># 过滤掉 None 和空字符串，然后连接</span></span><br><span class="line">    docs.append(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">filter</span>(<span class="literal">None</span>, [<span class="built_in">str</span>(part).strip() <span class="keyword">for</span> part <span class="keyword">in</span> text_parts <span class="keyword">if</span> part])))</span><br><span class="line">    metadata.append(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> docs:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误: 未能从数据文件中加载任何文档。请检查文件内容和结构。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据加载完成，共 <span class="subst">&#123;<span class="built_in">len</span>(docs)&#125;</span> 条文档。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成向量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. 正在生成向量...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ef = BGEM3EmbeddingFunction(use_fp16=<span class="literal">False</span>, device=DEVICE)</span><br><span class="line">    docs_to_embed = docs</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;将为 <span class="subst">&#123;<span class="built_in">len</span>(docs_to_embed)&#125;</span> 条文档生成向量...&quot;</span>)</span><br><span class="line">    docs_embeddings = ef(docs_to_embed)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;向量生成完成。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  密集向量维度: <span class="subst">&#123;ef.dim[<span class="string">&#x27;dense&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;sparse&quot;</span> <span class="keyword">in</span> docs_embeddings <span class="keyword">and</span> docs_embeddings[<span class="string">&quot;sparse&quot;</span>].shape[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  稀疏向量类型 (整体): <span class="subst">&#123;<span class="built_in">type</span>(docs_embeddings[<span class="string">&#x27;sparse&#x27;</span>])&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment">#  打印第一个稀疏向量的形状和部分内容以供检查</span></span><br><span class="line">        first_sparse_vector_row_obj = docs_embeddings[<span class="string">&#x27;sparse&#x27;</span>][<span class="number">0</span>]  <span class="comment"># 这会得到一个表示单行的稀疏数组对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (行对象类型): <span class="subst">&#123;<span class="built_in">type</span>(first_sparse_vector_row_obj)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (行对象形状): <span class="subst">&#123;first_sparse_vector_row_obj.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj, <span class="string">&#x27;col&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分列索引/col): <span class="subst">&#123;first_sparse_vector_row_obj.col[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分数据/data): <span class="subst">&#123;first_sparse_vector_row_obj.data[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj, <span class="string">&#x27;indices&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj,</span><br><span class="line">                                                                         <span class="string">&#x27;data&#x27;</span>):  <span class="comment"># Fallback for other types</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分索引/indices): <span class="subst">&#123;first_sparse_vector_row_obj.indices[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分数据/data): <span class="subst">&#123;first_sparse_vector_row_obj.data[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  无法直接获取第一个稀疏向量的列索引和数据属性。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;警告: 未生成稀疏向量或稀疏向量为空。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;生成向量时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 连接Milvus</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;3. 正在连接 Milvus (URI: <span class="subst">&#123;MILVUS_URI&#125;</span>)...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    connections.connect(uri=MILVUS_URI)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功连接到 Milvus。&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;连接 Milvus 失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 创建集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;4. 正在准备集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">fields = [</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;pk&quot;</span>, dtype=DataType.VARCHAR, is_primary=<span class="literal">True</span>, auto_id=<span class="literal">True</span>, max_length=<span class="number">100</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;text&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">65535</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;id&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">100</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;title&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">512</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;category&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">128</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;location&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">256</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;environment&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">128</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;sparse_vector&quot;</span>, dtype=DataType.SPARSE_FLOAT_VECTOR),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;dense_vector&quot;</span>, dtype=DataType.FLOAT_VECTOR, dim=ef.dim[<span class="string">&quot;dense&quot;</span>])</span><br><span class="line">]</span><br><span class="line">schema = CollectionSchema(fields, description=<span class="string">&quot;Wukong Hybrid Search Collection v4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> utility.has_collection(COLLECTION_NAME):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 已存在，正在删除...&quot;</span>)</span><br><span class="line">        utility.drop_collection(COLLECTION_NAME)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 删除成功。&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在创建集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">    collection = Collection(name=COLLECTION_NAME, schema=schema, consistency_level=<span class="string">&quot;Strong&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 创建成功。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在为 sparse_vector 创建索引 (SPARSE_INVERTED_INDEX, IP)...&quot;</span>)</span><br><span class="line">    collection.create_index(<span class="string">&quot;sparse_vector&quot;</span>, &#123;<span class="string">&quot;index_type&quot;</span>: <span class="string">&quot;SPARSE_INVERTED_INDEX&quot;</span>, <span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sparse_vector 索引创建成功。&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在为 dense_vector 创建索引 (AUTOINDEX, IP)...&quot;</span>)</span><br><span class="line">    collection.create_index(<span class="string">&quot;dense_vector&quot;</span>, &#123;<span class="string">&quot;index_type&quot;</span>: <span class="string">&quot;AUTOINDEX&quot;</span>, <span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dense_vector 索引创建成功。&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在加载集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">    collection.load()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 加载成功。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;创建或加载集合/索引时发生 Milvus 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;创建或加载集合/索引时发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 插入数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5. 正在准备插入数据...&quot;</span>)</span><br><span class="line">num_docs_to_insert = <span class="built_in">len</span>(docs_to_embed)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_docs_to_insert, BATCH_SIZE):</span><br><span class="line">        end_idx = <span class="built_in">min</span>(i + BATCH_SIZE, num_docs_to_insert)</span><br><span class="line">        batch_data = []</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  正在准备批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> (索引 <span class="subst">&#123;i&#125;</span> 到 <span class="subst">&#123;end_idx - <span class="number">1</span>&#125;</span>)...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, end_idx):</span><br><span class="line">            item_metadata = metadata[j]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 关键：转换稀疏向量格式</span></span><br><span class="line">            <span class="comment"># 当从 csr_array 索引一行时，可能得到 coo_array 或其他稀疏格式</span></span><br><span class="line">            sparse_row_obj = docs_embeddings[<span class="string">&quot;sparse&quot;</span>][j]</span><br><span class="line">            <span class="comment"># coo_array 使用 .col 和 .data</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;col&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">                milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx_col): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx_col, val <span class="keyword">in</span></span><br><span class="line">                                        <span class="built_in">zip</span>(sparse_row_obj.col, sparse_row_obj.data)&#125;</span><br><span class="line">            <span class="comment"># csr_array (如果直接是行 csr_array) 使用 .indices 和 .data</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;indices&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">                milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx_col): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx_col, val <span class="keyword">in</span></span><br><span class="line">                                        <span class="built_in">zip</span>(sparse_row_obj.indices, sparse_row_obj.data)&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;警告: 无法识别的稀疏行对象类型 <span class="subst">&#123;<span class="built_in">type</span>(sparse_row_obj)&#125;</span> 在索引 <span class="subst">&#123;j&#125;</span>。跳过此条。&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 或者引发错误</span></span><br><span class="line"></span><br><span class="line">            doc_text = docs_to_embed[j]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(doc_text) &gt; <span class="number">65530</span>:</span><br><span class="line">                doc_text = doc_text[:<span class="number">65530</span>]</span><br><span class="line"></span><br><span class="line">            title_text = item_metadata.get(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;N/A&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(title_text) &gt; <span class="number">500</span>:</span><br><span class="line">                title_text = title_text[:<span class="number">500</span>]</span><br><span class="line"></span><br><span class="line">            batch_data.append(&#123;</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: doc_text,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="built_in">str</span>(item_metadata.get(<span class="string">&quot;id&quot;</span>, <span class="string">f&quot;unknown_id_<span class="subst">&#123;j&#125;</span>&quot;</span>)),</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: title_text,</span><br><span class="line">                <span class="string">&quot;category&quot;</span>: item_metadata.get(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;N/A&quot;</span>),</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: item_metadata.get(<span class="string">&quot;scene_info&quot;</span>, &#123;&#125;).get(<span class="string">&quot;location&quot;</span>, <span class="string">&quot;N/A&quot;</span>),</span><br><span class="line">                <span class="string">&quot;environment&quot;</span>: item_metadata.get(<span class="string">&quot;scene_info&quot;</span>, &#123;&#125;).get(<span class="string">&quot;environment&quot;</span>, <span class="string">&quot;N/A&quot;</span>),</span><br><span class="line">                <span class="string">&quot;sparse_vector&quot;</span>: milvus_sparse_vector,</span><br><span class="line">                <span class="string">&quot;dense_vector&quot;</span>: docs_embeddings[<span class="string">&quot;dense&quot;</span>][j].tolist()</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> batch_data:  <span class="comment"># 如果批次中所有稀疏向量都无法处理</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> 为空，跳过插入。&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  正在插入批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> (<span class="subst">&#123;<span class="built_in">len</span>(batch_data)&#125;</span> 条记录)...&quot;</span>)</span><br><span class="line">        insert_result = collection.insert(batch_data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> 插入成功, 主键: <span class="subst">&#123;insert_result.primary_keys[:<span class="number">5</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">        collection.flush()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> flush 完成。&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;所有数据插入完成。总共 <span class="subst">&#123;collection.num_entities&#125;</span> 条实体。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;插入数据时发生 Milvus 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;batch_data&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> batch_data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;问题批次的第一条数据（部分）:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Text: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;text&#x27;</span>][:<span class="number">100</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  ID: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Title: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;title&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;插入数据时发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;batch_data&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> batch_data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;问题批次的第一条数据（部分）:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Text: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;text&#x27;</span>][:<span class="number">100</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 混合搜索 (示例)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hybrid_search</span>(<span class="params">query, category=<span class="literal">None</span>, environment=<span class="literal">None</span>, limit=<span class="number">5</span>, weights=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> weights <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        weights = &#123;<span class="string">&quot;sparse&quot;</span>: <span class="number">0.5</span>, <span class="string">&quot;dense&quot;</span>: <span class="number">0.5</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n6. 执行混合搜索: &#x27;<span class="subst">&#123;query&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;   Category: <span class="subst">&#123;category&#125;</span>, Environment: <span class="subst">&#123;environment&#125;</span>, Limit: <span class="subst">&#123;limit&#125;</span>, Weights: <span class="subst">&#123;weights&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        query_embeddings = ef([query])</span><br><span class="line"></span><br><span class="line">        conditions = []</span><br><span class="line">        <span class="keyword">if</span> category:</span><br><span class="line">            conditions.append(<span class="string">f&#x27;category == &quot;<span class="subst">&#123;category&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> environment:</span><br><span class="line">            conditions.append(<span class="string">f&#x27;environment == &quot;<span class="subst">&#123;environment&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        expr = <span class="string">&quot; &amp;&amp; &quot;</span>.join(conditions) <span class="keyword">if</span> conditions <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;   过滤表达式: <span class="subst">&#123;expr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        search_params_dense = &#123;<span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>, <span class="string">&quot;params&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">        search_params_sparse = &#123;<span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>, <span class="string">&quot;params&quot;</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> expr:</span><br><span class="line">            search_params_dense[<span class="string">&quot;expr&quot;</span>] = expr</span><br><span class="line">            search_params_sparse[<span class="string">&quot;expr&quot;</span>] = expr</span><br><span class="line"></span><br><span class="line">        dense_req = AnnSearchRequest(</span><br><span class="line">            data=[query_embeddings[<span class="string">&quot;dense&quot;</span>][<span class="number">0</span>].tolist()],</span><br><span class="line">            anns_field=<span class="string">&quot;dense_vector&quot;</span>,</span><br><span class="line">            param=search_params_dense,</span><br><span class="line">            limit=limit</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换查询稀疏向量格式</span></span><br><span class="line">        query_sparse_row_obj = query_embeddings[<span class="string">&quot;sparse&quot;</span>][<span class="number">0</span>]  <span class="comment"># 索引返回单行稀疏对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;col&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            query_milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx, val <span class="keyword">in</span></span><br><span class="line">                                          <span class="built_in">zip</span>(query_sparse_row_obj.col, query_sparse_row_obj.data)&#125;</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;indices&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            query_milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx, val <span class="keyword">in</span></span><br><span class="line">                                          <span class="built_in">zip</span>(query_sparse_row_obj.indices, query_sparse_row_obj.data)&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误: 无法识别的查询稀疏向量类型 <span class="subst">&#123;<span class="built_in">type</span>(query_sparse_row_obj)&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        sparse_req = AnnSearchRequest(</span><br><span class="line">            data=[query_milvus_sparse_vector],</span><br><span class="line">            anns_field=<span class="string">&quot;sparse_vector&quot;</span>,</span><br><span class="line">            param=search_params_sparse,</span><br><span class="line">            limit=limit</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        rerank = WeightedRanker(weights[<span class="string">&quot;sparse&quot;</span>], weights[<span class="string">&quot;dense&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;   发送混合搜索请求到 Milvus...&quot;</span>)</span><br><span class="line">        results = collection.hybrid_search(</span><br><span class="line">            reqs=[sparse_req, dense_req],</span><br><span class="line">            rerank=rerank,</span><br><span class="line">            limit=limit,</span><br><span class="line">            output_fields=[<span class="string">&quot;text&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;category&quot;</span>, <span class="string">&quot;location&quot;</span>, <span class="string">&quot;environment&quot;</span>, <span class="string">&quot;pk&quot;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;   搜索完成。结果:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> results <span class="keyword">or</span> <span class="keyword">not</span> results[<span class="number">0</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;   未找到结果。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        processed_results = []</span><br><span class="line">        <span class="keyword">for</span> hit <span class="keyword">in</span> results[<span class="number">0</span>]:</span><br><span class="line">            processed_results.append(&#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: hit.entity.get(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                <span class="string">&quot;pk&quot;</span>: hit.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: hit.entity.get(<span class="string">&quot;title&quot;</span>),</span><br><span class="line">                <span class="string">&quot;text_preview&quot;</span>: hit.entity.get(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;&quot;</span>)[:<span class="number">200</span>] + <span class="string">&quot;...&quot;</span>,</span><br><span class="line">                <span class="string">&quot;category&quot;</span>: hit.entity.get(<span class="string">&quot;category&quot;</span>),</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: hit.entity.get(<span class="string">&quot;location&quot;</span>),</span><br><span class="line">                <span class="string">&quot;environment&quot;</span>: hit.entity.get(<span class="string">&quot;environment&quot;</span>),</span><br><span class="line">                <span class="string">&quot;distance&quot;</span>: hit.distance</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> processed_results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;混合搜索时发生 Milvus 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;混合搜索时发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例搜索调用</span></span><br><span class="line"><span class="keyword">if</span> collection.num_entities &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n开始示例搜索...&quot;</span>)</span><br><span class="line">    search_results = hybrid_search(<span class="string">&quot;孙悟空的战斗技巧&quot;</span>, category=<span class="string">&quot;神魔大战&quot;</span>, limit=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> search_results:</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> search_results:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - PK: <span class="subst">&#123;res[<span class="string">&#x27;pk&#x27;</span>]&#125;</span>, Title: <span class="subst">&#123;res[<span class="string">&#x27;title&#x27;</span>]&#125;</span>, Distance: <span class="subst">&#123;res[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Category: <span class="subst">&#123;res[<span class="string">&#x27;category&#x27;</span>]&#125;</span>, Location: <span class="subst">&#123;res[<span class="string">&#x27;location&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Preview: <span class="subst">&#123;res[<span class="string">&#x27;text_preview&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    search_results_filtered = hybrid_search(<span class="string">&quot;火焰山的战斗&quot;</span>, environment=<span class="string">&quot;火山&quot;</span>, limit=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> search_results_filtered:</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> search_results_filtered:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - PK: <span class="subst">&#123;res[<span class="string">&#x27;pk&#x27;</span>]&#125;</span>, Title: <span class="subst">&#123;res[<span class="string">&#x27;title&#x27;</span>]&#125;</span>, Distance: <span class="subst">&#123;res[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Category: <span class="subst">&#123;res[<span class="string">&#x27;category&#x27;</span>]&#125;</span>, Location: <span class="subst">&#123;res[<span class="string">&#x27;location&#x27;</span>]&#125;</span>, Environment: <span class="subst">&#123;res[<span class="string">&#x27;environment&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Preview: <span class="subst">&#123;res[<span class="string">&#x27;text_preview&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n集合中没有实体，跳过示例搜索。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n脚本执行完毕。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用BGE-M3嵌入：</p><ul><li>特点：多任务整合模型，可生成密集向量和稀疏向量</li><li>实现：BGEM3EmbeddingFunction(use_fp16=False, device=”cpu”)</li></ul><p>混合检索逻辑</p><ul><li>关键组件<ul><li>AnnSearchRequest：处理两种向量类型的检索请求</li><li>字段定义：需包含sparse_vector和dense_vector字段</li></ul></li><li>索引创建</li><li>权重参数设计<ul><li>设计原则：权重值为相对比例而非百分比（如{“sparse”:0.7,”dense”:1.0}）</li><li>调整策略：<ul><li>密集向量效果更好时增加dense权重</li><li>稀疏向量效果更好时增加sparse权重</li><li>效果相当时设置相近权重</li></ul></li></ul></li></ul><h1 id="Milvus多模态检索实战"><a href="#Milvus多模态检索实战" class="headerlink" title="Milvus多模态检索实战"></a>Milvus多模态检索实战</h1><h2 id="多模态检索"><a href="#多模态检索" class="headerlink" title="多模态检索"></a>多模态检索</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902093817419.png" alt="image-20250902093817419" style="zoom:80%;" /></p><ul><li>本质理解: 多模态检索可理解为混合检索，即在原有检索基础上增加一种向量表示方式。</li><li>应用场景: 适用于需要同时支持文字和图片检索的场景，如博客图片搜索引擎、游戏场景搜索等。</li><li>核心组件:<ul><li>多模态编码器：如Visualized-BGE模型</li><li>向量数据库：存储向量和元数据</li><li>相似度搜索：基于余弦相似度等算法</li></ul></li><li>模型特点:<ul><li>基于BGE文本嵌入框架，增加图像token嵌入能力</li><li>保留原BGE模型的强大文本嵌入能力</li><li>支持多种检索任务：多模态知识检索、组合图像检索等</li></ul></li><li>模型版本:<ul><li>bge-visualized-base-en-v1.5：768维，英文版</li><li>bge-visualized-m3：1024维，多语言版</li></ul></li><li>安装使用:<ul><li>需要按官方指导逐步安装模型</li><li>模型下载后需上传到服务器指定路径</li><li>核心依赖包：torchvision、timm、einops等</li></ul></li></ul><h2 id="visual-bge模型下载安装"><a href="#visual-bge模型下载安装" class="headerlink" title="visual_bge模型下载安装"></a>visual_bge模型下载安装</h2><p>github说明地址：<a href="https://github.com/FlagOpen/FlagEmbedding/tree/master/research/visual_bge">https://github.com/FlagOpen/FlagEmbedding/tree/master/research/visual_bge</a></p><ol><li><p>下载工程安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/FlagOpen/FlagEmbedding.git</span><br><span class="line">cd FlagEmbedding/research/visual_bge</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>安装其他需要的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torchvision timm einops ftfy</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>测试是否安装成功:<code>pip show visual-bge</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Name: visual_bge</span><br><span class="line">Version: 0.1.0</span><br><span class="line">Summary: visual_bge</span><br><span class="line">Home-page: https://github.com/FlagOpen/FlagEmbedding/tree/master/research/visual_bge</span><br><span class="line">Author: </span><br><span class="line">Author-email: </span><br><span class="line">License: </span><br><span class="line">Location: /Users/jinglv/PycharmProjects/llm-rag-system/.venv/lib/python3.12/site-packages</span><br><span class="line">Editable project location: /Users/jinglv/PycharmProjects/llm-rag-system/FlagEmbedding/research/visual_bge</span><br><span class="line">Requires: einops, ftfy, timm, torchvision</span><br><span class="line">Required-by: </span><br></pre></td></tr></table></figure></li></ol><p>导入报错问题：<code>ModuleNotFoundError: No module named &#39;visual_bge&#39;</code></p><ul><li>visual<em>bge：是在下载的FlagEmbedding源码中，去找对应的位置，有包导入错误，或者不是python的包（目录下缺少：`<em>_init</em></em>.py`）补上对应的部分即可。</li></ul><h2 id="实战代码（说明）-1"><a href="#实战代码（说明）-1" class="headerlink" title="实战代码（说明）"></a>实战代码（说明）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/2 09:45</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多模态图像检索系统：基于Visualized-BGE和Milvus实现</span></span><br><span class="line"><span class="string">功能：对图像和文本进行多模态编码，并在图像数据库中检索相似内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># ==================== 1. 初始化编码器 ====================</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> FlagEmbedding.research.visual_bge.visual_bge.modeling <span class="keyword">import</span> Visualized_BGE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from visual_bge.modeling import Visualized_BGE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WukongEncoder</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多模态编码器：将图像和文本编码成向量&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model_name: <span class="built_in">str</span>, model_path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = Visualized_BGE(model_name_bge=model_name, model_weight=model_path)</span><br><span class="line">        <span class="variable language_">self</span>.model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode_query</span>(<span class="params">self, image_path: <span class="built_in">str</span>, text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">float</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;编码图像和文本的组合查询&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            query_emb = <span class="variable language_">self</span>.model.encode(image=image_path, text=text)</span><br><span class="line">        <span class="keyword">return</span> query_emb.tolist()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode_image</span>(<span class="params">self, image_path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">float</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;仅编码图像&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            query_emb = <span class="variable language_">self</span>.model.encode(image=image_path)</span><br><span class="line">        <span class="keyword">return</span> query_emb.tolist()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化编码器</span></span><br><span class="line">model_name = <span class="string">&quot;BAAI/bge-m3&quot;</span></span><br><span class="line">model_path = <span class="string">&quot;../../../visualized_models/Visualized_m3.pth&quot;</span></span><br><span class="line">encoder = WukongEncoder(model_name, model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 2. 数据集管理 ====================</span></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WukongImage</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图像元数据结构&quot;&quot;&quot;</span></span><br><span class="line">    image_id: <span class="built_in">str</span></span><br><span class="line">    file_path: <span class="built_in">str</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    category: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span></span><br><span class="line">    tags: <span class="type">List</span>[<span class="built_in">str</span>]</span><br><span class="line">    game_chapter: <span class="built_in">str</span></span><br><span class="line">    location: <span class="built_in">str</span></span><br><span class="line">    characters: <span class="type">List</span>[<span class="built_in">str</span>]</span><br><span class="line">    abilities_shown: <span class="type">List</span>[<span class="built_in">str</span>]</span><br><span class="line">    environment: <span class="built_in">str</span></span><br><span class="line">    time_of_day: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WukongDataset</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图像数据集管理类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_dir: <span class="built_in">str</span>, metadata_path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.data_dir = data_dir</span><br><span class="line">        <span class="variable language_">self</span>.metadata_path = metadata_path</span><br><span class="line">        <span class="variable language_">self</span>.images: <span class="type">List</span>[WukongImage] = []</span><br><span class="line">        <span class="variable language_">self</span>._load_metadata()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_load_metadata</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载图像元数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.metadata_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">            <span class="keyword">for</span> img_data <span class="keyword">in</span> data[<span class="string">&#x27;images&#x27;</span>]:</span><br><span class="line">                <span class="comment"># 确保图片路径是相对于 data_dir 的</span></span><br><span class="line">                img_data[<span class="string">&#x27;file_path&#x27;</span>] = <span class="string">f&quot;<span class="subst">&#123;self.data_dir&#125;</span>/<span class="subst">&#123;img_data[<span class="string">&#x27;file_path&#x27;</span>].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]&#125;</span>&quot;</span></span><br><span class="line">                <span class="variable language_">self</span>.images.append(WukongImage(**img_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据集</span></span><br><span class="line">dataset = WukongDataset(<span class="string">&quot;../../../data/多模态&quot;</span>, <span class="string">&quot;../../../data/多模态/metadata.json&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 3. 生成图像嵌入 ====================</span></span><br><span class="line"><span class="comment"># 为所有图像生成嵌入向量</span></span><br><span class="line">image_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> tqdm(dataset.images, desc=<span class="string">&quot;生成图片嵌入&quot;</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image_dict[image.file_path] = encoder.encode_image(image.file_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理图片 <span class="subst">&#123;image.file_path&#125;</span> 失败：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;成功编码 <span class="subst">&#123;<span class="built_in">len</span>(image_dict)&#125;</span> 张图片&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 4. Milvus向量库设置 ====================</span></span><br><span class="line"><span class="comment"># 连接/创建Milvus数据库</span></span><br><span class="line">collection_name = <span class="string">&quot;wukong_scenes&quot;</span></span><br><span class="line">milvus_client = MilvusClient(uri=<span class="string">&quot;http://82.157.193.65:19530&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建向量集合</span></span><br><span class="line">dim = <span class="built_in">len</span>(<span class="built_in">list</span>(image_dict.values())[<span class="number">0</span>])</span><br><span class="line">milvus_client.create_collection(</span><br><span class="line">    collection_name=collection_name,</span><br><span class="line">    dimension=dim,</span><br><span class="line">    auto_id=<span class="literal">True</span>,</span><br><span class="line">    enable_dynamic_field=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据到Milvus</span></span><br><span class="line">insert_data = []</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> dataset.images:</span><br><span class="line">    <span class="keyword">if</span> image.file_path <span class="keyword">in</span> image_dict:</span><br><span class="line">        insert_data.append(&#123;</span><br><span class="line">            <span class="string">&quot;image_path&quot;</span>: image.file_path,</span><br><span class="line">            <span class="string">&quot;vector&quot;</span>: image_dict[image.file_path],</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: image.title,</span><br><span class="line">            <span class="string">&quot;category&quot;</span>: image.category,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: image.description,</span><br><span class="line">            <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;,&quot;</span>.join(image.tags),</span><br><span class="line">            <span class="string">&quot;game_chapter&quot;</span>: image.game_chapter,</span><br><span class="line">            <span class="string">&quot;location&quot;</span>: image.location,</span><br><span class="line">            <span class="string">&quot;characters&quot;</span>: <span class="string">&quot;,&quot;</span>.join(image.characters),</span><br><span class="line">            <span class="string">&quot;abilities&quot;</span>: <span class="string">&quot;,&quot;</span>.join(image.abilities_shown),</span><br><span class="line">            <span class="string">&quot;environment&quot;</span>: image.environment,</span><br><span class="line">            <span class="string">&quot;time_of_day&quot;</span>: image.time_of_day</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">result = milvus_client.insert(</span><br><span class="line">    collection_name=collection_name,</span><br><span class="line">    data=insert_data</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;索引构建完成，共插入 <span class="subst">&#123;result[<span class="string">&#x27;insert_count&#x27;</span>]&#125;</span> 条记录&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 5. 搜索功能实现 ====================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_similar_images</span>(<span class="params"></span></span><br><span class="line"><span class="params">        query_image: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        query_text: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        limit: <span class="built_in">int</span> = <span class="number">9</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    搜索相似图像</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        query_image: 查询图像路径</span></span><br><span class="line"><span class="string">        query_text: 查询文本</span></span><br><span class="line"><span class="string">        limit: 返回结果数量</span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        检索结果列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 生成查询向量</span></span><br><span class="line">    query_vec = encoder.encode_query(query_image, query_text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建搜索参数</span></span><br><span class="line">    search_params = &#123;</span><br><span class="line">        <span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;COSINE&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;nprobe&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;radius&quot;</span>: <span class="number">0.1</span>,</span><br><span class="line">            <span class="string">&quot;range_filter&quot;</span>: <span class="number">0.8</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行搜索</span></span><br><span class="line">    results = milvus_client.search(</span><br><span class="line">        collection_name=collection_name,</span><br><span class="line">        data=[query_vec],</span><br><span class="line">        output_fields=[</span><br><span class="line">            <span class="string">&quot;image_path&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;category&quot;</span>, <span class="string">&quot;description&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;game_chapter&quot;</span>, <span class="string">&quot;location&quot;</span>, <span class="string">&quot;characters&quot;</span>,</span><br><span class="line">            <span class="string">&quot;abilities&quot;</span>, <span class="string">&quot;environment&quot;</span>, <span class="string">&quot;time_of_day&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        limit=limit,</span><br><span class="line">        search_params=search_params</span><br><span class="line">    )[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 6. 可视化函数 ====================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize_results</span>(<span class="params">query_image: <span class="built_in">str</span>, results: <span class="type">List</span>[<span class="built_in">dict</span>], output_path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    可视化搜索结果</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        query_image: 查询图像路径</span></span><br><span class="line"><span class="string">        results: 搜索结果列表</span></span><br><span class="line"><span class="string">        output_path: 输出图像路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置图片大小和网格参数</span></span><br><span class="line">    img_size = (<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    grid_size = (<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建画布</span></span><br><span class="line">    canvas_height = img_size[<span class="number">0</span>] * (grid_size[<span class="number">0</span>] + <span class="number">1</span>)</span><br><span class="line">    canvas_width = img_size[<span class="number">1</span>] * (grid_size[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">    canvas = np.full((canvas_height, canvas_width, <span class="number">3</span>), <span class="number">255</span>, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加查询图片</span></span><br><span class="line">    query_img = Image.<span class="built_in">open</span>(query_image).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    query_array = np.array(query_img)</span><br><span class="line">    query_resized = cv2.resize(query_array, (img_size[<span class="number">0</span>] - <span class="number">20</span>, img_size[<span class="number">1</span>] - <span class="number">20</span>))</span><br><span class="line">    bordered_query = cv2.copyMakeBorder(</span><br><span class="line">        query_resized, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>,</span><br><span class="line">        cv2.BORDER_CONSTANT,</span><br><span class="line">        value=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">    canvas[:img_size[<span class="number">0</span>], :img_size[<span class="number">1</span>]] = bordered_query</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加结果图片</span></span><br><span class="line">    <span class="keyword">for</span> idx, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results[:grid_size[<span class="number">0</span>] * grid_size[<span class="number">1</span>]]):</span><br><span class="line">        row = (idx // grid_size[<span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">        col = idx % grid_size[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        img = Image.<span class="built_in">open</span>(result[<span class="string">&quot;entity&quot;</span>][<span class="string">&quot;image_path&quot;</span>]).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        img_array = np.array(img)</span><br><span class="line">        resized = cv2.resize(img_array, (img_size[<span class="number">0</span>], img_size[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        y_start = row * img_size[<span class="number">0</span>]</span><br><span class="line">        x_start = col * img_size[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        canvas[y_start:y_start + img_size[<span class="number">0</span>], x_start:x_start + img_size[<span class="number">1</span>]] = resized</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加相似度分数</span></span><br><span class="line">        score_text = <span class="string">f&quot;Score: <span class="subst">&#123;result[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">        cv2.putText(</span><br><span class="line">            canvas,</span><br><span class="line">            score_text,</span><br><span class="line">            (x_start + <span class="number">10</span>, y_start + img_size[<span class="number">0</span>] - <span class="number">10</span>),</span><br><span class="line">            cv2.FONT_HERSHEY_SIMPLEX,</span><br><span class="line">            <span class="number">0.5</span>,</span><br><span class="line">            (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(output_path, canvas)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 7. 执行查询示例 ====================</span></span><br><span class="line"><span class="comment"># 执行查询</span></span><br><span class="line">query_image = <span class="string">&quot;../../../data/多模态/query_image.jpg&quot;</span></span><br><span class="line">query_text = <span class="string">&quot;寻找悟空面对建筑物战斗场景&quot;</span></span><br><span class="line"></span><br><span class="line">results = search_similar_images(</span><br><span class="line">    query_image=query_image,</span><br><span class="line">    query_text=query_text,</span><br><span class="line">    limit=<span class="number">9</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出详细信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n搜索结果:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> idx, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n结果 <span class="subst">&#123;idx&#125;</span>:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;图片：<span class="subst">&#123;result[<span class="string">&#x27;entity&#x27;</span>][<span class="string">&#x27;image_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;标题：<span class="subst">&#123;result[<span class="string">&#x27;entity&#x27;</span>][<span class="string">&#x27;title&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;描述：<span class="subst">&#123;result[<span class="string">&#x27;entity&#x27;</span>][<span class="string">&#x27;description&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;相似度分数：<span class="subst">&#123;result[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化结果</span></span><br><span class="line">visualize_results(query_image, results, <span class="string">&quot;search_results.jpg&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>权重参数设计:</p><ul><li>sparse权重0.7，dense权重1.0</li><li>权重值不需要加起来等于1，表示相对重要性比例</li><li>稠密向量重要性是稀疏向量的约1.43倍(1.0/0.7)</li><li>可根据实际效果动态调整权重比例</li></ul></li><li><p>数据集管理</p><ul><li>数据结构:<ul><li>包含图像ID、文件路径、标题、类别等基础信息</li><li>详细描述字段：如战斗场景描述、角色、环境等</li><li>标签列表：如”群战”、”水特效”等关键词</li></ul></li><li>构建方法:<ul><li>可使用大模型自动生成图像元数据</li><li>元数据与图像文件需保持对应关系</li><li>支持自定义字段扩展</li></ul></li></ul></li><li>检索功能的实现<ul><li>检索方式:<ul><li>支持纯图像检索</li><li>支持图文混合检索</li><li>支持带过滤条件的检索</li></ul></li><li>核心流程:<ul><li>初始化编码器并加载模型</li><li>为所有图像生成嵌入向量</li><li>创建Milvus向量集合</li><li>执行相似度搜索</li><li>可视化展示结果</li></ul></li><li>混合检索实现:<ul><li>同时编码图像和文本生成查询向量</li><li>可设置过滤条件缩小搜索范围</li><li>支持调整稀疏和稠密向量的权重比例</li></ul></li></ul></li></ul><h2 id="其它多模态解决方案"><a href="#其它多模态解决方案" class="headerlink" title="其它多模态解决方案"></a>其它多模态解决方案</h2><ul><li>Weaviate：原生支持图像、文本等多种模态的 Any-to-Any 检索 。</li><li>Qdrant：结合 ImageBind、LlamaIndex 等模型，可实现音频、图像、文本等跨模态向量化检索。</li><li>OpenSearch：通过神经插件（Neural Search）和 Titan 多模态嵌入模型，提供云端托管的多模态搜索能力。</li><li>Pinecone：全托管向量库，开箱即可实现图像、音频、视频等多模态向量检索。</li><li>Haystack：在 NLP 检索框架基础上，集成 CLIP 等模型，可扩展为多模态搜索系统。</li><li>Vespa：支持多向量索引与复杂排名函数，擅长电商、新闻等场景下的多模态检索。</li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第二十三讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>AI大模型和Agent智能体介绍</title>
    <link href="https://jinglv.github.io/2025/08/25/ai/llm/1-introduce/"/>
    <id>https://jinglv.github.io/2025/08/25/ai/llm/1-introduce/</id>
    <published>2025-08-24T16:00:00.000Z</published>
    <updated>2025-08-25T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是大语言模型（LLM）"><a href="#什么是大语言模型（LLM）" class="headerlink" title="什么是大语言模型（LLM）"></a>什么是大语言模型（LLM）</h1><h2 id="大语言模型定义（LLM）"><a href="#大语言模型定义（LLM）" class="headerlink" title="大语言模型定义（LLM）"></a>大语言模型定义（LLM）</h2><p><strong>定义：</strong> 大语言模型（Large Language Model，简称 LLM）是使用大规模自然语言数据训练而成的<strong>深度学习模型</strong>，具有对文本的理解与生成能力。</p><ul><li>它不仅能理解用户输入的自然语言，还能输出连贯、有逻辑、具有上下文关联的内容。</li><li>可执行的任务包括：问答、翻译、文本总结、代码生成、逻辑推理等。</li></ul><h2 id="大语言模型的主要特征"><a href="#大语言模型的主要特征" class="headerlink" title="大语言模型的主要特征"></a>大语言模型的主要特征</h2><h4 id="上下文理解能力"><a href="#上下文理解能力" class="headerlink" title="上下文理解能力"></a>上下文理解能力</h4><ul><li>能追踪对话历史，理解并回应语义连续的问题。</li><li>举例：连续对话中，模型知道“他”指的是上一个问题提到的人物。</li></ul><h4 id="执行复杂任务"><a href="#执行复杂任务" class="headerlink" title="执行复杂任务"></a>执行复杂任务</h4><ul><li>能进行逻辑推理、情感分析、摘要生成、甚至代码编写。</li><li>如：分析电影评论的情绪、生成博客摘要、输出 Python 函数。</li></ul><h4 id="Prompt-驱动学习方式"><a href="#Prompt-驱动学习方式" class="headerlink" title="Prompt 驱动学习方式"></a>Prompt 驱动学习方式</h4><ul><li><strong>Zero-shot Learning（零样本学习）</strong>：不提供示例，仅靠自然语言提示执行任务。</li><li><strong>Few-shot Learning（少样本学习）</strong>：提供 1~3 个示例，模型基于这些示例推理出解决方案。</li></ul><h2 id="主流开源与闭源模型对比"><a href="#主流开源与闭源模型对比" class="headerlink" title="主流开源与闭源模型对比"></a>主流开源与闭源模型对比</h2><h3 id="按开源-闭源分类"><a href="#按开源-闭源分类" class="headerlink" title="按开源/闭源分类"></a>按开源/闭源分类</h3><div class="table-container"><table><thead><tr><th><strong>类型</strong></th><th><strong>代表模型</strong></th></tr></thead><tbody><tr><td>开源</td><td>LLaMA、BLOOM、DeepSeek、Qwen、ChatGLM、</td></tr><tr><td>闭源</td><td>GPT 系列、Claude、文心一言</td></tr></tbody></table></div><ul><li><p><strong>开源模型类比：自己搭建一台服务器</strong></p><ul><li><p>优点：可控、安全、可修改。</p></li><li><p>缺点：运维成本高，需要配置显卡、权重文件、加载方式等。</p></li></ul></li><li><p><strong>闭源模型类比：租用云服务</strong></p><ul><li><p>优点：即开即用，性能强大，无需部署。</p></li><li><p>缺点：数据出境、黑盒限制、定价可能较高。</p></li></ul></li></ul><h3 id="主流模型对比维度"><a href="#主流模型对比维度" class="headerlink" title="主流模型对比维度"></a>主流模型对比维度</h3><div class="table-container"><table><thead><tr><th><strong>大模型</strong></th><th><strong>机构</strong></th><th><strong>是否开源</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>GPT-4</strong></td><td>OpenAI</td><td>❌ 否</td><td>API</td><td>综合能力强，生态成熟，稳定性高</td></tr><tr><td><strong>Claude 3</strong></td><td>Anthropic</td><td>❌ 否</td><td>API</td><td>长上下文支持强（200K+），安全性好</td></tr><tr><td><strong>文心一言（ERNIE Bot）</strong></td><td>百度</td><td>❌ 否</td><td>API</td><td>中文优化，集成百度生态</td></tr><tr><td><strong>ChatGLM3</strong></td><td>智谱AI（Zhipu AI）</td><td>✅ 是</td><td>本地部署 / API</td><td>中文优化好，推理快，有Mix结构</td></tr><tr><td><strong>LLaMA 2 / 3</strong></td><td>Meta</td><td>✅ 是</td><td>本地部署 / API</td><td>社区活跃，适合研究与自定义部署</td></tr><tr><td><strong>DeepSeek V3</strong></td><td>深度求索</td><td>✅ 是</td><td>本地 部署/ API</td><td>中文优化，性能优，效率高，支持多模态</td></tr><tr><td><strong>千问 Qwen</strong></td><td>阿里</td><td>✅ 是</td><td>本地部署 / API</td><td>中文强，支持长上下文，推理强，应用活跃</td></tr></tbody></table></div><h3 id="闭源模型的优势与局限"><a href="#闭源模型的优势与局限" class="headerlink" title="闭源模型的优势与局限"></a>闭源模型的优势与局限</h3><p><strong>👍</strong> <strong>优势:</strong></p><ul><li>表现强大，常居排行榜前列（如 GPT-4o）</li><li>云端部署，无需本地资源</li></ul><p><strong>👎</strong> <strong>局限：</strong></p><ul><li>使用成本较高（按 token 收费）</li><li>无法自定义/微调模型</li><li>数据传输涉及隐私和合规风险</li></ul><h3 id="开源模型的优势与局限"><a href="#开源模型的优势与局限" class="headerlink" title="开源模型的优势与局限"></a>开源模型的优势与局限</h3><p><strong>👍</strong> <strong>优势：</strong></p><ul><li>自主可控，可本地部署，无需联网</li><li>可微调适配特定场景（如医疗问答、教育问答）</li><li>成本低，适合企业/高校私有部署</li></ul><p><strong>👎</strong> <strong>局限：</strong></p><ul><li>单模型能力一般不如 GPT-4o等闭源模型</li><li>微调与部署需要 GPU 资源及一定工程能力</li></ul><h2 id="大模型的能力"><a href="#大模型的能力" class="headerlink" title="大模型的能力"></a>大模型的能力</h2><h3 id="擅长的能力领域（当前）"><a href="#擅长的能力领域（当前）" class="headerlink" title="擅长的能力领域（当前）"></a>擅长的能力领域（当前）</h3><div class="table-container"><table><thead><tr><th><strong>能力</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>文本生成</td><td>自动撰写文章、文案、邮件等</td></tr><tr><td>信息整合</td><td>摘要、翻译、知识问答等任务</td></tr><tr><td>代码编写</td><td>自动生成、补全、修复代码（如 Python、JS）</td></tr><tr><td>逻辑推理</td><td>在提示引导下完成结构化推理（如 Chain-of-Thought）</td></tr><tr><td>对话管理</td><td>支持上下文关联、情绪调节</td></tr><tr><td>多任务执行</td><td>简单任务规划与指令分解执行</td></tr></tbody></table></div><h3 id="不擅长的领域"><a href="#不擅长的领域" class="headerlink" title="不擅长的领域"></a>不擅长的领域</h3><div class="table-container"><table><thead><tr><th><strong>能力限制</strong></th><th><strong>描述</strong></th><th><strong>当前改进方向</strong></th></tr></thead><tbody><tr><td>实时查询</td><td>默认闭源模型不联网</td><td>插件或外接 API（如 Perplexity、Bing）支持</td></tr><tr><td>精准计算</td><td>数学能力有限，易出错</td><td>可结合 Wolfram Alpha 插件进行数学计算</td></tr><tr><td>上下文一致性</td><td>长对话易“遗忘”前文内容</td><td>Claude 3、Gemini 1.5 提供超长上下文支持</td></tr><tr><td>信息幻觉</td><td>可能编造事实、引用错误</td><td>使用 RAG 技术、提示词优化可缓解</td></tr><tr><td>安全边界</td><td>无法处理敏感隐私信息</td><td>不适合用于医疗诊断、法律定案等场景</td></tr><tr><td>多模态限制</td><td>图像、音频推理尚不成熟</td><td>存在空间理解与情感识别的瓶颈</td></tr></tbody></table></div><h3 id="能力边界的“动态性”"><a href="#能力边界的“动态性”" class="headerlink" title="能力边界的“动态性”"></a>能力边界的“动态性”</h3><ul><li>技术持续更新，能力边界正在拓宽</li><li>当前不等于永久不行</li></ul><h1 id="什么是Agent智能体"><a href="#什么是Agent智能体" class="headerlink" title="什么是Agent智能体"></a>什么是Agent智能体</h1><p>智能体（AI Agents或Agents）是指能够<strong>自主感知环境、做出决策并执行行动的系统或程序</strong>。根据IBM的定义，智能体是“能够通过设计其工作流和利用可用工具，代表用户或其他系统自主执行任务的系统或程序”[<a href="https://www.ibm.com/cn-zh/think/topics/ai-agents">IBM</a>]。英伟达则将智能体描述为“AI 智能体是先进的 AI 系统，旨在<strong>根据高级目标自主进行推理，制定计划并执行复杂任务</strong>。”，代表了“从简单自动化向能够管理复杂工作流的自主系统过渡”的演进方向[<a href="https://www.nvidia.cn/glossary/ai-agents/">NVIDIA</a>]。</p><p>在更专业的学术定义中，百度百科指出：“智能体是指能够感知环境并自主采取行动以实现特定目标的实体。这一概念最早由“人工智能之父”马文·明斯基提出，他认为某些问题可经由社会中的一些个体经过协商后解决，这些个体就是智能体。”[<a href="https://baike.baidu.com/item/智能体/9446647">百度百科</a>]</p><p>智能体具有以下基本特征：</p><ul><li>自主性(Autonomy)：智能体能够在没有人类或其他实体的直接干预下运行，并对其行动和内部状态具有某种程度的控制。</li><li>反应性(Reactivity)：智能体能够感知其环境，并对环境变化做出实时响应。</li><li>交互性/社交性(Socialability)：智能体能够与其他智能体或人类进行交互和协作。</li><li>适应性/主动性(Proactivity)：智能体能够根据环境变化主动调整其行为策略，适应新的情况。</li><li>学习能力：许多智能体具有通过经验或数据学习和改进的能力。</li></ul><h2 id="智能体的类型"><a href="#智能体的类型" class="headerlink" title="智能体的类型"></a>智能体的类型</h2><ul><li><p>自主智能体 (Autonomous Agents)</p><p>自主智能体是一种能够在没有人类干预的情况下，自主执行任务、做出决策和与环境互动的智能系统。它们具有高度的自主性，能够独立地感知环境、做出决策并执行行动，而不需要外部的控制和干预。</p></li><li><p>反应智能体 (Reactive Agents)</p><p>反应智能体主要关注对环境变化的实时响应。使用简单反射模型，根据当前感知做出决策，而不需要复杂的内部状态或长期规划</p></li></ul><h2 id="智能体的发展阶段"><a href="#智能体的发展阶段" class="headerlink" title="智能体的发展阶段"></a>智能体的发展阶段</h2><p>OpenAI根据自身技术研发与产品开发提出了通往AGI的五级量表，将AI Agent分为五个阶段，每个阶段代表更高级的能力水平：[<a href="https://www.51cto.com/aigc/3449.html">51CTO</a>]</p><ol><li><strong>第1级：聊天机器人</strong> - 具有对话语言技能</li><li><strong>第2级：实用工具</strong> - 能够执行具体任务</li><li><strong>第3级：专家助手</strong> - 具有特定领域的专业知识</li><li><strong>第4级：团队合作者</strong> - 能够与人类团队协作</li><li><strong>第5级：通用人工智能(AGI)</strong> - 具有与人类相当或超越人类的通用智能</li></ol><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250828152117511.png" alt="image-20250828152117511" style="zoom:50%;" /></p><h2 id="智能体的应用"><a href="#智能体的应用" class="headerlink" title="智能体的应用"></a>智能体的应用</h2><h3 id="工业自动化"><a href="#工业自动化" class="headerlink" title="工业自动化"></a>工业自动化</h3><p>在工业领域，智能体被用于：</p><ul><li>自动化生产线监控和优化</li><li>设备预测性维护</li><li>仓储和物流自动化</li><li>质量控制和检测</li></ul><h3 id="服务业"><a href="#服务业" class="headerlink" title="服务业"></a>服务业</h3><p>在服务业，智能体的应用包括：</p><ul><li>智能客服和客户支持</li><li>个性化推荐系统</li><li>智能健康管理</li><li>智能金融分析和风险管理</li></ul><h3 id="医疗健康"><a href="#医疗健康" class="headerlink" title="医疗健康"></a>医疗健康</h3><p>在医疗健康领域，智能体被用于：</p><ul><li>医学影像辅助诊断</li><li>病人监测和远程医疗</li><li>药物研发和临床试验优化</li><li>个性化治疗方案设计</li></ul><h3 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h3><p>在教育领域，智能体的应用包括：</p><ul><li>个性化学习推荐系统</li><li>智能教学助手</li><li>学习评估和反馈系统</li><li>虚拟教育助手</li></ul><h3 id="娱乐与创意"><a href="#娱乐与创意" class="headerlink" title="娱乐与创意"></a>娱乐与创意</h3><p>在娱乐与创意领域，智能体被用于：</p><ul><li>智能内容创作和推荐</li><li>游戏AI和虚拟对手</li><li>数字助手和创意辅助工具</li><li>虚拟主播和内容生成</li></ul><h2 id="Agent-的核心能力模块"><a href="#Agent-的核心能力模块" class="headerlink" title="Agent 的核心能力模块"></a>Agent 的核心能力模块</h2><div class="table-container"><table><thead><tr><th><strong>模块</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>感知（Perception）</strong></td><td>读取输入内容，包括自然语言、结构化数据、环境状态等</td></tr><tr><td><strong>理解与推理（Reasoning）</strong></td><td>分析任务、拆解目标、制定解决策略</td></tr><tr><td><strong>记忆（Memory）</strong></td><td>保留上下文信息和历史记录，实现持续性交互</td></tr><tr><td><strong>规划（Planning）</strong></td><td>多步骤思考和任务分解能力（如Chain of Thought）</td></tr><tr><td><strong>工具调用（Tool Calling）</strong></td><td>结合 API、搜索、代码执行等外部能力完成任务</td></tr><tr><td><strong>执行与反馈（Action）</strong></td><td>执行任务并基于结果做出调整或解释</td></tr></tbody></table></div><h1 id="智能体和模型、大模型的区别"><a href="#智能体和模型、大模型的区别" class="headerlink" title="智能体和模型、大模型的区别"></a>智能体和模型、大模型的区别</h1><div class="table-container"><table><thead><tr><th><strong>名词</strong></th><th><strong>核心概念</strong></th></tr></thead><tbody><tr><td>AI</td><td>人工智能（AI）是计算机科学的一个分支学科</td></tr><tr><td>模型</td><td>AI系统的核心算法组件，通过从数据中学习规律和模式来实现特定功能常见模型如：预测模型（分类、回归），生成模型（文本、图像生成）等模型是无实体的工具，不具有自主性</td></tr><tr><td>大模型</td><td>模型的特殊形态，以参数规模巨大（达到百亿、千亿甚至万亿）为显著特征主要用来处理复杂任务和复杂推理，对人类指令有很强的遵循能力</td></tr><tr><td>智能体</td><td>能够感知环境、自主决策并执行行动以实现特定目标的实体或系统智能体是AI技术落地的系统级<strong>应用形式</strong>能够形成完整的“感知-决策-行动”闭环</td></tr></tbody></table></div><h1 id="智能体架构"><a href="#智能体架构" class="headerlink" title="智能体架构"></a>智能体架构</h1><ul><li><p>单个智能体的构成：</p><ul><li><p>大模型（必选）</p></li><li><p>Tools（必选）</p></li></ul></li><li><p>多个智能体的串联：</p><ul><li><p>LangGraph</p></li><li><p>Dify、Coze等平台</p></li></ul></li><li><p>智能体的调用：</p><ul><li>Python/Node</li></ul></li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250828152606906.png" alt="image-20250828152606906" style="zoom:50%;" /></p>]]></content>
    
    
    <summary type="html">学习AI大模型和Agent智能体学习笔记第一讲</summary>
    
    
    
    <category term="AI大模型和Agent智能体学习" scheme="https://jinglv.github.io/categories/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8CAgent%E6%99%BA%E8%83%BD%E4%BD%93%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AI大模型和Agent智能体学习" scheme="https://jinglv.github.io/tags/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8CAgent%E6%99%BA%E8%83%BD%E4%BD%93%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库检索（搜索）、度量类型和条件过滤</title>
    <link href="https://jinglv.github.io/2025/08/22/ai/rag/22-vector-db-search/"/>
    <id>https://jinglv.github.io/2025/08/22/ai/rag/22-vector-db-search/</id>
    <published>2025-08-21T16:00:00.000Z</published>
    <updated>2025-08-22T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="度量类型"><a href="#度量类型" class="headerlink" title="度量类型"></a>度量类型</h1><h2 id="距离度量的标准（类型）"><a href="#距离度量的标准（类型）" class="headerlink" title="距离度量的标准（类型）"></a>距离度量的标准（类型）</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822101843966.png" alt="image-20250822101843966" style="zoom:67%;" /></p><h3 id="L2（欧氏距离）"><a href="#L2（欧氏距离）" class="headerlink" title="L2（欧氏距离）"></a>L2（欧氏距离）</h3><ul><li>适用于连续数值型特征，如图像像素或声纹特征；</li><li><p>常见于需要精确度量“几何距离”的场景，例如视觉检索、点云匹配等。</p></li><li><p>适用场景: 连续数值型特征(如图像像素、声纹特征)，需要精确度量几何距离的场景(视觉检索、点云匹配)</p></li><li>特性: 值越小相似度越高，范围﻿$[0,∞)$﻿</li><li>公式:$L2= \sqrt{\sum(A-B)^2}$﻿</li></ul><h3 id="IP（内积）"><a href="#IP（内积）" class="headerlink" title="IP（内积）"></a>IP（内积）</h3><ul><li>在向量长度（范数）有意义时使用，比如评估未归一化嵌入向量的匹配强度；</li><li><p>若向量已归一化，等价于余弦相似度，可用于文本或推荐系统中的评分计算。</p></li><li><p>适用场景: 向量长度(范数)有意义时(如未归一化的嵌入向量)</p></li><li>特性: 值越大相似度越高，范围无限制</li><li>公式:﻿ $IP = A \cdot B = \sum(A_1B_1 + A_2B_2 + …)$﻿</li><li>注意: 若向量已归一化，等价于余弦相似度</li></ul><h3 id="COSINE（余弦相似度）"><a href="#COSINE（余弦相似度）" class="headerlink" title="COSINE（余弦相似度）"></a>COSINE（余弦相似度）</h3><ul><li>最常用于文本、自然语言嵌入之间的语义相似性计算；</li><li><p>不受向量长度影响，关注方向一致性，适合主题或意图匹配。</p></li><li><p>适用场景: 文本/NLP嵌入的语义相似性计算，主题或意图匹配</p></li><li>特性: 值越大相似度越高，范围﻿$[-1,1]$﻿</li><li>公式:$cos(θ)=\frac{A \cdot B}{|A||B|}$﻿</li><li>黄金标准: 文本检索不知道选什么时首选余弦</li></ul><h3 id="JACCARD（交并比距离）"><a href="#JACCARD（交并比距离）" class="headerlink" title="JACCARD（交并比距离）"></a>JACCARD（交并比距离）</h3><ul><li>用于集合或二值特征的相似度评估，如标签集合、关键词重叠；</li><li>在文本片段重叠、推荐系统中基于兴趣标签的匹配场景常见。</li></ul><ul><li>适用场景: 集合或二值特征的相似度评估(标签集合、关键词重叠)</li><li>特性: 值越小相似度越高，范围$[0,1]$﻿</li><li>公式:$J=1-\frac{|A∩B|}{|A∪B|}$﻿</li></ul><h3 id="HAMMING（海明距离）"><a href="#HAMMING（海明距离）" class="headerlink" title="HAMMING（海明距离）"></a>HAMMING（海明距离）</h3><ul><li>专用于二进制向量（如感知哈希、二值化特征）的相似度度量；</li><li><p>常见于图像指纹检索、人脸二值编码或者简易哈希匹配场景。</p></li><li><p>适用场景: 二进制向量(感知哈希、二值化特征)</p></li><li>特性: 值越小相似度越高，范围$[0,dim]$﻿</li></ul><h3 id="BM25（全文检索评分）"><a href="#BM25（全文检索评分）" class="headerlink" title="BM25（全文检索评分）"></a>BM25（全文检索评分）</h3><ul><li>专为稀疏向量上的全文搜索设计，结合 TF、IDF 和文档长度归一化；</li><li><p>适用于文档检索、问答系统的倒排索引搜索场景。</p></li><li><p>适用场景: 稀疏向量上的全文搜索(文档检索、问答系统)</p></li><li>特性: 值越大相似度越高，范围﻿$[0,∞)$﻿</li></ul><h2 id="各种字段所支持的度量类型"><a href="#各种字段所支持的度量类型" class="headerlink" title="各种字段所支持的度量类型"></a>各种字段所支持的度量类型</h2><div class="table-container"><table><thead><tr><th>字段类型</th><th>维度范围</th><th>支持的度量类型</th><th>默认度量类型</th></tr></thead><tbody><tr><td>FLOAT_VECTOR</td><td>2 – 32 768</td><td>COSINE、L2、IP</td><td>COSINE</td></tr><tr><td>FLOAT16_VECTOR</td><td>2 – 32 768</td><td>COSINE、L2、IP</td><td>COSINE</td></tr><tr><td>BFLOAT16_VECTOR</td><td>2 – 32 768</td><td>COSINE、L2、IP</td><td>COSINE</td></tr><tr><td>SPARSE_FLOAT_VECTOR</td><td>无需指定</td><td>IP、BM25(仅限全文检索)</td><td>IP</td></tr><tr><td>BINARY_VECTOR</td><td>8 – (32 768x8)</td><td>HAMMING、JACCARD</td><td>HAMMING</td></tr></tbody></table></div><ul><li>FLOAT/FLOAT16/BFLOAT16 VECTOR:<ul><li>维度范围: 2-32768</li><li>支持: COSINE, L2, IP</li><li>默认: COSINE</li></ul></li><li>SPARSE FLOAT VECTOR:<ul><li>无需指定维度</li><li>支持: IP、BM25(仅限全文检索)</li><li>默认: IP</li></ul></li><li>BINARY VECTOR:<ul><li>维度范围: 8-(32768×8)</li><li>支持: HAMMING, JACCARD</li><li>默认: HAMMING</li></ul></li></ul><h2 id="各种度量类型的取值范围"><a href="#各种度量类型的取值范围" class="headerlink" title="各种度量类型的取值范围"></a>各种度量类型的取值范围</h2><div class="table-container"><table><thead><tr><th>度量类型</th><th>相似度/距离特性</th><th>数值范围</th></tr></thead><tbody><tr><td><strong>L2</strong> (欧氏距离)</td><td>值越小，相似度越高</td><td>[0,∞)</td></tr><tr><td><strong>IP</strong> (内积)</td><td>值越大，相似度越高</td><td>[−1,1]</td></tr><tr><td><strong>COSINE</strong> (余弦)</td><td>值越大，相似度越高</td><td>[−1,1]</td></tr><tr><td><strong>JACCARD</strong></td><td>值越小，相似度越高</td><td>[0,1]</td></tr><tr><td><strong>HAMMING</strong></td><td>值越小，相似度越高</td><td>[0,dim)</td></tr><tr><td><strong>BM25</strong></td><td>值越大，相似度越高</td><td>[0,∞)</td></tr></tbody></table></div><p>关键注意: 不同度量类型的数值范围差异很大，如欧式距离可能大于1是正常的</p><h1 id="ANN搜索"><a href="#ANN搜索" class="headerlink" title="ANN搜索"></a>ANN搜索</h1><p>Milvus的ANN搜索是一种高效的向量相似度搜索方法，它通过预构建的索引文件来加速搜索过程。与kNN搜索相比，ANN搜索不需要遍历所有向量，而是通过索引快速定位可能包含最相似向量的子集，从而大大提高了搜索效率。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822101723764.png" alt="image-20250822101723764" style="zoom:67%;" /></p><ul><li>核心原理: 通过预构建的索引文件加速搜索过程，不需要遍历所有向量，而是快速定位可能包含最相似向量的子集</li><li>与kNN区别: ANN(Approximate Nearest Neighbor)是近似搜索，效率高但结果不一定完美；kNN需要精确遍历所有数据</li><li>主要特点:<ul><li>支持单向量和批量向量搜索</li><li>可在特定分区内进行搜索</li><li>支持多种相似度度量方式(L2、IP、COSINE等)</li><li>可通过过滤条件、范围搜索增强效果</li><li>支持分页查询和输出字段控制</li></ul></li></ul><h2 id="过滤搜索"><a href="#过滤搜索" class="headerlink" title="过滤搜索"></a>过滤搜索</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822102907414.png" alt="image-20250822102907414" style="zoom:67%;" /></p><h3 id="标准过滤"><a href="#标准过滤" class="headerlink" title="标准过滤"></a>标准过滤</h3><ul><li>原理: 先执行过滤条件筛选数据，再在过滤后的数据集上进行搜索</li><li>适用场景: 过滤条件简单且能显著减少数据量的情况</li></ul><h3 id="迭代过滤"><a href="#迭代过滤" class="headerlink" title="迭代过滤"></a>迭代过滤</h3><ul><li>原理: 边搜索边过滤，动态判断是否满足条件</li><li>优势: 处理复杂过滤条件时可能更高效</li><li>实现: 通过设置”hints”: “iterative filter”参数启用</li></ul><h2 id="范围搜索"><a href="#范围搜索" class="headerlink" title="范围搜索"></a>范围搜索</h2><p>范围搜索是在 ANN 搜索结果的基础上，进一步按相似度（或距离）阈值进行筛选，将符合条件的向量返回。</p><p>通过两个参数 radius（外圈半径）和 range_filter（内圈半径）构成一对同心圆，返回落在这两个圆之间（或内外圈定义区间内）的所有向量</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822103507782.png" alt="image-20250822103507782" style="zoom:67%;" /></p><ul><li>原理: 在ANN结果基础上，按相似度阈值进一步筛选</li><li>参数:<ul><li>radius: 外圈半径</li><li>range_filter: 内圈半径</li></ul></li><li>效果: 返回落在两个半径定义的环形区域内的向量</li></ul><h2 id="分组搜索"><a href="#分组搜索" class="headerlink" title="分组搜索"></a>分组搜索</h2><p>目的：在基于向量的相似度搜索结果中，按某个标量字段（如 docId、category）分组，以提高结果多样性，避免同一组内多个相似片段抢占 Top-K。</p><p>场景举例：对拆分成多个段落的文档做检索，希望最终返回最相关的文档列表，而不是返回同一文档中多个相似段落。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822103728847.png" alt="image-20250822103728847" style="zoom:67%;" /></p><p>流程</p><ol><li>ANN 检索 对整个集合执行近似最近邻搜索，得到若干最相似实体（chunk）。</li><li>按字段分组 将检索结果按 group_by_field 指定的字段值（如 docId）分桶。</li><li>选取每组 TopN 默认从每个组中取最相似的 1条； 如需更多，可通过 group_size（每组返回条数）和 strict_group_size（是否严格保证每组条数）进行控制。</li><li>整体汇总 最终按组级 TopK（limit）选出若干组，并返回各组内按相似度排序的实体。</li></ol><h2 id="混合搜索"><a href="#混合搜索" class="headerlink" title="混合搜索"></a>混合搜索</h2><p>同时对同一实体中的多种向量字段（如稠密向量 dense 与稀疏向量 sparse）分别执行 ANN 搜索，将各自返回的 Top-K 结果按得分或排名策略重新融合（rerank），最后输出一个统一的结果集。</p><p>目的：融合多模态或多视角特征，提高检索的准确性和鲁棒性。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822103942383.png" alt="image-20250822103942383" style="zoom:67%;" /></p><p>实现步骤：</p><ul><li>Embedding 生成<ul><li>稠密向量（dense）：用 BERT、CLIP、其他深度模型生成。</li><li>稀疏向量（sparse）：用 BM25、SPLADE、BGE-M3 等算法或 Milvus Function 生成。</li></ul></li><li>创建集合并定义多向量字段<ul><li>在建表时同时包括 FLOAT_VECTOR（稠密）</li><li>和 SPARSE_FLOAT_VECTOR（稀疏）字段</li><li>并分别建立索引</li></ul></li><li>插入数据<ul><li>同一条记录同时插入两种向量。</li><li>发起多次基础 ANN 搜索</li><li>针对每个向量字段构造一个AnnSearchRequest</li></ul></li><li>选择重排序（Reranking）策略<ul><li>WeightedRanker：可为每个向量字段分配权重，强化某些字段的重要性</li><li>RRFRanker（Reciprocal Rank Fusion）：平衡融合，默认参数 k 可调</li></ul></li><li>执行 Hybrid Search<ul><li>limit 决定最终输出的 Top-K 条融合结果。</li></ul></li></ul><h2 id="BM25-全文关键字检索"><a href="#BM25-全文关键字检索" class="headerlink" title="BM25 全文关键字检索"></a>BM25 全文关键字检索</h2><p>通过 BM25 对原始文本进行关键词匹配排序，弥补语义向量检索可能忽略精确词条匹配的不足。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822104341926.png" alt="image-20250822104341926" style="zoom:67%;" /></p><p>优势：</p><ul><li>接受原始文本输入，无需手动生成向量；</li><li>自动将文本分词、映射为稀疏向量（SPARSE_FLOAT_VECTOR）；</li><li>适合需精确命中关键术语的场景，如法律、医药、配置文档等；</li><li>与稠密向量检索结合，可在 RAG 中实现“语义 + 关键词”双保险。</li></ul><p>应用: 可与稠密向量检索结合实现”语义+关键词”双保险</p><h2 id="Text-Match-精确文本匹配"><a href="#Text-Match-精确文本匹配" class="headerlink" title="Text Match: 精确文本匹配"></a>Text Match: 精确文本匹配</h2><p>精确匹配：基于倒排索引查找包含指定词条的文档，不计算相关度分数，仅返回命中实体。<br>底层引擎：集成 Tantivy ，针对每个 VARCHAR 字段建立倒排索引，按词条快速定位。</p><ul><li><p>原理: 基于倒排索引查找包含指定词条的文档</p></li><li><p>特点:</p><ul><li>不计算相关度分数，仅返回命中实体</li><li>底层集成Tantivy引擎</li></ul></li><li><p>查询语法:</p><ul><li><p>包含 machine 或 deep: TEXT_MATCH(text, ‘machine deep’)</p></li><li><p>包含 machine 且包含 deep: TEXT_MATCH(text, ‘machine’) AND TEXT_MATCH(text, ‘deep’)</p></li><li><p>包含 machine、learning，但不包含 deep: </p><p>TEXT_MATCH(text, ‘machine’)<br>AND TEXT_MATCH(text, ‘learning’)<br>AND NOT TEXT_MATCH(text, ‘deep’)</p></li></ul></li></ul><h1 id="搜索和查询"><a href="#搜索和查询" class="headerlink" title="搜索和查询"></a>搜索和查询</h1><ul><li>本质区别：<ul><li>搜索：基于向量相似度，通过距离度量找到相近向量（如余弦相似度）</li><li>查询：基于元数据（标量数据）直接定位实体，与向量无关</li></ul></li><li>典型场景：<ul><li>搜索适用于”找到相似内容”（如推荐系统）</li><li>查询适用于”精确查找记录”（如数据库检索）</li></ul></li></ul><div class="table-container"><table><thead><tr><th>方法</th><th>作用</th><th>输入</th><th>输出</th><th>场景</th></tr></thead><tbody><tr><td><strong>Get</strong></td><td>根据主键查询指定实体</td><td>collection_name, ids</td><td>指定主键对应的所有字段实体</td><td>已知 ID 时最快速地获取完整记录</td></tr><tr><td><strong>Query</strong></td><td>根据自定义过滤表达式查询指定数量的实体</td><td>collection_name, filter, limit</td><td>满足条件最多 limit 个实体</td><td>需要一次性拿到部分满足条件的结果</td></tr><tr><td><strong>QueryIterator</strong></td><td>根据自定义过滤表达式按批次 (分页) 遍历所有实体</td><td>collection_name, expr, batch_size</td><td>通过 iterator.next() 分批返回实体</td><td>需要遍历所有满足条件的实体 (流式或分页处理场景)</td></tr></tbody></table></div><h2 id="Get和Query"><a href="#Get和Query" class="headerlink" title="Get和Query"></a>Get和Query</h2><ul><li>核心功能：<ul><li>Get：通过主键ID快速获取完整记录（如查询ID为0/1/2的记录）</li><li>Query：通过过滤表达式获取限定数量的结果（如color=”红色”取前5条）</li></ul></li><li>参数特点：<ul><li>Get需明确指定ids字段列表</li><li>Query支持filter表达式和limit限制（示例：color like “color_1%”）</li></ul></li></ul><h2 id="QueryIterator"><a href="#QueryIterator" class="headerlink" title="QueryIterator"></a>QueryIterator</h2><ul><li>流式处理：<ul><li>通过iterator.next()分批返回结果（类似OpenAI API的流式响应）</li><li>每批数量由batch_size参数控制（如每次返回5条记录）</li></ul></li><li>适用场景：<ul><li>处理大规模结果集（避免内存溢出）</li><li>需要渐进式展示结果的场景（如分页加载）</li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第二十二讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库索引</title>
    <link href="https://jinglv.github.io/2025/08/19/ai/rag/21-vector-db-index/"/>
    <id>https://jinglv.github.io/2025/08/19/ai/rag/21-vector-db-index/</id>
    <published>2025-08-18T16:00:00.000Z</published>
    <updated>2025-08-19T07:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Milvus中的常用索引介绍"><a href="#Milvus中的常用索引介绍" class="headerlink" title="Milvus中的常用索引介绍"></a>Milvus中的常用索引介绍</h1><h2 id="FLAT-索引-–-全量扫描"><a href="#FLAT-索引-–-全量扫描" class="headerlink" title="FLAT 索引 – 全量扫描"></a>FLAT 索引 – 全量扫描</h2><p>每个查询向量直接与数据集中的每个向量进行比较，无需任何高级预处理或数据结构化。</p><p>工作原理：全量扫描每个查询向量，直接与数据集中的每个向量进行比较</p><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;your_vector_field_name&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;FLAT&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    params=&#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>特点：<ul><li>无预处理：数据加载时全部加载到内存，没有任何结构化处理</li><li>精准度高：能达到embedding模型给出的上限，是向量检索的”天花板”</li><li>适用场景：适合数据量在几万到几十万条的情况</li><li>性能局限：百万/千万级数据时延迟过高，不推荐使用</li></ul></li></ul><h2 id="IVF-FLAT-倒排文件"><a href="#IVF-FLAT-倒排文件" class="headerlink" title="IVF_FLAT - 倒排文件"></a>IVF_FLAT - 倒排文件</h2><p>当对数据集进行聚类可以减少搜索空间，并且有足够的内存来存储聚类数据时，快速查询响应并保证高精度。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820095803094.png" alt="image-20250820095803094" style="zoom:67%;" /></p><ul><li>核心思想：通过聚类减少搜索空间，相似向量聚为一类(类似：一张照片中，将人、猫、狗分别进行分区)</li><li>工作流程：<ul><li>使用k-means算法将向量聚类（nlist指定聚类数量）</li><li>查询时计算与各聚类中心的距离</li><li>只在最近的nprobe个聚类中进行搜索</li><li>返回最相似的结果</li></ul></li><li>关键参数：<ul><li>nlist：指定聚类分区数量（如64/80）</li><li>nprobe：搜索时考虑的聚类数量（如3/5）</li></ul></li><li>优势：<ul><li>效率提升：相比FLAT可快nlist倍（如分成80类快80倍）</li><li>灵活性：通过调整nprobe平衡精度与性能</li></ul></li><li>局限性：精度略低于FLAT，但通过增加nprobe可接近</li></ul><p>创建索引代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;IVF_FLAT&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;nlist&quot;</span>: <span class="number">64</span>  <span class="comment"># 设置聚类数量</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="IVF-PQ：倒排文件与乘积量化"><a href="#IVF-PQ：倒排文件与乘积量化" class="headerlink" title="IVF_PQ：倒排文件与乘积量化"></a>IVF_PQ：倒排文件与乘积量化</h2><p>Inverted File with Product Quantization，是一种结合索引和压缩的混合方法。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820101017610.png" alt="image-20250820101017610" style="zoom:80%;" /></p><ul><li>核心原理: 结合倒排索引和乘积量化的混合方法，通过维度分解和子空间量化实现高效压缩检索</li><li>工作流程:<ul><li>维度分解: 将高维向量分解为m个等长子向量，m值控制分解粒度和压缩率</li><li>码本生成: 每个子空间用K-means聚类生成$2^n$﻿位质心码本（如nbits=8时码本含256个质心）</li><li>矢量量化: 子向量通过最近邻搜索匹配对应子空间的质心</li><li>压缩表示: 最终编码由m个子空间索引组成，存储需求从$D×32$﻿位降至$m×nbits$﻿位</li></ul></li><li>量化本质:<ul><li>压缩原理: 通过降低参数精度（如64位浮点→8位整型）减少存储空间</li><li>性能影响: 显著提升检索速度但会损失精度，适用于对速度敏感、精度要求宽松的场景</li></ul></li><li>关键参数:<ul><li>k: 每个子空间的质心数，计算公式﻿$k=2^{nbits}$﻿</li><li>m: 原始向量分割的子向量数量，需满足$dim/m≥2$﻿</li><li>nbits: 质心索引编码位数（典型值为8位）</li></ul></li></ul><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;IVF_PQ&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;nlist&quot;</span>: <span class="number">64</span>,  <span class="comment"># 聚类中心数量，通常设置为 4*sqrt(n)，n 为向量数量</span></span><br><span class="line">        <span class="string">&quot;m&quot;</span>: <span class="number">32</span>,  <span class="comment"># 向量被分割的子向量数量，通常为 dim/m &gt;= 2，这里 128/32=4</span></span><br><span class="line">        <span class="string">&quot;nbits&quot;</span>: <span class="number">8</span>  <span class="comment"># 每个子向量的编码位数，通常为 8 位</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>参数配置:<ul><li>nlist=64: 聚类中心数量，建议设为﻿$4×\sqrt{n}$﻿（n为向量总数）</li><li>m=32: 128维向量分割为32个子向量（满足128/32=4）</li><li>nbits=8: 每个子向量8位编码，产生256个质心（﻿$2^8$﻿）</li></ul></li><li>实现特点:<ul><li>小数据集难以体现性能优势，适合大规模高维向量场景</li><li>相比原始存储（如1536维32位浮点向量），压缩后仅需$m×nbits$﻿存储空间</li></ul></li></ul><h2 id="HNSW：分层可导航小世界"><a href="#HNSW：分层可导航小世界" class="headerlink" title="HNSW：分层可导航小世界"></a>HNSW：分层可导航小世界</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820101448765.png" alt="image-20250820101448765" style="zoom:67%;" /></p><p><strong>分层可导航小世界 (HNSW)</strong> 算法构建了一个多层图，有点像具有不同缩放级别的地图。底层包含所有数据点，而上层则由从下层采样的数据点子集组成。</p><p>在这个层次结构中，每一层都包含代表数据点的节点，这些节点通过指示其接近度的边连接起来。较高的层级提供长距离跳跃，以快速接近目标，而较低的层级则支持细粒度搜索，以获得最准确的结果。</p><ol><li><strong>入口点</strong>：搜索从顶层的固定入口点开始，该入口点是图中预先确定的节点。</li><li><strong>贪婪搜索</strong>：该算法贪婪地移动到当前层的最近邻，直到无法再接近查询向量。上层起到导航的作用，充当粗略的过滤器，为下层更精细的搜索找到潜在的入口点。</li><li><strong>层下降</strong>：一旦在当前层达到局部最小值，算法就会使用预先建立的连接跳转到较低层，并重复贪婪搜索。</li><li><strong>最终细化</strong>：该过程持续直至到达底层，其中最终细化步骤识别最近的邻居。</li></ol><p>总结：</p><ul><li>算法架构: 多层图结构，类似多分辨率地图<ul><li>底层: 包含全部数据点</li><li>上层: 下层数据点的抽样子集，层级越高数据点越稀疏</li></ul></li><li>搜索机制:<ul><li>入口点: 从顶层固定入口点启动搜索</li><li>贪婪搜索: 逐层寻找最近邻，上层实现快速粗筛，下层进行精细搜索</li><li>层间跳转: 到达局部最优后降层继续搜索，直至底层完成最终匹配</li></ul></li><li>核心参数:<ul><li>M: 节点最大连接数（控制图密度）</li><li>efConstruction: 构建时的候选邻居数（影响索引质量）</li></ul></li><li>性能特点:<ul><li>精度与效率平衡良好，适合需要高准确率的场景</li><li>通过层级结构实现类似雷达的渐进式搜索，逐步扩大搜索范围</li></ul></li></ul><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;HNSW&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;M&quot;</span>: <span class="number">64</span>,  <span class="comment"># 最大邻居数</span></span><br><span class="line">        <span class="string">&quot;efConstruction&quot;</span>: <span class="number">100</span>  <span class="comment"># 构建时的候选邻居数</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="DISKANN（磁盘版图索引）"><a href="#DISKANN（磁盘版图索引）" class="headerlink" title="DISKANN（磁盘版图索引）"></a>DISKANN（磁盘版图索引）</h2><p>基于 Vamana 图（类似 HNSW），将图结构和压缩向量存放在 SSD 上；在内存中只保留元数据。</p><p><strong>查询流程</strong>：结合 PQ 压缩和图遍历，从磁盘 I/O 中读入必要节点。</p><p><strong>优缺点</strong></p><ul><li>✔ 适合海量数据：可支撑十亿级向量</li><li>✔ RAM 占用低：仅元数据在内存</li><li>✘ 延迟受 SSD IOPS 限制：对 I/O 性能依赖高</li></ul><p><strong>适用场景</strong></p><ul><li>数据量远超可用内存</li><li>对响应时延有一定容忍（或 SSD IOPS 足够高）</li></ul><p>总结：</p><ul><li>核心思想：基于Vamana图（类似HNSW）结构，将图结构和压缩向量存放在SSD上，内存中仅保留元数据</li><li>查询机制：结合PQ压缩和图遍历技术，按需从磁盘I/O读取必要节点</li><li>优势特点：<ul><li>海量支持：可处理十亿级向量数据</li><li>内存优化：仅需存储元数据，RAM占用极低</li></ul></li><li>性能局限：<ul><li>I/O依赖：查询延迟受SSD IOPS限制</li><li>速度折衷：相比纯内存方案存在性能差距</li></ul></li><li>适用场景：<ul><li>数据规模远超可用内存容量</li><li>对响应时延有一定容忍度（或具备高性能SSD）</li></ul></li></ul><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,  <span class="comment"># 支持 L2、IP 或 COSINE</span></span><br><span class="line">    index_type=<span class="string">&quot;DISKANN&quot;</span>,  <span class="comment"># 使用 DiskANN 索引</span></span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>索引创建步骤：<ul><li>准备索引参数：使用prepare_index_params()方法初始化索引参数对象</li><li>添加索引配置：通过add_index()方法设置字段名、度量类型和索引类型<ul><li>支持三种度量类型：$L2$﻿距离、内积(、$IP$﻿)和余弦相似度($COSINE$﻿)</li><li>索引类型需明确指定为”DISKANN”</li></ul></li><li>执行创建操作：调用create_index()方法并传入集合名称和索引参数</li></ul></li><li>DiskANN特点：<ul><li>硬盘存储：索引数据直接存储在硬盘而非内存，适合大规模数据集</li><li>简单配置：只需在索引类型参数中指定”DISKANN”即可启用</li><li>自动运行：设置完成后系统会自动在硬盘上构建和运行索引</li></ul></li><li>注意事项：<ul><li>索引创建是同步操作，建议设置sync=True等待完成</li><li>创建前需确保集合已存在且包含向量数据</li><li>不同度量类型会影响搜索结果，需根据应用场景选择</li></ul></li></ul><h1 id="索引和向量类型以及度量标准相关"><a href="#索引和向量类型以及度量标准相关" class="headerlink" title="索引和向量类型以及度量标准相关"></a>索引和向量类型以及度量标准相关</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820102716154.png" alt="image-20250820102716154" style="zoom:50%;" /></p><ul><li>索引体系：<ul><li>浮点向量：支持FLAT/IVF_FLAT/IVF_SQ8/IVF_PQ/HNSW/DISKANN等</li><li>稀疏向量：仅支持SPARSE_INVERTED_INDEX</li><li>二进制向量：提供BIN_FLAT/BIN_IVF_FLAT专用索引</li></ul></li><li>度量标准：<ul><li>浮点向量：适用$L_2$﻿/IP/COSINE三种距离</li><li>稀疏向量：限定IP/BM25相似度</li><li>二进制向量：专用JACCARD/HAMMING距离</li></ul></li><li>组合规律：<ul><li>浮点向量索引体系最丰富（含GPU加速版本）</li><li>二进制向量索引采用”BIN_”前缀标识</li><li>稀疏向量仅支持倒排索引结构</li></ul></li></ul><h1 id="各种类型索引的组合"><a href="#各种类型索引的组合" class="headerlink" title="各种类型索引的组合"></a>各种类型索引的组合</h1><div class="table-container"><table><thead><tr><th>名称</th><th>分类</th><th>适用场景</th><th>嵌入类型</th></tr></thead><tbody><tr><td>FLAT</td><td>普通索引</td><td>数据集规模相对较小需要100%的召回率</td><td>浮点嵌入</td></tr><tr><td>IVF_FLAT</td><td>基于树的索引</td><td>查询速度要求高同时需要尽可能高的召回率<br />查询速度非常快内存资源有限</td><td>浮点嵌入</td></tr><tr><td>IVF_SQ8</td><td>基于量化的索引</td><td>可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td></td><td></td><td>查询速度较快内存资源有限</td><td></td></tr><tr><td>IVF_PQ</td><td>基于量化的索引</td><td>可接受在召回率上有轻微折中<br /></td><td>查询速度非常快对召回率要求高浮点嵌入</td></tr><tr><td>SCANN</td><td>基于量化的索引</td><td>查询速度非常快对召回率要求高内存资源充足</td><td>浮点嵌入</td></tr><tr><td>HNSW</td><td>基于图的索引</td><td>查询速度非常快对召回率要求高<br />内存资源较为充足</td><td>浮点嵌入</td></tr><tr><td>HNSW_SQ</td><td>基于图的索引</td><td>查询速度非常快内存资源有限<br />可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td>HNSW_PQ</td><td>基于图的索引</td><td>查询速度中等内存资源非常有限<br />可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td>HNSW_PRQ</td><td>基于图的索引</td><td>查询速度中等内存资源非常有限<br />可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td>BIN_FLAT</td><td>普通索引</td><td>数据集规模较小<br />需要精确的搜索结果无须压缩</td><td>二进制嵌入</td></tr><tr><td>BIN_IVF_FLAT</td><td>基于树的索引</td><td>需要高查询速度对召回率要求高<br />数据集规模较大</td><td>二进制嵌入</td></tr><tr><td>SPARSE_INVERTED_INDEX</td><td>普通索引</td><td>数据集规模较小需要100%的召回率<br />适用于稀疏向量的检索</td><td>稀疏嵌入</td></tr></tbody></table></div><ul><li>FLAT索引：<ul><li>分类：普通索引</li><li>适用场景：数据集规模较小且需要100%召回率</li><li>嵌入类型：浮点嵌入</li><li>特点：全量精度最高，适合对召回率要求严格的场景</li></ul></li><li>IVF_FLAT索引：<ul><li>分类：基于树的索引</li><li>适用场景：查询速度要求高同时需要尽可能高的召回率</li><li>嵌入类型：浮点嵌入</li><li>特点：通过聚类(树状结构)加速查询，适合大规模数据</li></ul></li><li>量化索引系列：<ul><li>包含IVF_SQ8/IVF_PQ/SCANN等</li><li>共同特点：通过有损压缩减少内存占用</li><li>取舍：在查询速度和内存占用上有优势，但会牺牲部分召回率</li><li>典型应用：IVF_SQ8适合内存紧张场景，SCANN适合资源充足但对召回率要求高的场景</li></ul></li><li>图索引系列：<ul><li>包含HNSW/HNSW_SQ/HNSW_PQ等</li><li>共同特点：基于图网络结构实现快速导航</li><li>优势：HNSW在速度和召回率上表现优异，适合资源充足场景</li><li>变体：带量化的版本(HNSW_SQ等)在内存占用和性能间取得平衡</li></ul></li><li>二进制索引：<ul><li>BIN_FLAT：适合小规模二进制数据精确搜索</li><li>BIN_IVF_FLAT：适合大规模二进制数据高速查询</li><li>特点：专门处理二进制嵌入，不进行压缩</li></ul></li><li>稀疏索引：<ul><li>SPARSE_INVERTED_INDEX：专为稀疏向量设计</li><li>特点：保持100%召回率，适合小规模稀疏数据</li></ul></li></ul><h1 id="索引选型速览"><a href="#索引选型速览" class="headerlink" title="索引选型速览"></a>索引选型速览</h1><ul><li>精度优先：<ul><li>选择FLAT索引</li><li>特点：保证100%召回率，适合对精度要求极高的场景</li></ul></li><li>低延迟场景：<ul><li>选择HNSW系列</li><li>适用条件：top-K较小且内存资源充足</li><li>优势：查询速度非常快</li></ul></li><li>海量数据处理：<ul><li>选择IVF_FLAT</li><li>特点：适合大规模数据和大top-K场景</li><li>原理：通过聚类减少搜索范围</li></ul></li><li>内存优化方案：<ul><li>IVF_SQ8或IVF_PQ</li><li>特点：量化压缩减少内存占用</li><li>取舍：会轻微影响召回率</li></ul></li><li>GPU加速：<ul><li>GPU_IVF_FLAT/GPU_IVF_PQ</li><li>优势：利用GPU并行计算能力加速</li></ul></li><li>超大数据集：<ul><li>DISKANN</li><li>特点：数据量超过内存容量时使用</li><li>原理：基于磁盘的索引结构</li></ul></li></ul><h1 id="Milvus中索引的工作机制"><a href="#Milvus中索引的工作机制" class="headerlink" title="Milvus中索引的工作机制"></a>Milvus中索引的工作机制</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820103439677.png" alt="image-20250820103439677" style="zoom:50%;" /></p><p>Milvus 的向量索引采用“粗—快—准”三层分层架构，以在检索效率和精度之间取得最佳平衡：</p><ol><li><strong>数据结构（粗过滤）</strong>— 例如 IVF 将向量按质心划分存储桶，或 HNSW构建分层图网络，通过只扫描与查询向量质心或邻域相关的子集，实现对大规模数据的快速过滤。</li><li><strong>量化（加速计算）</strong>— 通过 SQ8、PQ 等有损压缩，将向量从 32 位浮点压缩到 8 位或更低维度，大幅减少内存和计算开销，快速计算候选集距离。</li><li><strong>精炼器（精准重排</strong>）— 对量化后的候选结果（topK×扩展率）使用FP32 精度重新计算距离，对排序进行微调，弥补量化带来的误差，确保最终返回的 topK 结果高质量、低延迟。</li></ol><p>总结：</p><ul><li>三层架构：<ul><li>数据结构层：负责粗过滤，如IVF的聚类或HNSW的图结构</li><li>量化层：可选，通过SQ8/PQ等算法压缩数据</li><li>精炼器：对候选结果进行精准重排</li></ul></li><li>数据结构层：<ul><li>核心功能：组织数据以加速检索</li><li>实现方式：聚类(IVF)或图网络(HNSW)</li><li>特点：只扫描相关子集，大幅提高效率</li></ul></li><li>量化技术：<ul><li>目的：减少内存和计算开销</li><li>方法：将32位浮点压缩到8位或更低</li><li>影响：会引入误差，但显著提升速度</li></ul></li><li>精炼器机制：<ul><li>工作流程：先获取topK×扩展率的候选集，再用FP32精度重算距离</li><li>优势：弥补量化误差，确保最终结果质量</li><li>特点：类似检索后处理，提升排序准确性</li></ul></li><li>设计理念：<ul><li>“粗-快-准”分层架构</li><li>在检索效率和精度间取得最佳平衡</li><li>内部自动完成多阶段优化</li></ul></li></ul><h1 id="性能的权衡"><a href="#性能的权衡" class="headerlink" title="性能的权衡"></a>性能的权衡</h1><p><strong>构建时间 vs QPS vs 召回率</strong></p><ul><li>基于图（如 HNSW）通常能提供最高的 QPS 和低延迟，尤其适合 Top-K 较小（≤2 000）或对高召回率有需求的场景。</li><li>IVF 系列（IVF-PQ/SQ8 等）在 Top-K 较大（＞2 000）时更高效，能够通过聚类分桶减少检索范围。</li><li>在相同压缩率下，PQ 比 SQ8 召回率更高，但 SQ8 的查询速度略胜一筹。</li><li>使用 DiskANN（磁盘＋PQ 量化＋Vamana 图）可处理远超内存容量的海量数据，但会受制于磁盘 IOPS。</li></ul><p><strong>容量与内存映射（mmap</strong>）</p><ul><li>如果所有向量数据都能装进内存，可优先选用内存索引（HNSW、IVF＋精炼）并配合 mmap 优化大文件访问。</li><li>如果只有部分数据能进内存，DiskANN 是更稳的低延迟方案；IVFPQ/SQ8＋mmap 则在成本和精度间提供折中。</li></ul><p><strong>过滤率（Filter Rate）与召回策略</strong></p><ul><li>过滤率 &lt; 85%：图索引效果最佳</li><li>85% ≤ 过滤率 ≤ 95%：IVF 系列更合适</li><li>过滤率 &gt; 98%：暴力搜索（FLAT）可保证最高召回</li></ul><p><strong>Top-K 大小影响</strong></p><ul><li>小 top-K、高召回：基于图</li><li>大 top-K（占数据集 ≥ 1%）：IVF 系列</li><li>极高召回率（＞ 99%）：FLAT＋GPU 重算</li></ul><p>总结：</p><ol><li>构建时间 vs QPS vs 召回率<ul><li>基于图的索引优势：在Top-K较小（﻿$\leq 2000$﻿）或需要高召回率时，HNSW等图结构能提供最高QPS和最低延迟。</li><li>IVF系列适用场景：当Top-K较大（$&gt; 2000$﻿）时，IVF-PQ/SQ8通过聚类分桶减少检索范围更高效。</li><li>PQ与SQ8对比：相同压缩率下PQ召回率更高，但SQ8查询速度更快。</li><li>DiskANN特点：采用磁盘存储+PQ量化+Vamana图结构可处理超内存数据，但性能受磁盘IOPS限制。</li></ul></li><li>容量与内存映射<ul><li>全内存场景：优先选择HNSW或IVF+精炼索引，配合mmap优化大文件访问。</li><li>部分内存场景：<ul><li>DiskANN是低延迟稳定方案</li><li>VFPQ/SQ8+mmap在成本与精度间提供折中方案</li></ul></li></ul></li><li>过滤率与召回策略<ul><li>低过滤率（&lt;85%）：图索引效果最佳</li><li>中过滤率（85%-95%）：IVF系列更合适</li><li>极高过滤率（&gt;98%）：暴力搜索(FLAT)可保证最高召回</li></ul></li><li>Top-K大小影响<ul><li>小top-K高召回：基于图结构</li><li>大top-K（≥数据集1%）：IVF系列</li><li>极高召回率（&gt;99%）：FLAT+GPU重算</li></ul></li></ol><h1 id="案例：内存估算（以-1-百万条-128-维向量为例）"><a href="#案例：内存估算（以-1-百万条-128-维向量为例）" class="headerlink" title="案例：内存估算（以 1 百万条 128 维向量为例）"></a>案例：内存估算（以 1 百万条 128 维向量为例）</h1><div class="table-container"><table><thead><tr><th>索引类型</th><th>组成</th><th>内存消耗</th></tr></thead><tbody><tr><td>IVF-PQ</td><td>质心(2 000x128x4 B)=1 MB<br/>簇分配(1 000 000x2 B)=2 MB<br/>PQ(1 000 000x8 B)=8 MB</td><td>≈11 MB</td></tr><tr><td>IVF-PQ + 10% 精炼</td><td>IVF-PQ(11 MB)+精炼缓存(1 000 000x128 x 0.1 x4 B)=51.2 MB</td><td>≈62 MB</td></tr><tr><td>IVF-SQ8</td><td>质心(1 MB)+簇分配(2 MB)+SQ8(1 000 000x128 x 1 B)=128 MB</td><td>≈131 MB</td></tr><tr><td>IVF-FLAT</td><td>质心(1 MB)+簇分配(2 MB)+原始向量(1 000 000x128x4 B)=512 MB</td><td>≈515 MB</td></tr><tr><td>HNSW</td><td>图结构(1 000 000x32x4 B)=128 MB<br/>原始向量=512 MB</td><td>≈640 MB</td></tr><tr><td>HNSW-PQ</td><td>图结构(128 MB)+PQ(1 000 000x8 B)=8 MB</td><td>≈136 MB</td></tr></tbody></table></div><ul><li>IVF-PQ：11MB（质心1MB + 簇分配2MB + PQ编码8MB）</li><li>IVF-PQ+10%精炼：62MB（基础11MB + 精炼缓存51.2MB）</li><li>IVF-SQ8：131MB（质心1MB + 簇分配2MB + SQ8编码128MB）</li><li>IVF-FLAT：515MB（含原始向量存储）</li><li>HNSW：&lt;640MB（图结构128MB + 原始向量512MB）</li><li>HNSW-PQ：136MB（图结构128MB + PQ编码8MB）</li><li>估算方法：根据实际数据量参照表格比例计算，需结合可用内存选择合适索引类型。工业项目中需查阅文档获取更精确的内存映射算法参数。</li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第二十一讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库介绍</title>
    <link href="https://jinglv.github.io/2025/08/18/ai/rag/19-vector-db/"/>
    <id>https://jinglv.github.io/2025/08/18/ai/rag/19-vector-db/</id>
    <published>2025-08-17T16:00:00.000Z</published>
    <updated>2025-08-18T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向量存储"><a href="#向量存储" class="headerlink" title="向量存储"></a>向量存储</h1><h2 id="结构化数据vs向量数据"><a href="#结构化数据vs向量数据" class="headerlink" title="结构化数据vs向量数据"></a>结构化数据vs向量数据</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250818104425937.png" alt="image-20250818104425937" style="zoom:50%;" /></p><ul><li>结构化数据存储：通过数据库表结构存储，使用主键和外键相互链接形成复杂schema</li><li>非结构化数据转换：文本/图片/音频等通过嵌入模型转化为数字形式的向量</li><li>存储方式差异：<ul><li>结构化：传统SQL数据库表形式（如SQL Server）</li><li>向量数据：通过嵌入模型转换后存储在向量数据库</li></ul></li></ul><h2 id="简单的向量存储"><a href="#简单的向量存储" class="headerlink" title="简单的向量存储"></a>简单的向量存储</h2><p>使用LlamaIndex的index.storage_context.persist(persist_dir=”saved_index”) 将向量索引保存到磁盘</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> llama_index.core.node_parser <span class="keyword">import</span> SentenceSplitter</span><br><span class="line"></span><br><span class="line">text_splitter = SentenceSplitter(chunk_size=<span class="number">512</span>, chunk_overlap=<span class="number">10</span>)</span><br><span class="line">nodes = text_splitter.get_nodes_from_documents(documents)</span><br><span class="line">index = VectorStoreIndex(nodes, embed_model=embed_model) <span class="comment"># 从nodes中生成Index</span></span><br><span class="line"><span class="comment"># 保存索引到磁盘</span></span><br><span class="line">index.storage_context.persist(persist_dir=<span class="string">&quot;saved_index&quot;</span>)</span><br></pre></td></tr></table></figure><p>此写法会在当前目录下创建一个目录为saved_index，将向量索引的内容存储到该目录下。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250818111917272.png" alt="image-20250818111917272" style="zoom:67%;" /></p><ul><li>本地存储实现：<ul><li>使用storage_context.persist(persist_dir=”saved_index”)语句</li><li>生成5个核心文件：<ul><li>default_vector_store.json（向量数据）</li><li>docstore.json（文档关系）</li><li>graph_store.json（图结构）</li><li>image_vector_store.json（图像向量）</li><li>index_store.json（索引结构）</li></ul></li></ul></li><li>文件功能：<ul><li>index_store.json：记录所有节点ID和索引元数据</li><li>docstore.json：存储文档块间的前后关系（如relationship字段）</li></ul></li><li>节点关系表示：<ul><li>通过node_id和node_type字段建立关联</li><li>示例：relationship “3”表示后续节点关系</li><li>包含原始文档元数据（文件路径、创建时间等）</li></ul></li></ul><h1 id="从简单向量存储到商用向量数据库"><a href="#从简单向量存储到商用向量数据库" class="headerlink" title="从简单向量存储到商用向量数据库"></a>从简单向量存储到商用向量数据库</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250815103626944.png" alt="image-20250815103626944"></p><p>Milvus提供3种部署模式，适用于从简单应用到管理数百亿向量的大规模Kubernetes集群的数据规模。</p><ul><li>Milvus Lite作为Milvus的轻量级版本，易于集成到应用程序中，本书将以它为例进行介绍。</li><li>Milvus Standalone是Milvus的单机服务器版本，所有组件都打包在一个Docker镜像中，便于部署。</li><li>Milvus Distributed可以部署在Kubernetes集群上，支持十亿级向量甚至更大规模场景的云原生架构。</li></ul><h1 id="商用向量数据库的核心功能"><a href="#商用向量数据库的核心功能" class="headerlink" title="商用向量数据库的核心功能"></a>商用向量数据库的核心功能</h1><div class="table-container"><table><thead><tr><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><strong>性能和容错</strong></td><td>分片，在多个节点上对数据进行分区; 复制，在不同节点上创建多个数据副本。发生故障时启用容错机制，确保性能稳定</td></tr><tr><td><strong>监测</strong></td><td>监测资源使用情况、查询性能及系统运行状况，持续优化性能和容错性</td></tr><tr><td><strong>访问控制</strong></td><td>确保数据安全，提供合规性、问责制及审计能力; 保护数据免受未经授权访问，并记录用户活动</td></tr><tr><td><strong>可扩展性与可调性</strong></td><td>支持横向扩展，适应不同的插入率、查询率及硬件差异</td></tr><tr><td><strong>多用户和数据隔离</strong></td><td>支持多用户或多租户; 实现数据隔离，确保用户活动 (如插入、删除查询) 不影响其他用户的私密数据</td></tr><tr><td><strong>备份</strong></td><td>定期创建数据备份; 支持在数据丢失或损坏时恢复到之前的状态，减少中断时间</td></tr><tr><td><strong>API和SDK</strong></td><td>提供易于操作的API; 封装多个API，方便开发者在特定用例 (如语义搜索、推荐系统等) 中使用向量数据库，不需要关注底层结构</td></tr></tbody></table></div><ul><li>关键能力：<ul><li>分片与复制：数据分区存储和容错机制</li><li>访问控制：合规审计和安全防护</li><li>横向扩展：适应不同硬件和负载</li><li>多租户隔离：保证用户数据私密性</li></ul></li><li>选型考量：<ul><li>社区活跃度（如PyTorch式生态）</li><li>API/SDK完善程度</li><li>监控和备份能力</li><li>检索算法多样性（哈希/量化/图搜索）</li></ul></li></ul><h1 id="主流向量数据库一览"><a href="#主流向量数据库一览" class="headerlink" title="主流向量数据库一览"></a>主流向量数据库一览</h1><h2 id="各种各样的向量数据库"><a href="#各种各样的向量数据库" class="headerlink" title="各种各样的向量数据库"></a>各种各样的向量数据库</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250818134520067.png" alt="image-20250818134520067" style="zoom:67%;" /></p><p>市场现状: 目前市面上存在多种向量数据库选择，包括FAISS、Milvus、Weaviate、Qdrant、Elastic、Chroma等，选择时需要进行比较分析</p><h3 id="1-Milvus"><a href="#1-Milvus" class="headerlink" title="1. Milvus"></a>1. Milvus</h3><p>核心功能：</p><ul><li>高性能分布式向量检索，支持IVF、HNSW、ANNOY、DiskANN等多种索引</li><li>横向可扩展至1000+节点集群</li><li>支持动态字段、分区和并行查询</li></ul><p>特点：</p><ul><li>横向可伸缩、支持 1000+ 节点集群</li><li>丰富的 metric（COSINE/L2/IP）和索引类型</li><li>支持动态字段、分区、并行查询</li></ul><p>优势：企业级 SLA，海量数据（10⁸+）性能出色；社区活跃，生态完善。</p><p>劣势：运维相对复杂；对小规模单机部署略显重。</p><p>适用场景：大规模、多并发检索；需要复杂过滤、实时增量写入的生产环境。</p><p>选型建议：数据量 ≥1亿、对吞吐和可用性要求高时首选。</p><h3 id="2-Weaviate"><a href="#2-Weaviate" class="headerlink" title="2. Weaviate"></a>2. Weaviate</h3><p>核心功能：Any-to-Any 多模态检索（nearText/nearImage/nearVector）。</p><p>特点：</p><ul><li>原生 GraphQL 接口</li><li>内置如 CLIP、ImageBind、OpenAI Embeddings 等模型</li><li>自动 schema 管理与向量化管道</li></ul><p>优势：上手快、无需额外模型接入；多模态查询统一 API。</p><p>劣势：集群扩展性弱于 Milvus；企业级性能需商业版。</p><p>适用场景：PoC 验证、多模态实验、快速上线 MVP。</p><p>选型建议：团队希望零运维，想“开箱即用”时推荐</p><h3 id="3-Qdrant"><a href="#3-Qdrant" class="headerlink" title="3. Qdrant"></a>3. Qdrant</h3><p>核心功能：</p><ul><li>向量检索+高效过滤(Single-Stage Filtering/Hybrid Search)</li><li>Rust内核，单节点或小集群性能优异</li><li>支持多向量字段和分段索引</li></ul><p>特点：</p><ul><li>Rust 内核、单节点或小集群性能优</li><li>支持多向量字段和分段索引</li><li>丰富的二级过滤与布尔查询</li></ul><p>优势：延迟低、吞吐高；对复杂过滤条件性能友好。</p><p>劣势：大规模分布式部署方案较新，需要自行打磨。</p><p>适用场景：对过滤/布尔查询依赖度高的语义搜索；中小规模集群。</p><p>选型建议：需要在语义召回与精确过滤间平衡时优选</p><h3 id="4-Pinecone"><a href="#4-Pinecone" class="headerlink" title="4. Pinecone"></a>4. Pinecone</h3><p>核心功能：全托管、高可用向量数据库；支持 hybrid search、namespace 多租户。</p><p>特点：</p><ul><li>Serverless，自动扩缩容</li><li>支持稀疏+稠密混合检索</li></ul><p>优势：极低运维门槛；SDK 友好，企业级 SLA。</p><p>劣势：成本随存储/QPS 增长；网络延迟依赖云厂商。</p><p>适用场景：快速上线大规模检索服务；不想自建集群的业务。</p><p>选型建议：项目初期或短期 PoC，及对运维团队少的公司优选。</p><h3 id="5-Chroma"><a href="#5-Chroma" class="headerlink" title="5. Chroma"></a>5. Chroma</h3><p>核心功能：轻量级、本地化向量存储；适合开发者本地调试与小规模应用。</p><p>特点：</p><ul><li>Python 原生，API 与文档友好</li><li>支持 SQLite、DuckDB 等后端存储</li></ul><p>优势：零运维，直接内嵌到应用中；非常适合本地测试或桌面应用。</p><p>劣势：不适合大规模、分布式场景；功能相对基础。</p><p>适用场景：原型开发、Notebook 环境、桌面/小型服务。</p><p>选型建议：数据量 &lt;10万，团队无运维成本时优选。</p><h3 id="6-Faiss"><a href="#6-Faiss" class="headerlink" title="6. Faiss"></a>6. Faiss</h3><p>核心功能：Facebook 开源的高效向量近邻库；支持 CPU/GPU 算法。</p><p>特点：</p><ul><li>丰富的索引类型（IVF、PQ、HNSW、LSH）</li><li>代码级可控，适合集成到自研系统中</li></ul><p>优势：性能最优、算法前沿；GPU 加速效果显著。</p><p>劣势：仅提供库，不含存储层；需要自行实现数据管理、分布式。</p><p>适用场景：对算法调优有深度需求的科研或自研引擎。</p><p>选型建议：具备 ML/算法团队，需极致性能且愿意自行封装存储时选。</p><h3 id="7-Vespa"><a href="#7-Vespa" class="headerlink" title="7. Vespa"></a>7. Vespa</h3><p>核心功能：大规模分布式检索与实时计算；支持多向量字段、复杂 ranking。</p><p>特点：</p><ul><li>内置机器学习模型部署（Java/Python）</li><li>支持在线训练与在线推理</li></ul><p>优势：企业级特性完善；查询吞吐与排序能力强。</p><p>劣势：学习曲线陡峭；集群部署与运维成本高。</p><p>适用场景：电商推荐、新闻排序、广告排名等复杂检索与排序场景。</p><p>选型建议：需要自定义复杂排名函数、在线模型服务的场景优选。</p><h3 id="8-Elasticsearch"><a href="#8-Elasticsearch" class="headerlink" title="8. Elasticsearch"></a>8. Elasticsearch</h3><p>核心功能：全文检索＋向量检索混合；支持 BM25 + kNN。</p><p>特点：</p><ul><li>兼容原有搜索引擎生态</li><li>可在同一次查询中同时执行 sparse &amp; dense 检索</li><li>插件式扩展（自定义脚本、rank_feature）</li></ul><p>优势：无缝接入已有日志/指标平台；社区和商业支持成熟。</p><p>劣势：向量检索性能不及专用库；索引体积大，内存消耗高。</p><p>适用场景：已有 ES 集群，想增量加密向量搜索；对全文与向量混合检索有需求。</p><p>选型建议：已有 Elastic 部署，无需额外运维团队时可考虑。</p><h3 id="9-MongoDB-Atlas-Vector-Search"><a href="#9-MongoDB-Atlas-Vector-Search" class="headerlink" title="9. MongoDB Atlas Vector Search"></a>9. MongoDB Atlas Vector Search</h3><p>核心功能：Atlas 托管的向量检索；集成全文索引与地理位置。</p><p>特点：</p><ul><li>无缝与 MongoDB 文档数据联动</li><li>Atlas Serverless 可按需扩展</li></ul><p>优势：完全托管，零运维；可以利用平台监控与安全特性。</p><p>劣势：成本较高；检索性能略劣于专用库。</p><p>适用场景：已经在 Atlas 上，想增量加向量搜索能力的团队。</p><p>选型建议：对托管可信赖度要求高，且预算充足时可考虑。</p><h3 id="10-PGVector-PostgreSQL-插件）"><a href="#10-PGVector-PostgreSQL-插件）" class="headerlink" title="10. PGVector(PostgreSQL 插件）"></a>10. PGVector(PostgreSQL 插件）</h3><p>核心功能：在 PostgreSQL 中原生存储与检索向量；支持 SQL+向量混合查询。</p><p>特点：</p><ul><li>与关系数据无缝联表</li><li>支持索引（IVF、HNSW）</li></ul><p>优势：无需额外数据库，利用成熟的事务与权限体系。</p><p>劣势：单机性能有限；大规模时 PG 扩展复杂。</p><p>适用场景：已有 PostgreSQL，想追加简单向量检索功能的业务。</p><p>选型建议：关系型与向量混合场景，且数据量 &lt;千万级时优选。</p><h3 id="11-Redis-Vector"><a href="#11-Redis-Vector" class="headerlink" title="11. Redis Vector"></a>11. Redis Vector</h3><p>核心功能：Redis Modules 提供向量检索；支持 HNSW、Flat。</p><p>特点：</p><ul><li>结合 RedisStream、Pub/Sub 可做实时流式检索</li><li>单实例延迟极低</li></ul><p>优势：适合集成到已有 Redis 缓存/消息体系；运维经验普遍。</p><p>劣势：内存消耗大；分布式横向扩展需 Cluster+Slot 管理。</p><p>适用场景：对实时性要求极高，且已有 Redis 集群的场景。</p><p>选型建议：缓存/路由层即需做检索，且对高并发低延迟有严格要求时选。</p><h2 id="分成这么几类"><a href="#分成这么几类" class="headerlink" title="分成这么几类"></a>分成这么几类</h2><h3 id="1-专用向量数据库-Self-managed-或-托管版"><a href="#1-专用向量数据库-Self-managed-或-托管版" class="headerlink" title="1. 专用向量数据库 (Self-managed 或 托管版)"></a>1. 专用向量数据库 (Self-managed 或 托管版)</h3><p><strong>特点</strong>: 从底层到协议全文支持向量检索, 性能与可伸缩性最佳。</p><ul><li>Milvus (自建/企业级集群)</li><li>Qdrant (轻量 Rust 内核 + 高效过滤)</li><li>Weaviate (自建或 Weaviate Cloud, Any-to-Any 多模态)</li><li>Pinecone (全托管 Serverless)</li></ul><h3 id="2-通用搜索引擎增强-Search-first-平台"><a href="#2-通用搜索引擎增强-Search-first-平台" class="headerlink" title="2. 通用搜索引擎增强 (Search-first 平台)"></a>2. 通用搜索引擎增强 (Search-first 平台)</h3><p><strong>特点</strong>: 兼顾文本检索与向量检索, 适合已有 Elasticsearch/类似体系的扩展。</p><ul><li>Elasticsearch (+ kNN)</li><li>Vespa (多向量字段 + 复杂 Ranking, 引擎级排序能力)</li><li>MongoDB Atlas Vector Search (托管, 文档 + 向量混合)</li></ul><h3 id="3-数据库原生插件-SQL-NoSQL-向量"><a href="#3-数据库原生插件-SQL-NoSQL-向量" class="headerlink" title="3. 数据库原生插件 (SQL/NoSQL + 向量)"></a>3. 数据库原生插件 (SQL/NoSQL + 向量)</h3><p><strong>特点</strong>: 在现有关系或 KV 存储中叠加向量检索, 运维简单、数据联动强。</p><ul><li>Pgvector (PostgreSQL 插件)</li><li>Redis Vector (Redis 模块)</li></ul><h3 id="4-嵌入式轻量库-Library-first"><a href="#4-嵌入式轻量库-Library-first" class="headerlink" title="4. 嵌入式轻量库 (Library-first)"></a>4. 嵌入式轻量库 (Library-first)</h3><p><strong>特点</strong>:  仅提供向量算法或本地存储, 适合嵌入式、桌面/小规模场景或深度定制。</p><ul><li>FAISS (CPU/GPU 高性能向量库)</li><li>Chroma (Python 本地轻量存储)</li><li>LanceDB (基于 Arrow/Parquet 文件存储)</li></ul><h1 id="问题仍然聚焦于：如何选择？"><a href="#问题仍然聚焦于：如何选择？" class="headerlink" title="问题仍然聚焦于：如何选择？"></a>问题仍然聚焦于：如何选择？</h1><p><a href="https://python.langchain.com/docs/integrations/vectorstores/">https://python.langchain.com/docs/integrations/vectorstores/</a></p><div class="table-container"><table><thead><tr><th>向量数据库名称</th><th>是否支持开源</th><th>是否支持自托管</th><th>是否支持云端管理</th><th>是否专为向量搜索设计</th><th>开发者体验</th><th>每秒查询数</th><th>延迟/ms</th><th>支持索引类型</th><th>是否支持混合搜索</th><th>是否支持向量索引</th><th>是否支持角色访问控制</th><th>是否支持动态分片</th><th>是否免费托管计划</th><th>价格 (50K 向量) /美元</th><th>价格 (20M向量)/美元</th></tr></thead><tbody><tr><td>Pinecone</td><td>否</td><td>否</td><td>是</td><td>是</td><td>较好</td><td>150+ (扩展后更高)</td><td>1</td><td>未知</td><td>是</td><td>否</td><td>否</td><td>未知</td><td>是</td><td>70</td><td>227 (高性能版为2074)</td></tr><tr><td>Weaviate</td><td>是</td><td>是</td><td>是</td><td>是</td><td>较好</td><td>791</td><td>2</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>否，静态分片</td><td>是</td><td>25起</td><td>1536</td></tr><tr><td>Milvus</td><td>是</td><td>是</td><td>是</td><td>是</td><td>很好</td><td>2406</td><td>1</td><td>多种 (11种)</td><td>是</td><td>是</td><td>是</td><td>是</td><td>是</td><td>65起</td><td>309 (高性能版为2291)</td></tr><tr><td>Qdrant</td><td>是</td><td>是</td><td>是</td><td>是</td><td>较好</td><td>326</td><td>4</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>是</td><td>是</td><td>9起</td><td>281 (高性能版为820)</td></tr><tr><td>Chroma</td><td>是</td><td>是</td><td>否</td><td>是</td><td>较好</td><td>未知</td><td>未知</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>是</td><td>自托管免费</td><td>自托管免费</td><td></td></tr><tr><td>Elasticsearch</td><td>否</td><td>是</td><td>否</td><td>否</td><td>一般</td><td>700-100</td><td>5-10</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>是，静态分片</td><td>自托管免费</td><td>不定</td><td>1225</td></tr><tr><td>PGVector</td><td>是</td><td>是</td><td>否</td><td>否</td><td>一般</td><td>141</td><td>8</td><td>HNSW/IVFFlat</td><td>是</td><td>是</td><td>否</td><td>-</td><td>自托管免费</td><td>不定</td><td>不定</td></tr></tbody></table></div><ul><li>选型维度:<ul><li>是否开源、是否支持自托管、是否支持云端管理</li><li>专为向量搜索设计、开发者体验、每秒查询数</li><li>延迟、支持索引类型、是否支持混合搜索</li><li>是否支持磁盘索引、角色访问控制、动态分片</li><li>价格等商业考量因素</li></ul></li><li>典型数据:<ul><li>Milvus支持多达11种索引类型</li><li>Pinecone价格从70美元(50k向量)到2074美元(高性能版20M向量)不等</li><li>Weaviate查询性能791 QPS，延迟2ms</li></ul></li></ul><h2 id="选型思路总结"><a href="#选型思路总结" class="headerlink" title="选型思路总结"></a>选型思路总结</h2><ul><li>规模与性能:<ul><li>超大规模($10^8+$﻿)、高并发：Milvus、Vespa、Pinecone</li><li>中小规模($&lt;10^7$﻿): Qdrant、Weaviate、Redis</li></ul></li><li>运维成本:<ul><li>零运维：Pinecone、MongoDB Atlas、Weaviate(Cloud)</li><li>自研可控：Milvus、FAISS、Vespa</li></ul></li><li>功能侧重:<ul><li>多模态Any-to-Any: Weaviate、OpenSearch</li><li>复杂过滤&amp;混合检索：Qdrant、Elasticsearch</li></ul></li><li>现有栈对接:<ul><li>已有PostgreSQL/Redis: Pgvector、Redis Vector</li><li>Elasticsearch生态：Elasticsearch(+kNN)</li></ul></li></ul><h1 id="一些开源测评工具"><a href="#一些开源测评工具" class="headerlink" title="一些开源测评工具"></a>一些开源测评工具</h1><p>工具：<a href="https://ann-benchmarks.com/index.html">https://ann-benchmarks.com/index.html</a></p><p>工具：<a href="https://github.com/zilliztech/VectorDBBench">https://github.com/zilliztech/VectorDBBench</a></p>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第十九讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
