<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jean&#39;s Blog</title>
  
  <subtitle>一个专注软件测试开发技术的个人博客</subtitle>
  <link href="https://jinglv.github.io/atom.xml" rel="self"/>
  
  <link href="https://jinglv.github.io/"/>
  <updated>2025-09-18T09:00:00.000Z</updated>
  <id>https://jinglv.github.io/</id>
  
  <author>
    <name>Jean Lv</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>LangGraph核心组件流式输出</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/6-langgraph-stream/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/6-langgraph-stream/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>LangGraph对流式输出进行了改进，细化了输出模式（如Values、Updates、Debug、Messages），提升用户体验和调试效率，适用于生产环境AI应用。</p><p>流式输出集中模式（stream_mode=””）</p><ul><li>values：在图表的每个步骤之后传输状态的完整值</li><li>updates：将图表每一步之后的更新流式传输到状态</li><li>custom：从图形节点内部传输自定义数据</li><li>messages：为调用LLM的图形节点传输LLM令牌和元数据</li><li>debug：在图表的整个执行过程中传输尽可能多的信息</li></ul><p>定义一个常见的图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    topic: <span class="built_in">str</span></span><br><span class="line">    joke: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">refine_topic</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;topic&quot;</span>: state[<span class="string">&quot;topic&quot;</span>] + <span class="string">&quot;和小狗&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_joke</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;joke&quot;</span>: <span class="string">f&quot;这是一个关于<span class="subst">&#123;state[<span class="string">&#x27;topic&#x27;</span>]&#125;</span>的笑话&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph = (</span><br><span class="line">    StateGraph(State)</span><br><span class="line">    .add_node(refine_topic)</span><br><span class="line">    .add_node(generate_joke)</span><br><span class="line">    .add_edge(START, <span class="string">&quot;refine_topic&quot;</span>)</span><br><span class="line">    .add_edge(<span class="string">&quot;refine_topic&quot;</span>, <span class="string">&quot;generate_joke&quot;</span>)</span><br><span class="line">    .<span class="built_in">compile</span>()</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1 id="stream-mode-”values”"><a href="#stream-mode-”values”" class="headerlink" title="stream_mode=”values”"></a>stream_mode=”values”</h1><p>在图表的每个步骤之后传输状态的完整值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>&#125;</span><br><span class="line">&#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>, <span class="string">&#x27;joke&#x27;</span>: <span class="string">&#x27;这是一个关于冰激凌和小狗的笑话&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="stream-mode-”updates”"><a href="#stream-mode-”updates”" class="headerlink" title="stream_mode=”updates”"></a>stream_mode=”updates”</h1><p>将图表每一步之后的更新流式传输到状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;refine_topic&#x27;</span>: &#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;generate_joke&#x27;</span>: &#123;<span class="string">&#x27;joke&#x27;</span>: <span class="string">&#x27;这是一个关于冰激凌和小狗的笑话&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="stream-mode-”debug”"><a href="#stream-mode-”debug”" class="headerlink" title="stream_mode=”debug”"></a>stream_mode=”debug”</h1><p>在图表的整个执行过程中传输尽可能多的信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;debug&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(chunk)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 1, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.478123+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;671c3949-69b8-8e90-b997-e76a1f711f5f&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;refine_topic&#x27;</span>, <span class="string">&#x27;input&#x27;</span>: &#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌&#x27;</span>&#125;, <span class="string">&#x27;triggers&#x27;</span>: (<span class="string">&#x27;branch:to:refine_topic&#x27;</span>,)&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 1, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.478680+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task_result&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;671c3949-69b8-8e90-b997-e76a1f711f5f&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;refine_topic&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: None, <span class="string">&#x27;result&#x27;</span>: [(<span class="string">&#x27;topic&#x27;</span>, <span class="string">&#x27;冰激凌和小狗&#x27;</span>)], <span class="string">&#x27;interrupts&#x27;</span>: []&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 2, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.478828+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b7f1816a-7dab-4847-e8e6-78ae4d691a8e&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;generate_joke&#x27;</span>, <span class="string">&#x27;input&#x27;</span>: &#123;<span class="string">&#x27;topic&#x27;</span>: <span class="string">&#x27;冰激凌和小狗&#x27;</span>&#125;, <span class="string">&#x27;triggers&#x27;</span>: (<span class="string">&#x27;branch:to:generate_joke&#x27;</span>,)&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;step&#x27;</span>: 2, <span class="string">&#x27;timestamp&#x27;</span>: <span class="string">&#x27;2025-09-18T08:51:31.479006+00:00&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;task_result&#x27;</span>, <span class="string">&#x27;payload&#x27;</span>: &#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b7f1816a-7dab-4847-e8e6-78ae4d691a8e&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;generate_joke&#x27;</span>, <span class="string">&#x27;error&#x27;</span>: None, <span class="string">&#x27;result&#x27;</span>: [(<span class="string">&#x27;joke&#x27;</span>, <span class="string">&#x27;这是一个关于冰激凌和小狗的笑话&#x27;</span>)], <span class="string">&#x27;interrupts&#x27;</span>: []&#125;&#125;</span><br></pre></td></tr></table></figure><h1 id="stream-mode-”messages”"><a href="#stream-mode-”messages”" class="headerlink" title="stream_mode=”messages”"></a>stream_mode=”messages”</h1><p>为调用LLM的图形节点传输LLM令牌和元数据</p><p>需要接入大模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">llm = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_joke</span>(<span class="params">state: State</span>):</span><br><span class="line">    llm_response = llm.invoke(</span><br><span class="line">        [</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">f&quot;生成一个关于 <span class="subst">&#123;state[<span class="string">&#x27;topic&#x27;</span>]&#125;</span>的笑话&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;joke&quot;</span>: llm_response.content&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">graph = (</span><br><span class="line">    StateGraph(State)</span><br><span class="line">    .add_node(refine_topic)</span><br><span class="line">    .add_node(generate_joke)</span><br><span class="line">    .add_edge(START, <span class="string">&quot;refine_topic&quot;</span>)</span><br><span class="line">    .add_edge(<span class="string">&quot;refine_topic&quot;</span>, <span class="string">&quot;generate_joke&quot;</span>)</span><br><span class="line">    .<span class="built_in">compile</span>()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> message_chunk, metadata <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;冰激凌&quot;</span>&#125;,</span><br><span class="line">    stream_mode=<span class="string">&quot;messages&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="keyword">if</span> message_chunk.content:</span><br><span class="line">        <span class="built_in">print</span>(message_chunk.content, end=<span class="string">&quot;|&quot;</span>, flush=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>执行结果(流式输出的)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">小狗|走进|一家|冰|激|凌|店|，|店员|问|：“|想要|什么|口|味的|？”</span><br><span class="line">|小狗|说|：“|汪|草|味的|！”</span><br><span class="line">|店员|愣|住|：“|抱歉|…|我们没有|汪|草|口味|。”</span><br><span class="line">|小狗|叹气|：“|那|好吧|，|给我|一个|‘|爪子|’|饼干|筒|装|香|草|味|——|但|记住|，|这次|别|再把|我的|球|藏|进|冰|激|凌|里|了|，|上次|我|挖|了|半小时|！”|🍦|🐶|</span><br><span class="line"></span><br><span class="line">|（|注|：|谐|音|梗|：|汪|草|=|香|草|，|爪子|=|甜|筒|品牌|“|可爱|多|”|的|经典|筒|身|设计|）|</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第六讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph核心组件时光旅行</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/5-langgraph-time-travel/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/5-langgraph-time-travel/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>时光旅行（Time Travel）功能通过状态机管理实现数据流回溯与修改，支持重放和分叉操作。重放可回顾智能体执行流程，分叉则允许在特定节点更改数据并探索替代路径，提升调试与优化效率。</p><ul><li>重放（Replay）<ul><li>应用场景：如多步骤智能体任务回溯和分享</li></ul></li><li>分叉（Fork）<ul><li>应用场景：如在特定节点修改流程路径</li></ul></li></ul><p>基础示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 设置工具</span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, START</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> END, StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_song_on_qq</span>(<span class="params">song: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在qq音乐上播放歌曲&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 调用QQ音乐 API...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;成功在QQ音乐上播放了<span class="subst">&#123;song&#125;</span>！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">play_song_on_163</span>(<span class="params">song: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;在网易云上播放歌曲&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 调用网易云 API...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;成功在网易云上播放了<span class="subst">&#123;song&#125;</span>！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [play_song_on_qq, play_song_on_163]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置模型</span></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">deepseek = ChatOpenAI(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model = deepseek.bind_tools(tools, parallel_tool_calls=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点和条件边</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义确定是否继续的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    last_message = messages[-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果没有函数调用，则结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;end&quot;</span></span><br><span class="line">    <span class="comment"># 否则如果有，我们继续</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;continue&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将循环的两个节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为`agent`</span></span><br><span class="line"><span class="comment"># 这意味着这个节点是第一个被调用的</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用`agent`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在调用`agent`节点后采取的边。</span></span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">    <span class="comment"># 最后我们传入一个映射。</span></span><br><span class="line">    <span class="comment"># 键是字符串，值是其他节点。</span></span><br><span class="line">    <span class="comment"># END是一个特殊节点，标记图应该结束。</span></span><br><span class="line">    <span class="comment"># 将会发生的是我们调用`should_continue`，然后该函数的输出</span></span><br><span class="line">    <span class="comment"># 将与此映射中的键匹配。</span></span><br><span class="line">    <span class="comment"># 根据匹配的键，然后调用相应的节点。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment"># 如果是`tools`，则调用工具节点。</span></span><br><span class="line">        <span class="string">&quot;continue&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">        <span class="comment"># 否则我们结束。</span></span><br><span class="line">        <span class="string">&quot;end&quot;</span>: END,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从`tools`到`agent`添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用`tools`之后，下一步调用`agent`节点。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置内存</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line"><span class="comment"># 这将它编译成一个LangChain Runnable，</span></span><br><span class="line"><span class="comment"># 意味着你可以像使用任何其他runnable一样使用它</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们添加`interrupt_before=[&quot;action&quot;]`</span></span><br><span class="line"><span class="comment"># 这将在调用`action`节点之前添加一个断点</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行简单调用，要求播放周杰伦的歌曲</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;你能播放一首周杰伦播放量最高的歌曲吗?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看记录并重放，get_state获取当前的状态，查看信息</span></span><br><span class="line">app.get_state(config).values[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用get_state_history将历史记录打印出来</span></span><br><span class="line">all_states = []</span><br><span class="line"><span class="keyword">for</span> state <span class="keyword">in</span> app.get_state_history(config):</span><br><span class="line">    <span class="built_in">print</span>(state)</span><br><span class="line">    all_states.append(state)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;--&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="重放"><a href="#重放" class="headerlink" title="重放"></a>重放</h1><p>根据以上代码执行，我们可以返回任何一个状态节点，并从那个时候重新开始操作</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">to_replay = all_states[<span class="number">2</span>] <span class="comment"># 从第二状态开始，重新执行</span></span><br><span class="line"></span><br><span class="line">to_replay.values</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看下一个节点执行什么</span></span><br><span class="line">to_replay.<span class="built_in">next</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果想从这个状态节点重播，只需这样</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(<span class="literal">None</span>, to_replay.config):</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> event.values():</span><br><span class="line">        <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure><h1 id="分叉"><a href="#分叉" class="headerlink" title="分叉"></a>分叉</h1><p>根据重放中的代码，从某个节点开始，对执行的数据进行分叉</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改最后一个消息的工具调用</span></span><br><span class="line"><span class="comment"># 我们将其从`play_song_on_qq`更改为`play_song_on_163`</span></span><br><span class="line">last_message = to_replay.values[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">last_message.tool_calls[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] = <span class="string">&quot;play_song_on_163&quot;</span></span><br><span class="line"></span><br><span class="line">branch_config = app.update_state(</span><br><span class="line">    to_replay.config,</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [last_message]&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时整个图的流就进行了分叉处理</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(<span class="literal">None</span>, branch_config):</span><br><span class="line">    <span class="keyword">for</span> v <span class="keyword">in</span> event.values():</span><br><span class="line">        <span class="built_in">print</span>(v)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第五讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph核心组件工具调用</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/7-langgraph-tools/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/7-langgraph-tools/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T09:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Langgraph核心组件中的工具调用分为四步：定义工具、绑定工具、生成工具调用（2coin）和执行工具。通过拆解过程，用户可干预每个步骤，尤其在多智能体模式下，可加入人工节点检查调用准确性，提升工具使用的灵活性与控制力。</p><p>从工具执行流程图看</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918170343628.png" alt="image-20250918170343628" style="zoom:67%;" /></p><p>有以下四步：</p><ul><li>第一步：使用@tool修饰符创建工具</li><li>第二步：绑定工具到模型（注意：并不是所有大模型都支持工具绑定）</li><li>第三步：工具调用：将自然语言转为正确的参数</li><li>第四步：工具执行：将工具执行并将结果传递给下一步</li></ul><p>根据以上说明，下面根据这四步进行代码示例</p><h1 id="第一步：工具定义"><a href="#第一步：工具定义" class="headerlink" title="第一步：工具定义"></a>第一步：工具定义</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">location: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数获取当前天气。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> location.lower() <span class="keyword">in</span> [<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;深圳&quot;</span>]:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;现在是20度，有雾。&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;现在是10度，晴朗。&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_coolest_cities</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;获取最冷城市列表&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;北京，哈尔滨&quot;</span></span><br><span class="line"></span><br><span class="line">tools = [get_weather, get_coolest_cities]</span><br><span class="line">tool_node = ToolNode(tools) <span class="comment"># ToolNode是langgraph中运行工具的节点</span></span><br></pre></td></tr></table></figure><p>langgraph提供了低层面的封装，可以直接手动执行工具</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"></span><br><span class="line">message_with_single_tool_call = AIMessage(</span><br><span class="line">    content=<span class="string">&quot;&quot;</span>,</span><br><span class="line">    tool_calls=[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: &#123;<span class="string">&quot;location&quot;</span>: <span class="string">&quot;北京&quot;</span>&#125;,</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;tool_call_id&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;tool_call&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">tool_node.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [message_with_single_tool_call]&#125;)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [ToolMessage(content=<span class="string">&#x27;现在是20度，有雾。&#x27;</span>, name=<span class="string">&#x27;get_weather&#x27;</span>, tool_call_id=<span class="string">&#x27;tool_call_id&#x27;</span>)]&#125;</span><br></pre></td></tr></table></figure><h1 id="第二步：工具绑定"><a href="#第二步：工具绑定" class="headerlink" title="第二步：工具绑定"></a>第二步：工具绑定</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model_with_tools = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">).bind_tools(tools)</span><br><span class="line"></span><br><span class="line">model_with_tools.invoke(<span class="string">&quot;深圳的天气如何?&quot;</span>).tool_calls</span><br></pre></td></tr></table></figure><h1 id="第三步：工具调用"><a href="#第三步：工具调用" class="headerlink" title="第三步：工具调用"></a>第三步：工具调用</h1><p>返回ToolMessage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tool_node.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [model_with_tools.invoke(<span class="string">&quot;深圳的天气如何?&quot;</span>)]&#125;)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [ToolMessage(content=<span class="string">&#x27;现在是20度，有雾。&#x27;</span>, name=<span class="string">&#x27;get_weather&#x27;</span>, tool_call_id=<span class="string">&#x27;call_00_0vppp9Iy24ryGv9a89hsxVHk&#x27;</span>)]&#125;</span><br></pre></td></tr></table></figure><h1 id="第四步：工具执行"><a href="#第四步：工具执行" class="headerlink" title="第四步：工具执行"></a>第四步：工具执行</h1><p>在ReAct智能体中执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, MessagesState, START, END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    last_message = messages[-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;tools&quot;</span></span><br><span class="line">    <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model_with_tools.invoke(messages)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;tools&quot;</span>, tool_node) <span class="comment"># Add the tool node to the graph</span></span><br><span class="line"></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line">workflow.add_conditional_edges(<span class="string">&quot;agent&quot;</span>, should_continue, [<span class="string">&quot;tools&quot;</span>, END])</span><br><span class="line">workflow.add_edge(<span class="string">&quot;tools&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = workflow.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line">display(Image(app.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure><p>查看构成的图</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918172526485.png" alt="image-20250918172526485"></p><p>执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> app.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;深圳的天气如何?&quot;</span>)]&#125;, stream_mode=<span class="string">&quot;values&quot;</span></span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">深圳的天气如何?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我来帮您查询深圳的天气情况。</span><br><span class="line">Tool Calls:</span><br><span class="line">  get_weather (call_00_a1KyKFbzutzxaD52Q9BHy4ep)</span><br><span class="line"> Call ID: call_00_a1KyKFbzutzxaD52Q9BHy4ep</span><br><span class="line">  Args:</span><br><span class="line">    location: 深圳</span><br><span class="line">================================= Tool Message =================================</span><br><span class="line">Name: get_weather</span><br><span class="line"></span><br><span class="line">现在是20度，有雾。</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">根据查询结果，深圳目前的天气情况是：</span><br><span class="line">- 温度：20°C</span><br><span class="line">- 天气状况：有雾</span><br><span class="line"></span><br><span class="line">这样的天气比较潮湿，建议您外出时注意安全，能见度可能较低。</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第七讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph核心组件人机交互</title>
    <link href="https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/4-langgraph-human-ai/"/>
    <id>https://jinglv.github.io/2025/09/18/ai/langchain/langgraph/4-langgraph-human-ai/</id>
    <published>2025-09-17T16:00:00.000Z</published>
    <updated>2025-09-18T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>强调在AI系统中加入人工审核环节以提升系统成熟度和稳定性，特别是在对错误容忍度低的场景下，通过人工审批、状态编辑、工具调用审查等方式保障决策正确性与系统安全。</p><ul><li>审查工具调用情况（是否正确等）</li><li>审查和验证LLM输出</li><li>人工提供更好的上下文背景</li></ul><p>人机交互的场景：</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918090250968.png" alt="image-20250918090250968"></p><h1 id="基本运用：等待用户数据"><a href="#基本运用：等待用户数据" class="headerlink" title="基本运用：等待用户数据"></a>基本运用：等待用户数据</h1><p>等待用户输入的本质是在节点间增加人类反馈节点，定义包含input和user feedback属性的状态对象，引入interrupt组件来打断流程并等待用户反馈，通过Command组件恢复被打断的流程</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> interrupt</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点间通讯的消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="built_in">input</span>: <span class="built_in">str</span></span><br><span class="line">    user_feedback: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 1---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用户反馈节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">human_feedback</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---human_feedback---&quot;</span>)</span><br><span class="line">    feedback = interrupt(<span class="string">&quot;Please provide feedback:&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;user_feedback&quot;</span>: feedback&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_3</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 3---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_1&quot;</span>, step_1)</span><br><span class="line">builder.add_node(<span class="string">&quot;human_feedback&quot;</span>, human_feedback)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_3&quot;</span>, step_3)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;step_1&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_1&quot;</span>, <span class="string">&quot;human_feedback&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;human_feedback&quot;</span>, <span class="string">&quot;step_3&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_3&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设计记忆内存</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the graph until the first interruption</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 添加human反馈</span></span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(</span><br><span class="line">    <span class="comment"># 人类反馈内容：resume=&quot;go to step 3!&quot;</span></span><br><span class="line">    Command(resume=<span class="string">&quot;go to step 3!&quot;</span>), thread, stream_mode=<span class="string">&quot;updates&quot;</span></span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>在智能体中引入人工介入环节，示例代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> ToolMessage</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, START, END, StateGraph</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 1. 设置状态 ---</span></span><br><span class="line"><span class="comment"># MessagesState 是一个内置的状态类型，它简单地将所有消息累加起来。</span></span><br><span class="line"><span class="comment"># 这对于大多数聊天机器人应用来说都非常方便。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 2. 设置工具 ---</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">query: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数来浏览网络以查找信息。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 这是一个实际工具实现的占位符</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;---正在执行搜索: <span class="subst">&#123;query&#125;</span>---&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;我查询了：<span class="subst">&#123;query&#125;</span>。结果：北京天气晴朗，温度25度。&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将有一个真实工具和一个&quot;假&quot;工具&quot;ask_human&quot;</span></span><br><span class="line">tools = [search]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们为&quot;ask_human&quot;工具定义一个Pydantic模型，以便模型知道它的签名</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AskHuman</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;当你需要用户的澄清或额外信息时，调用此工具向人类提问。&quot;&quot;&quot;</span></span><br><span class="line">    question: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 3. 设置模型 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将所有工具（真实的和模拟的）绑定到模型上</span></span><br><span class="line">model = model.bind_tools(tools + [AskHuman])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 4. 定义图的节点和边 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---调用大模型---&quot;</span>)</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们定义一个节点来处理&quot;ask_human&quot;工具调用</span></span><br><span class="line"><span class="comment"># 这个节点会暂停流程并等待用户输入</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">interrupt</span>(<span class="params">question: <span class="built_in">str</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;一个简单的函数，用于在命令行中暂停并向用户提问。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n[需要人类输入] 问题: <span class="subst">&#123;question&#125;</span>&quot;</span>)</span><br><span class="line">    answer = <span class="built_in">input</span>(<span class="string">&quot;你的回答: &quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> answer</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ask_human</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---等待人类输入---&quot;</span>)</span><br><span class="line">    <span class="comment"># 获取最后一条消息中的工具调用信息</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    tool_call = last_message.tool_calls[<span class="number">0</span>]</span><br><span class="line">    tool_call_id = tool_call[<span class="string">&quot;id&quot;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 解析工具调用的参数</span></span><br><span class="line">    ask_args = AskHuman.model_validate(tool_call[<span class="string">&quot;args&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 调用interrupt函数暂停并获取用户输入</span></span><br><span class="line">    user_response = interrupt(ask_args.question)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 将用户的回答构造成一个ToolMessage</span></span><br><span class="line">    tool_message = ToolMessage(content=user_response, tool_call_id=tool_call_id)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [tool_message]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ★★★ 修改点 1: 修改条件函数 ★★★</span></span><br><span class="line"><span class="comment"># 定义决定流程走向的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果模型没有进行工具调用，则流程结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__end__&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 如果模型调用的是 &quot;AskHuman&quot; 工具</span></span><br><span class="line">    <span class="keyword">if</span> last_message.tool_calls[<span class="number">0</span>][<span class="string">&quot;name&quot;</span>] == <span class="string">&quot;AskHuman&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ask_human&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 否则，执行常规工具调用</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;action&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 5. 构建图 ---</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将循环的节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line">workflow.add_node(<span class="string">&quot;ask_human&quot;</span>, ask_human)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置入口点</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ★★★ 修改点 2: 添加显式的路径映射 ★★★</span></span><br><span class="line"><span class="comment"># 添加条件边，这是图的核心逻辑</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    should_continue,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;action&quot;</span>: <span class="string">&quot;action&quot;</span>,</span><br><span class="line">        <span class="string">&quot;ask_human&quot;</span>: <span class="string">&quot;ask_human&quot;</span>,</span><br><span class="line">        <span class="string">&quot;__end__&quot;</span>: END,</span><br><span class="line">    &#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加从工具执行节点返回到agent节点的边</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"><span class="comment"># 添加从人类输入节点返回到agent节点的边</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;ask_human&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置内存检查点</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译图，使其成为可运行的应用</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># --- 6. 可视化和运行 ---</span></span><br><span class="line">display(Image(app.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment"># 创建一个线程ID，用于保持对话状态</span></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            (</span><br><span class="line">                <span class="string">&quot;user&quot;</span>,</span><br><span class="line">                <span class="string">&quot;询问用户他们在哪里，然后查询那里的天气&quot;</span>,</span><br><span class="line">            )</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    config,</span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"><span class="comment"># 注意：会出现一个输入用户区域地方，然后等待输入，输入信息后才会进行接续内容，输入内容：我在北京</span></span><br></pre></td></tr></table></figure><p>执行查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918100254757.png" alt="image-20250918100254757"></p><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">---Step 1---</span><br><span class="line">&#123;<span class="string">&#x27;step_1&#x27;</span>: None&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---human_feedback---</span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=<span class="string">&#x27;Please provide feedback:&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;e8b5902129c677d43844e5aff7857cc4&#x27;</span>),)&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---human_feedback---</span><br><span class="line">&#123;<span class="string">&#x27;human_feedback&#x27;</span>: &#123;<span class="string">&#x27;user_feedback&#x27;</span>: <span class="string">&#x27;go to step 3!&#x27;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---Step 3---</span><br><span class="line">&#123;<span class="string">&#x27;step_3&#x27;</span>: None&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">询问用户他们在哪里，然后查询那里的天气</span><br><span class="line">---调用大模型---</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line">Tool Calls:</span><br><span class="line">  AskHuman (call_00_TpzUc16Jdly70xacNN1qq9PW)</span><br><span class="line"> Call ID: call_00_TpzUc16Jdly70xacNN1qq9PW</span><br><span class="line">  Args:</span><br><span class="line">    question: 请问您在哪里？我想为您查询当地的天气信息。</span><br><span class="line">---等待人类输入---</span><br><span class="line"></span><br><span class="line">[需要人类输入] 问题: 请问您在哪里？我想为您查询当地的天气信息。</span><br><span class="line">================================= Tool Message =================================</span><br><span class="line"></span><br><span class="line">我在北京</span><br><span class="line">---调用大模型---</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line">Tool Calls:</span><br><span class="line">  search (call_00_RlGPZ0yP4eioQByUs8rzdZe2)</span><br><span class="line"> Call ID: call_00_RlGPZ0yP4eioQByUs8rzdZe2</span><br><span class="line">  Args:</span><br><span class="line">    query: 北京天气</span><br><span class="line">---正在执行搜索: 北京天气---</span><br><span class="line">================================= Tool Message =================================</span><br><span class="line">...</span><br><span class="line">- 天气状况：晴朗</span><br><span class="line">- 温度：25度</span><br><span class="line"></span><br><span class="line">这是一个相当宜人的天气，适合外出活动！</span><br></pre></td></tr></table></figure><h1 id="基本运用：审查工具调用"><a href="#基本运用：审查工具调用" class="headerlink" title="基本运用：审查工具调用"></a>基本运用：审查工具调用</h1><p>通过人机协作审查智能体的工具调用，包括设置审查节点、判断人类反馈、执行工具及结果插入，并展示了在不同反馈（继续、更新、反馈）下流程的导航与处理方式。</p><p>根据不同的人类反馈（continue、update、feedback）导航至不同节点。</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict, <span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END, MessagesState</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command, interrupt</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">weather_search</span>(<span class="params">city: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;搜索天气&quot;&quot;&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在搜索：<span class="subst">&#123;city&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;----&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;晴朗！&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置模型</span></span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">deepseek = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model = deepseek.bind_tools(</span><br><span class="line">    [weather_search]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">MessagesState</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;简单状态。&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_llm</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [model.invoke(state[<span class="string">&quot;messages&quot;</span>])]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">human_review_node</span>(<span class="params">state</span>) -&gt; Command[<span class="type">Literal</span>[<span class="string">&quot;call_llm&quot;</span>, <span class="string">&quot;run_tool&quot;</span>]]:</span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    tool_call = last_message.tool_calls[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 这是我们将通过Command(resume=&lt;human_review&gt;)提供的值</span></span><br><span class="line">    human_review = interrupt(</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;question&quot;</span>: <span class="string">&quot;这是正确的吗？&quot;</span>,</span><br><span class="line">            <span class="comment"># 显示工具调用以供审核</span></span><br><span class="line">            <span class="string">&quot;tool_call&quot;</span>: tool_call,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    review_action = human_review[<span class="string">&quot;action&quot;</span>]</span><br><span class="line">    review_data = human_review.get(<span class="string">&quot;data&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果批准，调用工具</span></span><br><span class="line">    <span class="keyword">if</span> review_action == <span class="string">&quot;continue&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;run_tool&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 更新AI消息并调用工具</span></span><br><span class="line">    <span class="keyword">elif</span> review_action == <span class="string">&quot;update&quot;</span>:</span><br><span class="line">        updated_message = &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;ai&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: last_message.content,</span><br><span class="line">            <span class="string">&quot;tool_calls&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;id&quot;</span>: tool_call[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">                    <span class="string">&quot;name&quot;</span>: tool_call[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                    <span class="comment"># 这是人类提供的更新</span></span><br><span class="line">                    <span class="string">&quot;args&quot;</span>: review_data,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="comment"># 这很重要 - 这需要与你替换的消息相同！</span></span><br><span class="line">            <span class="comment"># 否则，它将显示为一个单独的消息</span></span><br><span class="line">            <span class="string">&quot;id&quot;</span>: last_message.<span class="built_in">id</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;run_tool&quot;</span>, update=&#123;<span class="string">&quot;messages&quot;</span>: [updated_message]&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 向LLM提供反馈</span></span><br><span class="line">    <span class="keyword">elif</span> review_action == <span class="string">&quot;feedback&quot;</span>:</span><br><span class="line">        <span class="comment"># 注意：我们将反馈消息添加为ToolMessage</span></span><br><span class="line">        <span class="comment"># 以保持消息历史中的正确顺序</span></span><br><span class="line">        <span class="comment"># （带有工具调用的AI消息需要后跟工具调用消息）</span></span><br><span class="line">        tool_message = &#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">            <span class="comment"># 这是我们的自然语言反馈</span></span><br><span class="line">            <span class="string">&quot;content&quot;</span>: review_data,</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: tool_call[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">            <span class="string">&quot;tool_call_id&quot;</span>: tool_call[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Command(goto=<span class="string">&quot;call_llm&quot;</span>, update=&#123;<span class="string">&quot;messages&quot;</span>: [tool_message]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到工具的允许结果，然后插入到消息里面去</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run_tool</span>(<span class="params">state</span>):</span><br><span class="line">    new_messages = []</span><br><span class="line">    tools = &#123;<span class="string">&quot;weather_search&quot;</span>: weather_search&#125;</span><br><span class="line">    tool_calls = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].tool_calls</span><br><span class="line">    <span class="keyword">for</span> tool_call <span class="keyword">in</span> tool_calls:</span><br><span class="line">        tool = tools[tool_call[<span class="string">&quot;name&quot;</span>]]</span><br><span class="line">        result = tool.invoke(tool_call[<span class="string">&quot;args&quot;</span>])</span><br><span class="line">        new_messages.append(</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;tool&quot;</span>,</span><br><span class="line">                <span class="string">&quot;name&quot;</span>: tool_call[<span class="string">&quot;name&quot;</span>],</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: result,</span><br><span class="line">                <span class="string">&quot;tool_call_id&quot;</span>: tool_call[<span class="string">&quot;id&quot;</span>],</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: new_messages&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route_after_llm</span>(<span class="params">state</span>) -&gt; <span class="type">Literal</span>[END, <span class="string">&quot;human_review_node&quot;</span>]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].tool_calls) == <span class="number">0</span>: <span class="comment"># 拿到最新一条数据的tool_calls</span></span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;human_review_node&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(call_llm)</span><br><span class="line">builder.add_node(run_tool)</span><br><span class="line">builder.add_node(human_review_node)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;call_llm&quot;</span>)</span><br><span class="line">builder.add_conditional_edges(<span class="string">&quot;call_llm&quot;</span>, route_after_llm)</span><br><span class="line">builder.add_edge(<span class="string">&quot;run_tool&quot;</span>, <span class="string">&quot;call_llm&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置内存</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918100530221.png" alt="image-20250918100530221"></p><ul><li><p>当不涉及工具调用的时候，不会触发人工审核</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你好！&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;你好！很高兴为您服务。我可以帮您查询天气信息，如果您需要了解某个城市的天气情况，请告诉我城市名称，我会为您查询最新的天气信息。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 33, <span class="string">&#x27;prompt_tokens&#x27;</span>: 144, <span class="string">&#x27;total_tokens&#x27;</span>: 177, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 144&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;d95943e0-85bc-4aae-a037-393a500e8c7a&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--b490a400-5a86-403d-b459-3d972a6b1474-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 144, <span class="string">&#x27;output_tokens&#x27;</span>: 33, <span class="string">&#x27;total_tokens&#x27;</span>: 177, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>一旦涉及到工具调用 就会触发人工介入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Input，提问到天气相关的问题</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;北京的天气如何?&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;我来帮您查询北京的天气情况。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;\\u5317\\u4eac&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 27, <span class="string">&#x27;prompt_tokens&#x27;</span>: 146, <span class="string">&#x27;total_tokens&#x27;</span>: 173, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 18&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;03bd6516-9777-4042-b4ed-02ea6d6d004f&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--b4693d60-2881-4ab6-9e96-4670276ec95a-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 146, <span class="string">&#x27;output_tokens&#x27;</span>: 27, <span class="string">&#x27;total_tokens&#x27;</span>: 173, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=&#123;<span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;这是正确的吗？&#x27;</span>, <span class="string">&#x27;tool_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;183597080f78b79c566b124a34223821&#x27;</span>),)&#125;</span><br></pre></td></tr></table></figure><p>使用Command进行人机交互</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Command</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(</span><br><span class="line">    <span class="comment"># 输入值</span></span><br><span class="line">    Command(resume=&#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;continue&quot;</span>&#125;),</span><br><span class="line">    thread,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;human_review_node&#x27;</span>: None&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">正在搜索：北京</span><br><span class="line">----</span><br><span class="line">&#123;<span class="string">&#x27;run_tool&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;tool&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;晴朗！&#x27;</span>, <span class="string">&#x27;tool_call_id&#x27;</span>: <span class="string">&#x27;call_00_nrZyXDGPbp73qAdYJ7IpMxHv&#x27;</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;根据查询结果，北京目前的天气是晴朗的！天气状况很好，适合外出活动。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 19, <span class="string">&#x27;prompt_tokens&#x27;</span>: 172, <span class="string">&#x27;total_tokens&#x27;</span>: 191, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 44&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;cd0943c6-f6d0-4228-aa4e-2be23df3a798&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--d5f3dae7-d3f1-4ee5-98e3-98abc54e7071-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 172, <span class="string">&#x27;output_tokens&#x27;</span>: 19, <span class="string">&#x27;total_tokens&#x27;</span>: 191, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>更进一步，对智能体调用的工具进行参数编辑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;messages&quot;</span>: [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;深圳的天气如何?&quot;</span>&#125;]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;3&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;我来帮您查询深圳的天气情况。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;\\u6df1\\u5733&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 28, <span class="string">&#x27;prompt_tokens&#x27;</span>: 147, <span class="string">&#x27;total_tokens&#x27;</span>: 175, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 19&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b944f986-9c42-4d99-ac66-1e90ac5d8514&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--2d7d12ff-727e-4649-a735-44aac3346a5b-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 147, <span class="string">&#x27;output_tokens&#x27;</span>: 28, <span class="string">&#x27;total_tokens&#x27;</span>: 175, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=&#123;<span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;这是正确的吗？&#x27;</span>, <span class="string">&#x27;tool_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;0f55d9ce7b22cdd30d7d25afd89223ae&#x27;</span>),)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 直接对工具的参数进行编辑</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(</span><br><span class="line">    Command(resume=&#123;<span class="string">&quot;action&quot;</span>: <span class="string">&quot;update&quot;</span>, <span class="string">&quot;data&quot;</span>: &#123;<span class="string">&quot;city&quot;</span>: <span class="string">&quot;上海,中国&quot;</span>&#125;&#125;),</span><br><span class="line">    thread,</span><br><span class="line">    stream_mode=<span class="string">&quot;updates&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;human_review_node&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;ai&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;我来帮您查询深圳的天气情况。&#x27;</span>, <span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;上海,中国&#x27;</span>&#125;&#125;], <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;run--2d7d12ff-727e-4649-a735-44aac3346a5b-0&#x27;</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">----</span><br><span class="line">正在搜索：上海,中国</span><br><span class="line">----</span><br><span class="line">&#123;<span class="string">&#x27;run_tool&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [&#123;<span class="string">&#x27;role&#x27;</span>: <span class="string">&#x27;tool&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: <span class="string">&#x27;晴朗！&#x27;</span>, <span class="string">&#x27;tool_call_id&#x27;</span>: <span class="string">&#x27;call_00_VFXEbMl2mMOo0WXRr3BdKjWP&#x27;</span>&#125;]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;call_llm&#x27;</span>: &#123;<span class="string">&#x27;messages&#x27;</span>: [AIMessage(content=<span class="string">&#x27;让我重新查询深圳的天气：&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_eY6qquS2SjREeAhv2oD2Q9hL&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;深圳&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 20, <span class="string">&#x27;prompt_tokens&#x27;</span>: 176, <span class="string">&#x27;total_tokens&#x27;</span>: 196, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 128&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 128, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 48&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;73984e27-0ca3-421b-9d35-348907eabdf3&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--ae52f621-4c85-4e13-95a4-673939846f23-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_eY6qquS2SjREeAhv2oD2Q9hL&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 176, <span class="string">&#x27;output_tokens&#x27;</span>: 20, <span class="string">&#x27;total_tokens&#x27;</span>: 196, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 128&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;__interrupt__&#x27;</span>: (Interrupt(value=&#123;<span class="string">&#x27;question&#x27;</span>: <span class="string">&#x27;这是正确的吗？&#x27;</span>, <span class="string">&#x27;tool_call&#x27;</span>: &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;weather_search&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;深圳&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_eY6qquS2SjREeAhv2oD2Q9hL&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;5d83228c73ed5e60fe886c76117d2402&#x27;</span>),)&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="基本使用：编辑图的状态"><a href="#基本使用：编辑图的状态" class="headerlink" title="基本使用：编辑图的状态"></a>基本使用：编辑图的状态</h1><p>通过设置中断点和人工干预，可以在流程执行中修改状态值，实现对智能体工具选择或动作的审核编辑。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918101102384.png" alt="image-20250918101102384" style="zoom:50%;" /></p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    <span class="built_in">input</span>: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 1---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_2</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 2---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_3</span>(<span class="params">state</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;---Step 3---&quot;</span>)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_1&quot;</span>, step_1)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_2&quot;</span>, step_2)</span><br><span class="line">builder.add_node(<span class="string">&quot;step_3&quot;</span>, step_3)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;step_1&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_1&quot;</span>, <span class="string">&quot;step_2&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_2&quot;</span>, <span class="string">&quot;step_3&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;step_3&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Set up memory</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add 注意interrupt_before</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory, interrupt_before=[<span class="string">&quot;step_2&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># View</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="comment"># Input</span></span><br><span class="line">initial_input = &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Thread</span></span><br><span class="line">thread = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run the graph until the first interruption</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(initial_input, thread, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br></pre></td></tr></table></figure><p>执行查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250918101243460.png" alt="image-20250918101243460"></p><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;input&#x27;</span>: <span class="string">&#x27;你好&#x27;</span>&#125;</span><br><span class="line">---Step 1---</span><br></pre></td></tr></table></figure><p>执行到节点Step 1，就中断了，在代码中使用interrupt_before对Step 2设置了断点，此时我们可以进行人工干预，更新流状态并传入新值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph.update_state(thread, &#123;<span class="string">&quot;input&quot;</span>: <span class="string">&quot;你好 everybody!&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;---\n---\nUpdated state!&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(graph.get_state(thread).values)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">---</span><br><span class="line">Updated state!</span><br><span class="line">&#123;<span class="string">&#x27;input&#x27;</span>: <span class="string">&#x27;你好 everybody!&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 继续执行</span></span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> graph.stream(<span class="literal">None</span>, thread, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;input&#x27;</span>: <span class="string">&#x27;你好 everybody!&#x27;</span>&#125;</span><br><span class="line">---Step 2---</span><br><span class="line">---Step 3---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第四讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph核心组件节点和可控制性</title>
    <link href="https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/2-langgraph-node-control/"/>
    <id>https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/2-langgraph-node-control/</id>
    <published>2025-09-16T16:00:00.000Z</published>
    <updated>2025-09-17T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个Langgraph"><a href="#第一个Langgraph" class="headerlink" title="第一个Langgraph"></a>第一个Langgraph</h1><h2 id="定义state"><a href="#定义state" class="headerlink" title="定义state"></a>定义state</h2><p>定义两种方式：</p><ol><li>TypedDict:属于 Python 标准库 typing 模块的一部分,仅提供静态类型检查，运行时不执行验证</li><li>Pydantic:第三方库，需要单独安装,提供运行时数据验证和序列化功能</li></ol><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AnyMessage</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点间通讯的消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: <span class="built_in">list</span>[AnyMessage]</span><br><span class="line">    extra_field: <span class="built_in">int</span></span><br></pre></td></tr></table></figure><h2 id="定义节点"><a href="#定义节点" class="headerlink" title="定义节点"></a>定义节点</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> AIMessage</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">node</span>(<span class="params">state: State</span>):</span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    new_message = AIMessage(<span class="string">&quot;你好!我是一个节点&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: messages + [new_message], <span class="string">&quot;extra_field&quot;</span>: <span class="number">10</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="创建图"><a href="#创建图" class="headerlink" title="创建图"></a>创建图</h2><ul><li>包含一个节点</li><li>使用state通信</li></ul><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph</span><br><span class="line"></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line">graph_builder.add_node(node)</span><br><span class="line">graph_builder.set_entry_point(<span class="string">&quot;node&quot;</span>) <span class="comment"># 设置入口，入口名称为node</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>() <span class="comment"># 进行编译</span></span><br></pre></td></tr></table></figure><h2 id="查看节点与图结构（内置的方法）"><a href="#查看节点与图结构（内置的方法）" class="headerlink" title="查看节点与图结构（内置的方法）"></a>查看节点与图结构（内置的方法）</h2><p>Mermaid 是一种基于文本的图表和可视化工具，它允许用户通过简单的文本语法来创建复杂的图表和流程图。它特别适合开发者、文档编写者和技术人员在文档、代码库或网页中嵌入可视化内容。</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure><p>执行结果展示</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917103406179.png" alt="image-20250917103406179"  /></p><h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">result = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(<span class="string">&quot;你好啊，我是花花！&quot;</span>)]&#125;)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;你好啊，我是花花！&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;),</span><br><span class="line">  AIMessage(content=<span class="string">&#x27;你好!我是一个节点&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;)],</span><br><span class="line"> <span class="string">&#x27;extra_field&#x27;</span>: 10&#125;</span><br></pre></td></tr></table></figure><h2 id="使用-pretty-print-来格式化显示"><a href="#使用-pretty-print-来格式化显示" class="headerlink" title="使用 pretty_print 来格式化显示"></a>使用 pretty_print 来格式化显示</h2><p>输出结果更清晰</p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">result = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(<span class="string">&quot;你好啊，我是花花！&quot;</span>)]&#125;)</span><br><span class="line"><span class="keyword">for</span> message <span class="keyword">in</span> result[<span class="string">&quot;messages&quot;</span>]:</span><br><span class="line">    message.pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">你好啊，我是花花！</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好!我是一个节点</span><br></pre></td></tr></table></figure><h1 id="基本控制：串行控制"><a href="#基本控制：串行控制" class="headerlink" title="基本控制：串行控制"></a>基本控制：串行控制</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> START, END, StateGraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    value_1: <span class="built_in">str</span></span><br><span class="line">    value_2: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_1</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">&quot;a&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_2</span>(<span class="params">state: State</span>):</span><br><span class="line">    current_value_1 = state[<span class="string">&quot;value_1&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">f&quot;<span class="subst">&#123;current_value_1&#125;</span> + b&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">step_3</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;value_2&quot;</span>: <span class="number">10</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"><span class="comment"># 设置图中节点</span></span><br><span class="line">graph_builder.add_node(step_1)</span><br><span class="line">graph_builder.add_node(step_2)</span><br><span class="line">graph_builder.add_node(step_3)</span><br><span class="line"><span class="comment"># 设置图中边</span></span><br><span class="line">graph_builder.add_edge(START, <span class="string">&quot;step_1&quot;</span>) <span class="comment"># 开始的边</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;step_1&quot;</span>, <span class="string">&quot;step_2&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;step_2&quot;</span>, <span class="string">&quot;step_3&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;step_3&quot;</span>, END) <span class="comment"># 结束的边</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;value_1&quot;</span>: <span class="string">&quot;c&quot;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917135828786.png" alt="image-20250917135828786" style="zoom:80%;" /></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;value_1&#x27;</span>: <span class="string">&#x27;a + b&#x27;</span>, <span class="string">&#x27;value_2&#x27;</span>: 10&#125;</span><br></pre></td></tr></table></figure><h1 id="基本控制：分支控制"><a href="#基本控制：分支控制" class="headerlink" title="基本控制：分支控制"></a>基本控制：分支控制</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Any</span>, Annotated</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> START, END, StateGraph</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="comment"># Annotated允许为类型提供额外的元数据，而不影响类型检查时对类型本身的理解</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    aggregate: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;A&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;A&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;B&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;B&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;C&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;C&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;添加&#x27;D&#x27;到<span class="subst">&#123;state[<span class="string">&#x27;aggregate&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;D&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">graph_builder = StateGraph(State)</span><br><span class="line"><span class="comment"># 设置图中节点</span></span><br><span class="line">graph_builder.add_node(a)</span><br><span class="line">graph_builder.add_node(b)</span><br><span class="line">graph_builder.add_node(c)</span><br><span class="line">graph_builder.add_node(d)</span><br><span class="line"><span class="comment"># 设置图中边</span></span><br><span class="line">graph_builder.add_edge(START, <span class="string">&quot;a&quot;</span>) <span class="comment"># 开始的边</span></span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">graph_builder.add_edge(<span class="string">&quot;d&quot;</span>, END) <span class="comment"># 结束的边</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = graph_builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;, &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;foo&quot;</span>&#125;&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917140002989.png" alt="image-20250917140002989" style="zoom:67%;" /></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加<span class="string">&#x27;A&#x27;</span>到[]</span><br><span class="line">添加<span class="string">&#x27;B&#x27;</span>到[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">添加<span class="string">&#x27;C&#x27;</span>到[<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">添加<span class="string">&#x27;D&#x27;</span>到[<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;aggregate&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><h1 id="基本控制：条件分支与循环"><a href="#基本控制：条件分支与循环" class="headerlink" title="基本控制：条件分支与循环"></a>基本控制：条件分支与循环</h1><h2 id="分支条件"><a href="#分支条件" class="headerlink" title="分支条件"></a>分支条件</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated, <span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    aggregate: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node A sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;A&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node B sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;B&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line">builder.add_node(a)</span><br><span class="line">builder.add_node(b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">state: State</span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;b&quot;</span>, END]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state[<span class="string">&quot;aggregate&quot;</span>]) &lt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">builder.add_conditional_edges(<span class="string">&quot;a&quot;</span>, route) <span class="comment"># 条件边</span></span><br><span class="line">builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917140318708.png" alt="image-20250917140318708" /></p><p>执行结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Node A sees []</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;aggregate&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><p>注意：使用递归限制recursion_limit，防止异常情况下的大量无用调用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.errors <span class="keyword">import</span> GraphRecursionError</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;, &#123;<span class="string">&quot;recursion_limit&quot;</span>: <span class="number">4</span>&#125;)</span><br><span class="line"><span class="keyword">except</span> GraphRecursionError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Recursion Error&quot;</span>) <span class="comment"># 递归错误 超出限制</span></span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node A sees []</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Recursion Error</span><br></pre></td></tr></table></figure><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated, <span class="type">Literal</span></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image, display</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点通信消息类型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    aggregate: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node A sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;A&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node B sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;B&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node C sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;C&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">d</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;Node D sees <span class="subst">&#123;state[<span class="string">&quot;aggregate&quot;</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;aggregate&quot;</span>: [<span class="string">&quot;D&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置节点</span></span><br><span class="line">builder.add_node(a)</span><br><span class="line">builder.add_node(b)</span><br><span class="line">builder.add_node(c)</span><br><span class="line">builder.add_node(d)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">route</span>(<span class="params">state: State</span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;b&quot;</span>, END]:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(state[<span class="string">&quot;aggregate&quot;</span>]) &lt; <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;a&quot;</span>)</span><br><span class="line">builder.add_conditional_edges(<span class="string">&quot;a&quot;</span>, route)</span><br><span class="line">builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;d&quot;</span>)</span><br><span class="line">builder.add_edge([<span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>], <span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;aggregate&quot;</span>: []&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917140631860.png" alt="image-20250917140631860"></p><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Node A sees []</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node C sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node D sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line">Node B sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]</span><br><span class="line">Node C sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node D sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">Node A sees [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;aggregate&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;A&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><h1 id="精细控制：图的运行时配置"><a href="#精细控制：图的运行时配置" class="headerlink" title="精细控制：图的运行时配置"></a>精细控制：图的运行时配置</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated, <span class="type">Sequence</span></span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> BaseMessage, HumanMessage</span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables.config <span class="keyword">import</span> RunnableConfig</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> END, StateGraph, START</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">model1 = ChatOpenAI(</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;OPENAI_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;OPENAI_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要切换的模型</span></span><br><span class="line">models = &#123;</span><br><span class="line">    <span class="string">&quot;deepseek&quot;</span>: model,</span><br><span class="line">    <span class="string">&quot;openai&quot;</span>: model1,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AgentState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    messages: Annotated[<span class="type">Sequence</span>[BaseMessage], operator.add]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_call_model</span>(<span class="params">state: AgentState, config: RunnableConfig</span>):</span><br><span class="line">    <span class="comment"># 使用LCEL的配置</span></span><br><span class="line">    model_name = config[<span class="string">&quot;configurable&quot;</span>].get(<span class="string">&quot;model&quot;</span>, <span class="string">&quot;deepseek&quot;</span>) <span class="comment"># 设置默认模型</span></span><br><span class="line">    model = models[model_name]</span><br><span class="line">    response = model.invoke(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(AgentState)</span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line">builder.add_node(<span class="string">&quot;model&quot;</span>, _call_model)</span><br><span class="line"><span class="comment"># 定义边</span></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;model&quot;</span>)</span><br><span class="line">builder.add_edge(<span class="string">&quot;model&quot;</span>, END)</span><br><span class="line"></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">display(Image(graph.get_graph().draw_mermaid_png()))</span><br></pre></td></tr></table></figure><p>没有增加运行时配置的情况下，它会默认调用deepseek</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(content=<span class="string">&quot;hi 你是谁？&quot;</span>)]&#125;)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>执行结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;hi 你是谁？&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;),</span><br><span class="line">  AIMessage(content=<span class="string">&#x27;嗨！我是DeepSeek-V3，你的智能助手，由深度求索公司创造。😊 我可以帮你解答问题、聊天、提供建议，甚至协助你处理各种学习和工作上的任务。有什么我可以帮你的吗？&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 49, <span class="string">&#x27;prompt_tokens&#x27;</span>: 8, <span class="string">&#x27;total_tokens&#x27;</span>: 57, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 8&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;228c33b4-21f7-4c47-82bd-7417ca36d81d&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--ff284eca-736c-4b89-bb63-7e5c07ea1786-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 8, <span class="string">&#x27;output_tokens&#x27;</span>: 49, <span class="string">&#x27;total_tokens&#x27;</span>: 57, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><p>增加运行时配置，动态切换模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;model&quot;</span>: <span class="string">&quot;openai&quot;</span>&#125;&#125;</span><br><span class="line">res = graph.invoke(&#123;<span class="string">&quot;messages&quot;</span>: [HumanMessage(content=<span class="string">&quot;hi 你是谁？&quot;</span>)]&#125;, config=config)</span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p>执行结果为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;hi 你是谁？&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;),</span><br><span class="line">  AIMessage(content=<span class="string">&#x27;你好，我是一个人工智能助手。我可以回答你的问题和提供帮助。有什么可以帮到你的吗？&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 44, <span class="string">&#x27;prompt_tokens&#x27;</span>: 14, <span class="string">&#x27;total_tokens&#x27;</span>: 58, <span class="string">&#x27;completion_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;accepted_prediction_tokens&#x27;</span>: 0, <span class="string">&#x27;audio_tokens&#x27;</span>: 0, <span class="string">&#x27;reasoning_tokens&#x27;</span>: 0, <span class="string">&#x27;rejected_prediction_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: 0, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;gpt-3.5-turbo-0125&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: None, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;chatcmpl-CGcvpmH2o6wgubw0PLBymye0uPyzN&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: <span class="string">&#x27;default&#x27;</span>, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--5a5fb090-eae6-4a54-bef8-c877446d5a63-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 14, <span class="string">&#x27;output_tokens&#x27;</span>: 44, <span class="string">&#x27;total_tokens&#x27;</span>: 58, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;audio&#x27;</span>: 0, <span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;<span class="string">&#x27;audio&#x27;</span>: 0, <span class="string">&#x27;reasoning&#x27;</span>: 0&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><h1 id="精细控制：map-reduce并行执行"><a href="#精细控制：map-reduce并行执行" class="headerlink" title="精细控制：map-reduce并行执行"></a>精细控制：map-reduce并行执行</h1><p>给定一个来自用户的一般主题，生成相关主题列表，为每个主题生成一个笑话，并从结果列表中选择最佳笑话。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917141044009.png" alt="image-20250917141044009"></p><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> Annotated</span><br><span class="line"><span class="keyword">from</span> typing_extensions <span class="keyword">import</span> TypedDict</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langgraph.types <span class="keyword">import</span> Send</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> END, StateGraph, START</span><br><span class="line"><span class="keyword">from</span> IPython.display <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pydantic <span class="keyword">import</span> BaseModel, Field</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型和提示词</span></span><br><span class="line"><span class="comment"># 定义我们将使用的模型和提示词</span></span><br><span class="line">subjects_prompt = <span class="string">&quot;&quot;&quot;生成一个逗号分隔的列表，包含2到5个与以下主题相关的例子：&#123;topic&#125;。&quot;&quot;&quot;</span></span><br><span class="line">joke_prompt = <span class="string">&quot;&quot;&quot;生成一个关于&#123;subject&#125;的笑话&quot;&quot;&quot;</span></span><br><span class="line">best_joke_prompt = <span class="string">&quot;&quot;&quot;以下是一些关于&#123;topic&#125;的笑话。选出最好的一个！返回最佳笑话的ID。&#123;jokes&#125;&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义以下三个数据模型</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Subjects</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    subjects: <span class="built_in">list</span>[<span class="built_in">str</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Joke</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    joke: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BestJoke</span>(<span class="title class_ inherited__">BaseModel</span>):</span><br><span class="line">    <span class="built_in">id</span>: <span class="built_in">int</span> = Field(description=<span class="string">&quot;最佳笑话的索引，从0开始&quot;</span>, ge=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义大模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 图组件：定义构成图的组件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这将是主图的整体状态。</span></span><br><span class="line"><span class="comment"># 它将包含一个主题（我们期望用户提供）</span></span><br><span class="line"><span class="comment"># 然后将生成一个主题列表，并为每个主题生成一个笑话</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">OverallState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    topic: <span class="built_in">str</span></span><br><span class="line">    subjects: <span class="built_in">list</span></span><br><span class="line">    <span class="comment"># 注意这里我们使用operator.add</span></span><br><span class="line">    <span class="comment"># 这是因为我们想把从各个节点生成的所有笑话</span></span><br><span class="line">    <span class="comment"># 合并回一个列表 - 这本质上是&quot;归约&quot;部分</span></span><br><span class="line">    jokes: Annotated[<span class="built_in">list</span>, operator.add]</span><br><span class="line">    best_selected_joke: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这将是我们将&quot;映射&quot;所有主题的节点的状态</span></span><br><span class="line"><span class="comment"># 用于生成笑话</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">JokeState</span>(<span class="title class_ inherited__">TypedDict</span>):</span><br><span class="line">    subject: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="comment"># 这是我们用来生成笑话主题的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_topics</span>(<span class="params">state: OverallState</span>):</span><br><span class="line">    prompt = subjects_prompt.<span class="built_in">format</span>(topic=state[<span class="string">&quot;topic&quot;</span>])</span><br><span class="line">    <span class="comment"># 模型进行结构化输出</span></span><br><span class="line">    response = model.with_structured_output(Subjects).invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;subjects&quot;</span>: response.subjects&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们根据给定的主题生成笑话</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_joke</span>(<span class="params">state: JokeState</span>):</span><br><span class="line">    prompt = joke_prompt.<span class="built_in">format</span>(subject=state[<span class="string">&quot;subject&quot;</span>])</span><br><span class="line">    <span class="comment"># 模型进行结构化输出</span></span><br><span class="line">    response = model.with_structured_output(Joke).invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;jokes&quot;</span>: [response.joke]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们定义映射到生成的主题上的逻辑</span></span><br><span class="line"><span class="comment"># 我们将在图中使用这个作为边缘</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">continue_to_jokes</span>(<span class="params">state: OverallState</span>):</span><br><span class="line">    <span class="comment"># 我们将返回一个`Send`对象列表</span></span><br><span class="line">    <span class="comment"># 每个`Send`对象包含图中节点的名称</span></span><br><span class="line">    <span class="comment"># 以及要发送到该节点的状态</span></span><br><span class="line">    <span class="keyword">return</span> [Send(<span class="string">&quot;generate_joke&quot;</span>, &#123;<span class="string">&quot;subject&quot;</span>: s&#125;) <span class="keyword">for</span> s <span class="keyword">in</span> state[<span class="string">&quot;subjects&quot;</span>]]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里我们将评判最佳笑话</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">best_joke</span>(<span class="params">state: OverallState</span>):</span><br><span class="line">    jokes = <span class="string">&quot;\n\n&quot;</span>.join(state[<span class="string">&quot;jokes&quot;</span>])</span><br><span class="line">    prompt = best_joke_prompt.<span class="built_in">format</span>(topic=state[<span class="string">&quot;topic&quot;</span>], jokes=jokes)</span><br><span class="line">    response = model.with_structured_output(BestJoke).invoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;best_selected_joke&quot;</span>: state[<span class="string">&quot;jokes&quot;</span>][response.<span class="built_in">id</span>]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建图：这里我们将所有内容组合在一起构建我们的图</span></span><br><span class="line">graph = StateGraph(OverallState)</span><br><span class="line"><span class="comment"># 设置节点</span></span><br><span class="line">graph.add_node(<span class="string">&quot;generate_topics&quot;</span>, generate_topics)</span><br><span class="line">graph.add_node(<span class="string">&quot;generate_joke&quot;</span>, generate_joke)</span><br><span class="line">graph.add_node(<span class="string">&quot;best_joke&quot;</span>, best_joke)</span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line">graph.add_edge(START, <span class="string">&quot;generate_topics&quot;</span>)</span><br><span class="line">graph.add_conditional_edges(<span class="string">&quot;generate_topics&quot;</span>, continue_to_jokes, [<span class="string">&quot;generate_joke&quot;</span>]) <span class="comment"># 条件边</span></span><br><span class="line">graph.add_edge(<span class="string">&quot;generate_joke&quot;</span>, <span class="string">&quot;best_joke&quot;</span>)</span><br><span class="line">graph.add_edge(<span class="string">&quot;best_joke&quot;</span>, END)</span><br><span class="line">app = graph.<span class="built_in">compile</span>() <span class="comment"># 图编译</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看节点与图结构</span></span><br><span class="line">Image(app.get_graph().draw_mermaid_png())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;topic&quot;</span>: <span class="string">&quot;动物&quot;</span>&#125;):</span><br><span class="line">    <span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure><p>查看节点与图结构</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917141132825.png" alt="image-20250917141132825"></p><p>执行结果为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;generate_topics&#x27;</span>: &#123;<span class="string">&#x27;subjects&#x27;</span>: [<span class="string">&#x27;动物&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;generate_joke&#x27;</span>: &#123;<span class="string">&#x27;jokes&#x27;</span>: [<span class="string">&#x27;为什么老虎不喝茶？因为它们喝茶会变成茶虎！&#x27;</span>]&#125;&#125;</span><br><span class="line">&#123;<span class="string">&#x27;best_joke&#x27;</span>: &#123;<span class="string">&#x27;best_selected_joke&#x27;</span>: <span class="string">&#x27;为什么老虎不喝茶？因为它们喝茶会变成茶虎！&#x27;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第二讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph核心组件持久化瘀记忆</title>
    <link href="https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/3-langgraph-memory/"/>
    <id>https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/3-langgraph-memory/</id>
    <published>2025-09-16T16:00:00.000Z</published>
    <updated>2025-09-17T06:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化层"><a href="#持久化层" class="headerlink" title="持久化层"></a>持久化层</h1><ul><li>LangGraph 的内置功能，通过检查点器实现</li><li>保存和恢复图执行状态的<strong>机制</strong></li><li>让你的 AI 应用能够 “记住” 之前的交互</li><li>支持应用在中断后从上次停止的地方继续</li><li>为调试和人机协作提供基础支持</li></ul><h1 id="记忆"><a href="#记忆" class="headerlink" title="记忆"></a>记忆</h1><ul><li>是一种认知功能，允许 AI 存储、检索和使用信息</li><li>在 LangGraph 中分为两种类型：短期记忆和长期记忆</li><li>记忆是持久化的一种应用场景，使 AI 能够在交互中保持上下文</li><li>记忆提供了结构化的方式来组织信息</li><li>记忆提供了高效的检索机制</li><li>记忆定义了如何将存储的信息融入到当前对话中</li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917142203967.png" alt="image-20250917142203967" style="zoom:50%;" /></p><ul><li>持久化层<ul><li>无论何种记忆方式，都要激活持久化层</li></ul></li><li>使用短期记忆<ul><li>适合简单应用，只需要在会话中保持基本状态，如保存用户名或简单偏好</li></ul></li><li>使用长期记忆<ul><li>适合需要跨会话学习和适应的高级 AI 应用，如个人助理或客户服务机器人</li></ul></li></ul><h1 id="基本运用：线程隔离的持久化层"><a href="#基本运用：线程隔离的持久化层" class="headerlink" title="基本运用：线程隔离的持久化层"></a>基本运用：线程隔离的持久化层</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, MessagesState, START</span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义节点</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    response = model.invoke(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建图</span></span><br><span class="line">builder = StateGraph(MessagesState)</span><br><span class="line"><span class="comment"># 设置节点</span></span><br><span class="line">builder.add_node(<span class="string">&quot;call_model&quot;</span>, call_model)</span><br><span class="line"><span class="comment"># 设置边</span></span><br><span class="line">builder.add_edge(START, <span class="string">&quot;call_model&quot;</span>)</span><br><span class="line"><span class="comment"># 图的编译</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>()</span><br></pre></td></tr></table></figure><p>没有激活持久化层，无法实现多轮对话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;hi! 我是小美&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小美</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好呀小美！😊 很高兴认识你～我是DeepSeek-V3，可以叫我小深或者DeepSeek。有什么我可以帮你的吗？无论是聊天、解答问题还是提供建议，我都在这里哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我不知道你的名字，但你可以告诉我！如果你愿意的话，我可以帮你记住，并在以后的对话中称呼你。😊</span><br></pre></td></tr></table></figure><p>激活持久化层</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="comment"># 使用 MemorySaver 保存中间状态</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125; <span class="comment"># 配置对话的线程id</span></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;hi! 我是小美&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小美</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好呀小美！😊 很高兴认识你～我叫DeepSeek-V3，是你的AI助手，有什么可以帮你的吗？无论是聊天、解答问题还是提供建议，我都在这里哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你刚刚说你是“小美”呀～需要我帮你记住这个名字吗？还是说你有其他喜欢的称呼呢？😊</span><br></pre></td></tr></table></figure><p>注意对话线程thread_id的输入，输入1和2的区别</p><p>tread_id:2</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;, <span class="comment"># different thread_id</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;, <span class="comment"># different thread_id</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-1].pretty_print()</span><br></pre></td></tr></table></figure><p>thread_id:1</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(</span><br><span class="line">    &#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;, <span class="comment"># different thread_id</span></span><br><span class="line">    stream_mode=<span class="string">&quot;values&quot;</span>,</span><br><span class="line">):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你之前告诉我你叫“小美”呀～需要我以后都这样称呼你吗？还是想换个新名字？随时可以告诉我哦！😊</span><br></pre></td></tr></table></figure><p>由以上看到，对话持久化内容，只能在同一个线程中获取，如果换一个线程，则是读取不到之前对话内容</p><h1 id="基本运用：跨线程持久化调用"><a href="#基本运用：跨线程持久化调用" class="headerlink" title="基本运用：跨线程持久化调用"></a>基本运用：跨线程持久化调用</h1><p>如果我们要跨线程读取持久层的对话信息，则需要在对话配置设置userid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langgraph.store.memory <span class="keyword">import</span> InMemoryStore</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> OpenAIEmbeddings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用OpenAI的封装，但是运行国产嵌入模型</span></span><br><span class="line"><span class="comment"># 使用内存存储来保存向量化后记忆数据</span></span><br><span class="line">in_memory_store = InMemoryStore(</span><br><span class="line">    index=&#123;</span><br><span class="line">        <span class="string">&quot;embed&quot;</span>: OpenAIEmbeddings(</span><br><span class="line">            model=<span class="string">&quot;BAAI/bge-m3&quot;</span>,</span><br><span class="line">            api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">            base_url=<span class="string">&quot;https://api.siliconflow.cn/v1&quot;</span>,</span><br><span class="line">        ),</span><br><span class="line">        <span class="string">&quot;dims&quot;</span>: <span class="number">1024</span>,</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> langchain_core.runnables <span class="keyword">import</span> RunnableConfig</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> StateGraph, MessagesState, START</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.store.base <span class="keyword">import</span> BaseStore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：我们将 Store 参数传递给节点 --</span></span><br><span class="line"><span class="comment"># 这是我们编译图时使用的 Store</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState, config: RunnableConfig, *, store: BaseStore</span>):</span><br><span class="line">    <span class="comment"># 从存储中检索用户信息</span></span><br><span class="line">    user_id = config[<span class="string">&quot;configurable&quot;</span>][<span class="string">&quot;user_id&quot;</span>]</span><br><span class="line">    <span class="comment"># 从存储中检索用户信息</span></span><br><span class="line">    namespace = (<span class="string">&quot;memories&quot;</span>, user_id)</span><br><span class="line">    memories = store.search(namespace, query=<span class="built_in">str</span>(state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].content))</span><br><span class="line">    info = <span class="string">&quot;\n&quot;</span>.join([d.value[<span class="string">&quot;data&quot;</span>] <span class="keyword">for</span> d <span class="keyword">in</span> memories])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;在内存中检索到的用户信息：<span class="subst">&#123;info&#125;</span>&quot;</span>)</span><br><span class="line">    system_msg = <span class="string">f&quot;你是一个正在与用户交谈的小助手。用户信息：<span class="subst">&#123;info&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 如果用户要求模型记住信息，则存储新的记忆</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;记住&quot;</span> <span class="keyword">in</span> last_message.content.lower() <span class="keyword">or</span> <span class="string">&quot;remember&quot;</span> <span class="keyword">in</span> last_message.content.lower():</span><br><span class="line">        <span class="comment"># 硬编码一个记忆</span></span><br><span class="line">        memory = <span class="string">&quot;用户名字是花花&quot;</span></span><br><span class="line">        store.put(namespace, <span class="built_in">str</span>(uuid.uuid4()), &#123;<span class="string">&quot;data&quot;</span>: memory&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型调用</span></span><br><span class="line">    response = model.invoke(</span><br><span class="line">        [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_msg&#125;] + state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">builder = StateGraph(MessagesState)</span><br><span class="line">builder.add_node(<span class="string">&quot;call_model&quot;</span>, call_model)</span><br><span class="line">builder.add_edge(START, <span class="string">&quot;call_model&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：我们在编译图时传递了 store 对象</span></span><br><span class="line">graph = builder.<span class="built_in">compile</span>(checkpointer=MemorySaver(), store=in_memory_store)</span><br></pre></td></tr></table></figure><p>下面执行，注意线程id和用户id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>, <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125; <span class="comment"># 配置对话的线程id和用户id</span></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;请记住我的名字叫花花!&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">请记住我的名字叫花花!</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">好的，花花！我会记住你的名字。如果有任何需要帮助的地方，随时告诉我哦！ 😊</span><br></pre></td></tr></table></figure><p>跨线程使用相同的用户ID查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意线程ID和用户ID，同一个user_id</span></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>, <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125; <span class="comment"># 配置对话的线程id和用户id</span></span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么名字?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">在内存中检索到的用户信息：用户名字是花花</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你的名字是花花！有什么我可以帮你的吗？😊</span><br></pre></td></tr></table></figure><p>我们可以查询存储在内存中的记忆</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> memory <span class="keyword">in</span> in_memory_store.search((<span class="string">&quot;memories&quot;</span>, <span class="string">&quot;1&quot;</span>)):</span><br><span class="line">    <span class="built_in">print</span>(memory.value)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;用户名字是花花&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p>用户级的记忆隔离</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;3&quot;</span>, <span class="string">&quot;user_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">input_message = &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;我叫什么?&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> graph.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    chunk[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么?</span><br><span class="line">在内存中检索到的用户信息：</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我无法知道您的名字，因为您没有告诉我。如果您愿意，可以告诉我您的名字，我会记住它以便更好地为您服务！ 😊</span><br></pre></td></tr></table></figure><h1 id="记忆：短期记忆的实现"><a href="#记忆：短期记忆的实现" class="headerlink" title="记忆：短期记忆的实现"></a>记忆：短期记忆的实现</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, StateGraph, START, END</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意：使用内存存储来存储记忆</span></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">query: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数可以浏览网络。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 模拟一个网络搜索返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;北京天气晴朗 大约22度 湿度30%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [search]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义大模型</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bound_model = model.bind_tools(tools)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回下一个要执行的节点。&quot;&quot;&quot;</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果没有函数调用，则结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line">    <span class="comment"># 否则如果有，我们继续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;action&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    response = bound_model.invoke(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这会被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将在其间循环的两个节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为 `agent`</span></span><br><span class="line"><span class="comment"># 这意味着这个节点是第一个被调用的</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用 `agent`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在 `agent` 节点被调用后采取的边。</span></span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">    <span class="comment"># 接下来，我们传入路径映射 - 这条边可能去往的所有可能节点</span></span><br><span class="line">    [<span class="string">&quot;action&quot;</span>, END],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从 `tools` 到 `agent` 添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用 `tools` 之后，接下来调用 `agent` 节点。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line"><span class="comment"># 这将它编译成一个 LangChain Runnable，</span></span><br><span class="line"><span class="comment"># 意味着你可以像使用任何其他 runnable 一样使用它</span></span><br><span class="line"><span class="comment"># 设置检查点为内存形式，注意没有设置store</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;hi! 我是阿花&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是阿花</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好阿花！很高兴认识你！我是AI助手，可以帮你搜索信息、回答问题。有什么我可以帮助你的吗？</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你刚才告诉我你叫<span class="string">&quot;阿花&quot;</span>！这个名字很可爱呢！有什么我可以帮阿花做的吗？</span><br></pre></td></tr></table></figure><h1 id="记忆：长期记忆的实现"><a href="#记忆：长期记忆的实现" class="headerlink" title="记忆：长期记忆的实现"></a>记忆：长期记忆的实现</h1><p>使用mongodb进行内容存储</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> create_react_agent</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义工具</span></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">city: <span class="type">Literal</span>[<span class="string">&quot;北京&quot;</span>, <span class="string">&quot;深圳&quot;</span>]</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;用来返回天气信息的工具函数。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> city == <span class="string">&quot;北京&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;北京天气晴朗 大约22度 湿度30%&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> city == <span class="string">&quot;深圳&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;深圳天气多云 大约28度 湿度80%&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> AssertionError(<span class="string">&quot;Unknown city&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [get_weather]</span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接mongodb进行查询</span></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.mongodb <span class="keyword">import</span> MongoDBSaver</span><br><span class="line"></span><br><span class="line">MONGODB_URI = <span class="string">&quot;82.157.193.65:27017&quot;</span>  <span class="comment"># replace this with your connection string</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> MongoDBSaver.from_conn_string(MONGODB_URI) <span class="keyword">as</span> checkpointer:</span><br><span class="line">    graph = create_react_agent(model, tools=tools, checkpointer=checkpointer)</span><br><span class="line">    config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;1&quot;</span>&#125;&#125;</span><br><span class="line">    response = graph.invoke(</span><br><span class="line">        &#123;<span class="string">&quot;messages&quot;</span>: [(<span class="string">&quot;human&quot;</span>, <span class="string">&quot;北京今天的天气如何？&quot;</span>)]&#125;, config</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;北京今天的天气如何？&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;b0bd092b-5519-4ca5-9018-f9a771813ec7&#x27;</span>), AIMessage(content=<span class="string">&#x27;我来帮您查询北京今天的天气情况。&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;tool_calls&#x27;</span>: [&#123;<span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_b7iojoLeBBIQTVuThfk9Mkxu&#x27;</span>, <span class="string">&#x27;function&#x27;</span>: &#123;<span class="string">&#x27;arguments&#x27;</span>: <span class="string">&#x27;&#123;&quot;city&quot;: &quot;\\u5317\\u4eac&quot;&#125;&#x27;</span>, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;get_weather&#x27;</span>&#125;, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;function&#x27;</span>, <span class="string">&#x27;index&#x27;</span>: 0&#125;], <span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 29, <span class="string">&#x27;prompt_tokens&#x27;</span>: 161, <span class="string">&#x27;total_tokens&#x27;</span>: 190, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 161&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;478a99d7-5560-430a-9f82-8f2f7ae1b664&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;tool_calls&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--1267678f-a949-44d4-a980-d8f3e09a4b6e-0&#x27;</span>, tool_calls=[&#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;get_weather&#x27;</span>, <span class="string">&#x27;args&#x27;</span>: &#123;<span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;北京&#x27;</span>&#125;, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;call_00_b7iojoLeBBIQTVuThfk9Mkxu&#x27;</span>, <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;tool_call&#x27;</span>&#125;], usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 161, <span class="string">&#x27;output_tokens&#x27;</span>: 29, <span class="string">&#x27;total_tokens&#x27;</span>: 190, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;), ToolMessage(content=<span class="string">&#x27;北京天气晴朗 大约22度 湿度30%&#x27;</span>, name=<span class="string">&#x27;get_weather&#x27;</span>, <span class="built_in">id</span>=<span class="string">&#x27;0ef181b1-2988-4c14-a054-6f84c27b103c&#x27;</span>, tool_call_id=<span class="string">&#x27;call_00_b7iojoLeBBIQTVuThfk9Mkxu&#x27;</span>), AIMessage(content=<span class="string">&#x27;根据查询结果，北京今天的天气情况如下：\n\n- **天气状况**：晴朗\n- **温度**：大约22度\n- **湿度**：30%\n\n今天北京的天气很不错，晴朗且温度适宜，是个适合外出活动的好天气！&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 51, <span class="string">&#x27;prompt_tokens&#x27;</span>: 198, <span class="string">&#x27;total_tokens&#x27;</span>: 249, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 198&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;99d0def0-6636-4b59-b479-e417a7973a00&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--e1cf4802-1d6b-48f8-b706-e1a25dcef2f1-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 198, <span class="string">&#x27;output_tokens&#x27;</span>: 51, <span class="string">&#x27;total_tokens&#x27;</span>: 249, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><h1 id="记忆：使用总结技术优化"><a href="#记忆：使用总结技术优化" class="headerlink" title="记忆：使用总结技术优化"></a>记忆：使用总结技术优化</h1><p>注意：长期使用，记忆内容越来越多，会导致超出大模型的上下文窗口</p><ul><li>消息过滤：对旧消息进行类似删除或编辑的操作，目的是为了防止撑爆上下文</li><li>消息总结：对旧消息进行总结，目的一样是为了防止记忆内容过长</li><li>注意对记忆的管理是一项关于召回率和精度的平衡艺术</li></ul><h2 id="方式一：消息过滤（截取对话信息的部分内容）"><a href="#方式一：消息过滤（截取对话信息的部分内容）" class="headerlink" title="方式一：消息过滤（截取对话信息的部分内容）"></a>方式一：消息过滤（截取对话信息的部分内容）</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_core.tools <span class="keyword">import</span> tool</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, StateGraph, START</span><br><span class="line"><span class="keyword">from</span> langgraph.prebuilt <span class="keyword">import</span> ToolNode</span><br><span class="line"></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@tool</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search</span>(<span class="params">query: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;调用此函数可以浏览网络。&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 模拟一个网络搜索返回</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;北京天气晴朗 大约22度 湿度30%&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tools = [search]</span><br><span class="line">tool_node = ToolNode(tools)</span><br><span class="line"></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">bound_model = model.bind_tools(tools)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回下一个要执行的节点。&quot;&quot;&quot;</span></span><br><span class="line">    last_message = state[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>]</span><br><span class="line">    <span class="comment"># 如果没有函数调用，则结束</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> last_message.tool_calls:</span><br><span class="line">        <span class="keyword">return</span> END</span><br><span class="line">    <span class="comment"># 否则，如果有函数调用，我们继续</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;action&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter_messages</span>(<span class="params">messages: <span class="built_in">list</span></span>):</span><br><span class="line">    <span class="comment"># 这是一个非常简单的辅助函数，它只使用最后一条消息</span></span><br><span class="line">    <span class="keyword">return</span> messages[-<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: MessagesState</span>):</span><br><span class="line">    messages = filter_messages(state[<span class="string">&quot;messages&quot;</span>])</span><br><span class="line">    response = bound_model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: response&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(MessagesState)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义我们将在其间循环的两个节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;agent&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(<span class="string">&quot;action&quot;</span>, tool_node)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为 `agent`</span></span><br><span class="line"><span class="comment"># 这意味着这个节点是第一个被调用的</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用 `agent`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在调用 `agent` 节点后采取的边。</span></span><br><span class="line">    <span class="string">&quot;agent&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">    <span class="comment"># 接下来，我们传入路径图 - 此边可能去往的所有可能节点</span></span><br><span class="line">    [<span class="string">&quot;action&quot;</span>, END],</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从 `action` 到 `agent` 添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用 `action` 之后，下一步调用 `agent` 节点。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;action&quot;</span>, <span class="string">&quot;agent&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line"><span class="comment"># 这将它编译成一个 LangChain Runnable，</span></span><br><span class="line"><span class="comment"># 意味着你可以像使用任何其他 runnable 一样使用它</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上面的示例，filter_messages直接截取了对话消息的最后一条，所以即便使用了memory，依然无法记住过往对话，以下调用代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;2&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;hi! 我是小黑&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 请注意，我们在这里使用了一个辅助函数，它只使用最后一条消息，失去了记忆功能</span></span><br><span class="line"><span class="comment"># 这将导致我们的模型只看到最后一条消息</span></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;values&quot;</span>):</span><br><span class="line">    event[<span class="string">&quot;messages&quot;</span>][-<span class="number">1</span>].pretty_print()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小黑</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好小黑！很高兴认识你！我是DeepSeek-V3，一个AI助手。有什么我可以帮助你的吗？</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">我无法直接知道您的名字，因为我没有访问个人信息的能力。您可以告诉我您的名字，这样我就可以在后续的对话中用名字来称呼您了。</span><br></pre></td></tr></table></figure><h2 id="方式二：消息总结-最常用"><a href="#方式二：消息总结-最常用" class="headerlink" title="方式二：消息总结(最常用)"></a>方式二：消息总结(最常用)</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Literal</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_deepseek <span class="keyword">import</span> ChatDeepSeek</span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> SystemMessage, RemoveMessage, HumanMessage</span><br><span class="line"><span class="keyword">from</span> langgraph.checkpoint.memory <span class="keyword">import</span> MemorySaver</span><br><span class="line"><span class="keyword">from</span> langgraph.graph <span class="keyword">import</span> MessagesState, StateGraph, START, END</span><br><span class="line"></span><br><span class="line">memory = MemorySaver()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将添加一个`summary`属性（除了MessagesState已有的`messages`键之外）</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">State</span>(<span class="title class_ inherited__">MessagesState</span>):</span><br><span class="line">    summary: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将使用这个模型进行对话和总结</span></span><br><span class="line">model = ChatDeepSeek(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    temperature=<span class="number">0</span>,</span><br><span class="line">    api_key=os.environ.get(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),</span><br><span class="line">    base_url=os.environ.get(<span class="string">&quot;DEEPSEEK_API_BASE&quot;</span>),</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义调用模型的逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_model</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="comment"># 如果存在摘要，我们将其作为系统消息添加</span></span><br><span class="line">    summary = state.get(<span class="string">&quot;summary&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> summary:</span><br><span class="line">        system_message = <span class="string">f&quot;之前对话的摘要: <span class="subst">&#123;summary&#125;</span>&quot;</span></span><br><span class="line">        messages = [SystemMessage(content=system_message)] + state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 我们返回一个列表，因为这将被添加到现有列表中</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;messages&quot;</span>: [response]&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们定义确定是结束还是总结对话的逻辑</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">should_continue</span>(<span class="params">state: State</span>) -&gt; <span class="type">Literal</span>[<span class="string">&quot;summarize_conversation&quot;</span>, END]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;返回下一个要执行的节点。&quot;&quot;&quot;</span></span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>]</span><br><span class="line">    <span class="comment"># 如果消息超过六条(总对话数，包含人机)，则我们总结对话</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(messages) &gt; <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;summarize_conversation&quot;</span></span><br><span class="line">    <span class="comment"># 否则我们可以直接结束</span></span><br><span class="line">    <span class="keyword">return</span> END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">summarize_conversation</span>(<span class="params">state: State</span>):</span><br><span class="line">    <span class="comment"># 首先，我们总结对话</span></span><br><span class="line">    summary = state.get(<span class="string">&quot;summary&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> summary:</span><br><span class="line">        <span class="comment"># 如果已经存在摘要，我们使用不同的系统提示来总结它</span></span><br><span class="line">        <span class="comment"># 与没有摘要的情况不同</span></span><br><span class="line">        summary_message = (</span><br><span class="line">            <span class="string">f&quot;这是迄今为止对话的摘要: <span class="subst">&#123;summary&#125;</span>\n\n&quot;</span></span><br><span class="line">            <span class="string">&quot;考虑上面的新消息，扩展摘要:&quot;</span></span><br><span class="line">        )</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        summary_message = <span class="string">&quot;创建上述对话的摘要:&quot;</span></span><br><span class="line"></span><br><span class="line">    messages = state[<span class="string">&quot;messages&quot;</span>] + [HumanMessage(content=summary_message)]</span><br><span class="line">    response = model.invoke(messages)</span><br><span class="line">    <span class="comment"># 现在我们需要删除我们不再想显示的消息</span></span><br><span class="line">    <span class="comment"># 我将删除除最后两条以外的所有消息，但你可以更改这一点</span></span><br><span class="line">    delete_messages = [RemoveMessage(<span class="built_in">id</span>=m.<span class="built_in">id</span>) <span class="keyword">for</span> m <span class="keyword">in</span> state[<span class="string">&quot;messages&quot;</span>][:-<span class="number">2</span>]]</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&quot;summary&quot;</span>: response.content, <span class="string">&quot;messages&quot;</span>: delete_messages&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个新图</span></span><br><span class="line">workflow = StateGraph(State)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义对话节点和总结节点</span></span><br><span class="line">workflow.add_node(<span class="string">&quot;conversation&quot;</span>, call_model)</span><br><span class="line">workflow.add_node(summarize_conversation)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将入口点设置为对话</span></span><br><span class="line">workflow.add_edge(START, <span class="string">&quot;conversation&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在添加一个条件边</span></span><br><span class="line">workflow.add_conditional_edges(</span><br><span class="line">    <span class="comment"># 首先，我们定义起始节点。我们使用`conversation`。</span></span><br><span class="line">    <span class="comment"># 这意味着这些是在调用`conversation`节点后采取的边。</span></span><br><span class="line">    <span class="string">&quot;conversation&quot;</span>,</span><br><span class="line">    <span class="comment"># 接下来，我们传入将确定下一个调用哪个节点的函数。</span></span><br><span class="line">    should_continue,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 现在我们从`summarize_conversation`到END添加一个普通边。</span></span><br><span class="line"><span class="comment"># 这意味着在调用`summarize_conversation`之后，我们结束。</span></span><br><span class="line">workflow.add_edge(<span class="string">&quot;summarize_conversation&quot;</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最后，我们编译它！</span></span><br><span class="line">app = workflow.<span class="built_in">compile</span>(checkpointer=memory)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级一下print函数以便可以更清晰的看到记忆过程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_update</span>(<span class="params">update</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> update.items():</span><br><span class="line">        <span class="keyword">for</span> m <span class="keyword">in</span> v[<span class="string">&quot;messages&quot;</span>]:</span><br><span class="line">            m.pretty_print()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;summary&quot;</span> <span class="keyword">in</span> v:</span><br><span class="line">            <span class="built_in">print</span>(v[<span class="string">&quot;summary&quot;</span>])</span><br><span class="line">            </span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.messages <span class="keyword">import</span> HumanMessage</span><br><span class="line"></span><br><span class="line">config = &#123;<span class="string">&quot;configurable&quot;</span>: &#123;<span class="string">&quot;thread_id&quot;</span>: <span class="string">&quot;4&quot;</span>&#125;&#125;</span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;hi! 我是小红&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br><span class="line"></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br><span class="line"></span><br><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我喜欢AI应用开发!&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">hi! 我是小红</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">你好呀小红！😊 很高兴认识你！我叫DeepSeek-V3，是你的AI助手～有什么我可以帮你的吗？无论是聊天、解答问题还是提供建议，我都会尽力帮你哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你刚刚说你是小红呀！😊 如果这是你喜欢的名字，那我就叫你小红啦～如果需要我记住其他名字或者昵称，也可以告诉我哦！✨</span><br><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我喜欢AI应用开发!</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">太棒了！小红喜欢AI应用开发，这可是一个充满创造力和未来感的领域呢！🚀  </span><br><span class="line"></span><br><span class="line">如果你需要：  </span><br><span class="line">- **学习资源**（比如教程、课程推荐）  </span><br><span class="line">- **工具或框架**（如TensorFlow、PyTorch、LLM应用开发）  </span><br><span class="line">- **项目灵感**（比如趣味小应用或实战案例）  </span><br><span class="line">- **技术问题讨论**（模型训练、部署优化等）  </span><br><span class="line"></span><br><span class="line">或者只是想分享你的想法和作品，我都很乐意一起交流！🤖💡  </span><br><span class="line"></span><br><span class="line">最近有在做什么有趣的AI项目吗？或者对哪个方向特别感兴趣呀？😃</span><br></pre></td></tr></table></figure><p>以上执行结果，人机对话一共6次，代码should_continue中，是对话大于6次才会触发对话总结，因此这次执行结果来看，是没有进行对话总结的，我们可以输出原始对话记录看下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">values = app.get_state(config).values</span><br><span class="line"><span class="built_in">print</span>(values)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">&#x27;messages&#x27;</span>: [HumanMessage(content=<span class="string">&#x27;hi! 我是小红&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;8d0e6e51-d6e9-4efc-9693-c5d04cadc37a&#x27;</span>), AIMessage(content=<span class="string">&#x27;你好呀小红！😊 很高兴认识你！我叫DeepSeek-V3，是你的AI助手～有什么我可以帮你的吗？无论是聊天、解答问题还是提供建议，我都会尽力帮你哦！✨&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 43, <span class="string">&#x27;prompt_tokens&#x27;</span>: 9, <span class="string">&#x27;total_tokens&#x27;</span>: 52, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 9&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;6e6881af-870c-4465-b8fe-1d8dc8daf72e&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--4814bca4-85e4-4d02-b6ce-9fbf48b6d2e6-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 9, <span class="string">&#x27;output_tokens&#x27;</span>: 43, <span class="string">&#x27;total_tokens&#x27;</span>: 52, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;), HumanMessage(content=<span class="string">&#x27;我叫什么名字?&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;decc7342-cafa-407d-b8a6-ea8dbd78001f&#x27;</span>), AIMessage(content=<span class="string">&#x27;哈哈，你刚刚说你是小红呀！😊 如果这是你喜欢的名字，那我就叫你小红啦～如果需要我记住其他名字或者昵称，也可以告诉我哦！✨&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 37, <span class="string">&#x27;prompt_tokens&#x27;</span>: 60, <span class="string">&#x27;total_tokens&#x27;</span>: 97, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 0&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 0, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 60&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;b393889e-3089-4097-a35d-d833bc9cf6c0&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--dad889fe-a153-4fa5-9a3e-8229b5933d49-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 60, <span class="string">&#x27;output_tokens&#x27;</span>: 37, <span class="string">&#x27;total_tokens&#x27;</span>: 97, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 0&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;), HumanMessage(content=<span class="string">&#x27;我喜欢AI应用开发!&#x27;</span>, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, <span class="built_in">id</span>=<span class="string">&#x27;3521ae51-a210-4543-a21d-ef5508c874ae&#x27;</span>), AIMessage(content=<span class="string">&#x27;太棒了！小红喜欢AI应用开发，这可是一个充满创造力和未来感的领域呢！🚀  \n\n如果你需要：  \n- **学习资源**（比如教程、课程推荐）  \n- **工具或框架**（如TensorFlow、PyTorch、LLM应用开发）  \n- **项目灵感**（比如趣味小应用或实战案例）  \n- **技术问题讨论**（模型训练、部署优化等）  \n\n或者只是想分享你的想法和作品，我都很乐意一起交流！🤖💡  \n\n最近有在做什么有趣的AI项目吗？或者对哪个方向特别感兴趣呀？😃&#x27;</span>, additional_kwargs=&#123;<span class="string">&#x27;refusal&#x27;</span>: None&#125;, response_metadata=&#123;<span class="string">&#x27;token_usage&#x27;</span>: &#123;<span class="string">&#x27;completion_tokens&#x27;</span>: 129, <span class="string">&#x27;prompt_tokens&#x27;</span>: 106, <span class="string">&#x27;total_tokens&#x27;</span>: 235, <span class="string">&#x27;completion_tokens_details&#x27;</span>: None, <span class="string">&#x27;prompt_tokens_details&#x27;</span>: &#123;<span class="string">&#x27;audio_tokens&#x27;</span>: None, <span class="string">&#x27;cached_tokens&#x27;</span>: 64&#125;, <span class="string">&#x27;prompt_cache_hit_tokens&#x27;</span>: 64, <span class="string">&#x27;prompt_cache_miss_tokens&#x27;</span>: 42&#125;, <span class="string">&#x27;model_name&#x27;</span>: <span class="string">&#x27;deepseek-chat&#x27;</span>, <span class="string">&#x27;system_fingerprint&#x27;</span>: <span class="string">&#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;</span>, <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;a08f5947-137c-495e-af6b-494628d45ae9&#x27;</span>, <span class="string">&#x27;service_tier&#x27;</span>: None, <span class="string">&#x27;finish_reason&#x27;</span>: <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;logprobs&#x27;</span>: None&#125;, <span class="built_in">id</span>=<span class="string">&#x27;run--f7939311-fd82-428e-a050-5e8c61b074e5-0&#x27;</span>, usage_metadata=&#123;<span class="string">&#x27;input_tokens&#x27;</span>: 106, <span class="string">&#x27;output_tokens&#x27;</span>: 129, <span class="string">&#x27;total_tokens&#x27;</span>: 235, <span class="string">&#x27;input_token_details&#x27;</span>: &#123;<span class="string">&#x27;cache_read&#x27;</span>: 64&#125;, <span class="string">&#x27;output_token_details&#x27;</span>: &#123;&#125;&#125;)]&#125;</span><br></pre></td></tr></table></figure><p>从以上原始对话内容看到，是没有summary的总结记录</p><p>为了触发总结机制，对话数要超过设置的阈值（6），因此我们在执行一次对话</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我更喜欢Python!&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">================================[1m Human Message [0m=================================</span><br><span class="line"></span><br><span class="line">我更喜欢Python!</span><br><span class="line">==================================[1m Ai Message [0m==================================</span><br><span class="line"></span><br><span class="line">👍 Python简直是AI开发的“王牌语言”！生态强大、库丰富，而且写起来像伪代码一样优雅～  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 你可能喜欢的Python AI工具链：</span></span><br><span class="line">- **机器学习**：Scikit-learn、XGBoost  </span><br><span class="line">- **深度学习**：TensorFlow、PyTorch、Keras  </span><br><span class="line">- **自然语言处理**：Hugging Face Transformers、spaCy、NLTK  </span><br><span class="line">- **数据处理**：Pandas、NumPy、Matplotlib  </span><br><span class="line">- **快速原型**：Jupyter Notebook + Colab  </span><br><span class="line"></span><br><span class="line"><span class="comment">### 小建议：</span></span><br><span class="line">如果你用Python做AI开发，强烈试试 **Anaconda** 管理环境，用 **VS Code** 或 **PyCharm** 写代码，再搭配 **Git** 版本控制～  </span><br><span class="line"></span><br><span class="line">最近在尝试什么库或项目吗？可以一起聊聊思路！🐍✨</span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">================================[1m Remove Message [0m================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">**对话摘要**  </span><br><span class="line">**参与者**：小红（用户）与 DeepSeek-V3（AI助手）  </span><br><span class="line">**主题**：AI应用开发与Python技术偏好  </span><br><span class="line"></span><br><span class="line">**关键内容**：  </span><br><span class="line">1. **自我介绍**：用户自称“小红”，AI助手表示欢迎并提供协助意愿。  </span><br><span class="line">2. **身份确认**：用户询问名字，AI重申用户名为“小红”并支持自定义称呼。  </span><br><span class="line">3. **兴趣表达**：用户明确喜欢AI应用开发，AI推荐学习资源、工具及项目灵感，并邀请分享具体方向。  </span><br><span class="line">4. **技术偏好**：用户强调更偏好Python，AI列举Python在AI领域的核心工具链（如PyTorch、Transformers等），并补充开发环境建议（Anaconda、VS Code等）。  </span><br><span class="line">5. **互动导向**：AI持续鼓励用户分享当前项目或兴趣点，保持开放讨论。  </span><br><span class="line"></span><br><span class="line">**特点**：对话简洁友好，聚焦技术交流，AI主动提供结构化建议并引导深入探讨。  </span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从执行的输出内容看，已经进行消息的删除以及对话的总结，我们查看下原始对话记录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">values = app.get_state(config).values</span><br><span class="line"><span class="built_in">print</span>(values)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;messages&#x27;: [HumanMessage(content=&#x27;我更喜欢Python!&#x27;, additional_kwargs=&#123;&#125;, response_metadata=&#123;&#125;, id=&#x27;7d4f3a28-e18d-494f-a05b-a16063ede5b4&#x27;), AIMessage(content=&#x27;👍 Python简直是AI开发的“王牌语言”！生态强大、库丰富，而且写起来像伪代码一样优雅～  \n\n### 你可能喜欢的Python AI工具链：\n- **机器学习**：Scikit-learn、XGBoost  \n- **深度学习**：TensorFlow、PyTorch、Keras  \n- **自然语言处理**：Hugging Face Transformers、spaCy、NLTK  \n- **数据处理**：Pandas、NumPy、Matplotlib  \n- **快速原型**：Jupyter Notebook + Colab  \n\n### 小建议：\n如果你用Python做AI开发，强烈试试 **Anaconda** 管理环境，用 **VS Code** 或 **PyCharm** 写代码，再搭配 **Git** 版本控制～  \n\n最近在尝试什么库或项目吗？可以一起聊聊思路！🐍✨&#x27;, additional_kwargs=&#123;&#x27;refusal&#x27;: None&#125;, response_metadata=&#123;&#x27;token_usage&#x27;: &#123;&#x27;completion_tokens&#x27;: 178, &#x27;prompt_tokens&#x27;: 243, &#x27;total_tokens&#x27;: 421, &#x27;completion_tokens_details&#x27;: None, &#x27;prompt_tokens_details&#x27;: &#123;&#x27;audio_tokens&#x27;: None, &#x27;cached_tokens&#x27;: 192&#125;, &#x27;prompt_cache_hit_tokens&#x27;: 192, &#x27;prompt_cache_miss_tokens&#x27;: 51&#125;, &#x27;model_name&#x27;: &#x27;deepseek-chat&#x27;, &#x27;system_fingerprint&#x27;: &#x27;fp_08f168e49b_prod0820_fp8_kvcache&#x27;, &#x27;id&#x27;: &#x27;046eef7d-7034-4093-8e72-05c2d2c46211&#x27;, &#x27;service_tier&#x27;: None, &#x27;finish_reason&#x27;: &#x27;stop&#x27;, &#x27;logprobs&#x27;: None&#125;, id=&#x27;run--696f424e-0663-4653-a90c-42d156ff4ddb-0&#x27;, usage_metadata=&#123;&#x27;input_tokens&#x27;: 243, &#x27;output_tokens&#x27;: 178, &#x27;total_tokens&#x27;: 421, &#x27;input_token_details&#x27;: &#123;&#x27;cache_read&#x27;: 192&#125;, &#x27;output_token_details&#x27;: &#123;&#125;&#125;)], &#x27;summary&#x27;: &#x27;---\n\n**对话摘要**  \n**参与者**：小红（用户）与 DeepSeek-V3（AI助手）  \n**主题**：AI应用开发与Python技术偏好  \n\n**关键内容**：  \n1. **自我介绍**：用户自称“小红”，AI助手表示欢迎并提供协助意愿。  \n2. **身份确认**：用户询问名字，AI重申用户名为“小红”并支持自定义称呼。  \n3. **兴趣表达**：用户明确喜欢AI应用开发，AI推荐学习资源、工具及项目灵感，并邀请分享具体方向。  \n4. **技术偏好**：用户强调更偏好Python，AI列举Python在AI领域的核心工具链（如PyTorch、Transformers等），并补充开发环境建议（Anaconda、VS Code等）。  \n5. **互动导向**：AI持续鼓励用户分享当前项目或兴趣点，保持开放讨论。  \n\n**特点**：对话简洁友好，聚焦技术交流，AI主动提供结构化建议并引导深入探讨。  \n\n---&#x27;&#125;</span><br></pre></td></tr></table></figure><p>从以上原始对话内容看到，已经有summary的总结记录</p><p>此时由于总结中附带了过往的核心消息，所以我们依然可以进行记忆回顾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">input_message = HumanMessage(content=<span class="string">&quot;我叫什么名字?&quot;</span>)</span><br><span class="line">input_message.pretty_print()</span><br><span class="line"><span class="keyword">for</span> event <span class="keyword">in</span> app.stream(&#123;<span class="string">&quot;messages&quot;</span>: [input_message]&#125;, config, stream_mode=<span class="string">&quot;updates&quot;</span>):</span><br><span class="line">    print_update(event)</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">================================ Human Message =================================</span><br><span class="line"></span><br><span class="line">我叫什么名字?</span><br><span class="line">================================== Ai Message ==================================</span><br><span class="line"></span><br><span class="line">哈哈，你之前说可以叫你「小红」呀～ 😊  </span><br><span class="line">如果你希望换一个名字，随时告诉我！毕竟名字权属于你本人✨</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第三讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>LangGraph介绍</title>
    <link href="https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/1-langgraph-introduce/"/>
    <id>https://jinglv.github.io/2025/09/17/ai/langchain/langgraph/1-langgraph-introduce/</id>
    <published>2025-09-16T16:00:00.000Z</published>
    <updated>2025-09-17T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是智能体"><a href="#什么是智能体" class="headerlink" title="什么是智能体"></a>什么是智能体</h1><p>智能体（AI Agents或Agents）是指能够<strong>自主感知环境、做出决策并执行行动的系统或程序</strong>。根据IBM的定义，智能体是“能够通过设计其工作流和利用可用工具，代表用户或其他系统自主执行任务的系统或程序”[<a href="https://www.ibm.com/cn-zh/think/topics/ai-agents">IBM</a>]。英伟达则将智能体描述为“AI 智能体是先进的 AI 系统，旨在<strong>根据高级目标自主进行推理，制定计划并执行复杂任务</strong>。”，代表了“从简单自动化向能够管理复杂工作流的自主系统过渡”的演进方向[<a href="https://www.nvidia.cn/glossary/ai-agents/">NVIDIA</a>]。</p><p>在更专业的学术定义中，百度百科指出：“智能体是指能够感知环境并自主采取行动以实现特定目标的实体。这一概念最早由“人工智能之父”马文·明斯基提出，他认为某些问题可经由社会中的一些个体经过协商后解决，这些个体就是智能体。”[<a href="https://baike.baidu.com/item/智能体/9446647">百度百科</a>]</p><p>智能体具有以下基本特征：</p><ul><li>自主性(Autonomy)：智能体能够在没有人类或其他实体的直接干预下运行，并对其行动和内部状态具有某种程度的控制。</li><li>反应性(Reactivity)：智能体能够感知其环境，并对环境变化做出实时响应。</li><li>交互性/社交性(Socialability)：智能体能够与其他智能体或人类进行交互和协作。</li><li>适应性/主动性(Proactivity)：智能体能够根据环境变化主动调整其行为策略，适应新的情况。</li><li>学习能力：许多智能体具有通过经验或数据学习和改进的能力。</li></ul><h1 id="单智能体与多智能体"><a href="#单智能体与多智能体" class="headerlink" title="单智能体与多智能体"></a>单智能体与多智能体</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917095828145.png" alt="image-20250917095828145" style="zoom:50%;" /></p><h2 id="LangChain内置"><a href="#LangChain内置" class="headerlink" title="LangChain内置"></a>LangChain内置</h2><p>注意：LangChain内置的Agent模块已经不在支持维护了，智能体开发重点使用LangGraph</p><p>单Agent的特点</p><ul><li>结构简单，只有一个智能体负责所有任务</li><li>决策过程中，不需要协调多个Agent之间的通信</li><li>适合处理相对简单或专一的任务</li><li>通常计算资源需求较少</li><li>响应速度可能更快，因为不需要多Agent间的协调</li></ul><h2 id="LangGraph内置"><a href="#LangGraph内置" class="headerlink" title="LangGraph内置"></a>LangGraph内置</h2><p>多Agents的特点</p><ul><li>系统由多个相互协作的智能体组成</li><li>各Agent可能有不同的专业领域或功能</li><li>需要Agent之间得的通信和协调机制</li><li>可以并行处理多个任务</li><li>系统整体更加复杂但也更加强大</li><li>具有更好的可扩展性和容错能力</li></ul><h1 id="多智能体"><a href="#多智能体" class="headerlink" title="多智能体"></a>多智能体</h1><ul><li>更小颗粒度和更低层面的封装</li><li>更灵活</li><li>难度也更高</li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917100224849.png" alt="image-20250917100224849" style="zoom:50%;" /></p><h1 id="常见的多智能体架构"><a href="#常见的多智能体架构" class="headerlink" title="常见的多智能体架构"></a>常见的多智能体架构</h1><p>多智能体架构中的网状结构、监管者模式、分级架构和自定义模式，并通过类比人类工作方式说明多智能体如何协作完成复杂任务。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917100621793.png" alt="image-20250917100621793" style="zoom:67%;" /></p><ul><li>网状结构：任何一个智能体都可以进行决策</li><li>监督者结构：由主管来决策下一步操作</li><li>监管者架构（工具）：智能体作为工具，接受一个LLM主管的调用</li><li>分级架构：多级架构每级都有一个监管者</li><li>自定义：只有部分智能体具备决策权</li></ul><h1 id="LangGraph介绍"><a href="#LangGraph介绍" class="headerlink" title="LangGraph介绍"></a>LangGraph介绍</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250917101404838.png" alt="image-20250917101404838" style="zoom:50%;" /></p><p>官方地址：<a href="https://langchain-ai.github.io/langgraph">https://langchain-ai.github.io/langgraph</a></p><p><strong>LangGraph</strong> 是一个专注于构建、管理和部署 <strong>有状态（Stateful）</strong>、<strong>长期运行（Long-running）</strong> 的 LLM Agent 编排框架。 </p><ul><li><strong>核心设计思想</strong>：结合状态机模型与现代链式逻辑编排能力。 </li><li><strong>应用场景</strong>：智能代理系统、复杂工作流管理、人机协同任务。 </li><li><strong>行业应用</strong>：被 Klarna、Replit、Elastic 等一线公司广泛采用，逐步成为下一代 Agent 系统的核心底座。</li></ul><h2 id="核心优势"><a href="#核心优势" class="headerlink" title="核心优势"></a>核心优势</h2><p>LangGraph 为长期运行/有状态的工作流提供底层基础设施支持，具备以下特性： </p><div class="table-container"><table><thead><tr><th>优势</th><th>说明</th></tr></thead><tbody><tr><td><strong>持久执行</strong></td><td>支持故障恢复，自动从中断点继续执行。</td></tr><tr><td><strong>人机交互</strong></td><td>允许实时检查/修改代理状态，无缝集成人工监督。</td></tr><tr><td><strong>综合记忆</strong></td><td>短期工作记忆（推理） + 长期持久记忆（跨会话）。</td></tr><tr><td><strong>LangSmith 调试</strong></td><td>通过可视化工具跟踪执行路径、状态转换和运行时指标。</td></tr><tr><td><strong>生产就绪部署</strong></td><td>提供可扩展架构，专为有状态工作流的独特挑战设计。</td></tr></tbody></table></div><h2 id="LangGraph-生态系统"><a href="#LangGraph-生态系统" class="headerlink" title="LangGraph 生态系统"></a>LangGraph 生态系统</h2><p>LangGraph 可独立使用，也可与 LangChain 生态深度集成： </p><div class="table-container"><table><thead><tr><th>组件</th><th>功能</th></tr></thead><tbody><tr><td><strong>LangSmith</strong></td><td>代理评估与可观测性工具，支持生产环境监控和性能优化。</td></tr><tr><td><strong>LangGraph 平台</strong></td><td>专为长期工作流设计的部署平台，支持可视化原型设计（LangGraph Studio）。</td></tr><tr><td><strong>LangChain</strong></td><td>提供可组合的 LLM 开发组件，简化应用构建流程。</td></tr></tbody></table></div><h2 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install langgraph</span><br></pre></td></tr></table></figure><h2 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">st=&gt;start: __start__</span><br><span class="line">st1=&gt;operation: step_1</span><br><span class="line">st2=&gt;operation: step_2</span><br><span class="line">e=&gt;end: step_3</span><br><span class="line">st-&gt;st1-&gt;st2-&gt;e</span><br></pre></td></tr></table></figure><h3 id="State（状态）"><a href="#State（状态）" class="headerlink" title="State（状态）"></a>State（状态）</h3><ul><li>状态是一个在整个图中共享和传递的对象，包含了流程执行过程中所有信息。</li><li>有状态（stateful）：程序具有“记忆”，能记住过去的步骤和结果，并根据这些信息来决定下一步</li><li>可变（mutable）：每个节点都可以修改状态。例如，一个节点可能会将LLM的回复写入状态中，而下一个节点则会读取这个回复并根据它来做决策</li></ul><h3 id="Node（节点）"><a href="#Node（节点）" class="headerlink" title="Node（节点）"></a>Node（节点）</h3><ul><li>节点是图中的基本单元，代表一个具体的功能或操作，视作流程中的一个步骤</li><li>每个节点负责完成一项特定任务（如查询数据、生成文本、做决策等）</li><li>节点接受输入，处理后产生输出</li><li>可以是简单的函数、API调用、LLM调用或其他复杂操作</li></ul><h3 id="Edges（边）"><a href="#Edges（边）" class="headerlink" title="Edges（边）"></a>Edges（边）</h3><ul><li>边决定了流程如何从一个节点移动到另一个节点。</li><li>LangGraph支持两种主要类型的边：<ul><li>Normal Edges（普通边）：简单的将流程从节点A -&gt; B</li><li>Conditional Edges（条件边）：根据当前状态的内容来决定下一步执行哪个节点，是根据LLM的回复或工具的结果动态的做出决策</li></ul></li></ul><h3 id="Graph（图）"><a href="#Graph（图）" class="headerlink" title="Graph（图）"></a>Graph（图）</h3><ul><li>图是节点及其连接关系的集合，代表整个工作流程</li><li>定义了信息如何从一个节点流向另一个节点</li><li>可以是线性的（A -&gt; B -&gt; C）或包含分支、循环复杂结构</li><li>控制整个应用的执行流程和逻辑</li></ul>]]></content>
    
    
    <summary type="html">学习LangGraph学习笔记第一讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangGraph" scheme="https://jinglv.github.io/tags/LangGraph/"/>
    
  </entry>
  
  <entry>
    <title>MCP模型上下文协议介绍</title>
    <link href="https://jinglv.github.io/2025/09/16/ai/langchain/11-langchain-agent-mcp/"/>
    <id>https://jinglv.github.io/2025/09/16/ai/langchain/11-langchain-agent-mcp/</id>
    <published>2025-09-15T16:00:00.000Z</published>
    <updated>2025-09-16T07:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是MCP"><a href="#什么是MCP" class="headerlink" title="什么是MCP"></a>什么是MCP</h1><p><strong>大模型和外部工具交互的标准化协议</strong></p><p><strong>模型上下文协议(MCP ModelContextProtocol)正迅速成为AI领域的核心基础设施标准，它通过标准化大语言模型与外部工具的交互方式，解决了AI应用开发中的关键瓶颈，推动了智能体从实验室走向商业化的进程</strong>。这一由Anthropic于2024年11月开源的协议，已被OpenAI、阿里云、腾讯、字节跳动等全球科技巨头广泛采纳，形成了一场静默的AI革命。MCP的流行不仅源于其技术创新，更在于它满足了AI产业从单体智能向互联网络转变的迫切需求，为AI应用的规模化落地提供了关键支撑。</p><p>可以将 MCP 想象成用于 AI 应用程序的 USB-C 端口。正如 USB-C 提供了一种将设备连接到各种外围设备和配件的标准化方式一样，MCP 也提供了一种将 AI 模型连接到不同数据源和工具的标准化方式。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/1748010742017-0e6ed1d9-b0c5-439a-94fc-a725bf009f2d.png" alt="image.png" style="zoom:40%;" /></p><h1 id="MCP原理"><a href="#MCP原理" class="headerlink" title="MCP原理"></a>MCP原理</h1><h2 id="MCP的核心原理"><a href="#MCP的核心原理" class="headerlink" title="MCP的核心原理"></a>MCP的核心原理</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/1748010605284-114cf209-b913-41dd-9613-626138c3796a.png" alt="image.png" style="zoom:60%;" /></p><h2 id="MCP服务应用"><a href="#MCP服务应用" class="headerlink" title="MCP服务应用"></a>MCP服务应用</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/1748010776601-c0d4944f-ea0d-4e0c-a5f3-a1a1bc7167e8.png" alt="image.png" style="zoom:50%;" /></p><p>MCP 的核心原理是将互联网服务（高德、谷歌）或本地操作系统 API（文件系统、数据库、终端）封装成 <strong>AI 智能体能够理解和使用的 Tools 工具</strong>，让 AI 智能体能够自由地调用这些 Tools 工具实现复杂的业务逻辑和功能。</p><p>我们可以在ModelScope市面上的一些各个方面的MCP服务，地址：<a href="https://modelscope.cn/mcp">https://modelscope.cn/mcp</a></p><h1 id="MCP的优势"><a href="#MCP的优势" class="headerlink" title="MCP的优势"></a>MCP的优势</h1><p><strong>解决了智能体开发过程中的关键效率问题</strong></p><p>MCP之所以迅速火爆，首先在于它解决了AI应用开发中的<strong>关键痛点</strong>。传统模式下，大模型与外部工具的集成需要为每个工具单独开发接口，形成了”<strong>M个智能体×N个工具</strong>“的复杂度。</p><p><strong>MCP通过标准化交互规则，将复杂的”M×N”集成简化为”M+N”模式，使开发者只需遵循协议标准，就能实现AI模型与各类工具的即插即用</strong>。这种标准化不仅降低了开发门槛，还提高了系统的可扩展性和互操作性。</p><h1 id="基于MCP的智能体架构"><a href="#基于MCP的智能体架构" class="headerlink" title="基于MCP的智能体架构"></a>基于MCP的智能体架构</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">    A[智能体] --&gt; B[大模型]</span><br><span class="line">    A --&gt; C[工具]</span><br><span class="line">    C --&gt; D[本地工具 Function]</span><br><span class="line">    C --&gt; E[远程工具 MCP]</span><br><span class="line">    E --&gt; F[远程MCP Server]</span><br><span class="line">    E --&gt; G[本地MCP Server]</span><br></pre></td></tr></table></figure><h1 id="MCP服务接入示例"><a href="#MCP服务接入示例" class="headerlink" title="MCP服务接入示例"></a>MCP服务接入示例</h1><h2 id="高德MCP服务接入与智能体"><a href="#高德MCP服务接入与智能体" class="headerlink" title="高德MCP服务接入与智能体"></a>高德MCP服务接入与智能体</h2><p>高德MCP服务介绍，官方地址：<a href="https://lbs.amap.com/api/mcp-server/summary">https://lbs.amap.com/api/mcp-server/summary</a></p><h3 id="第一步：MCP客户端开发"><a href="#第一步：MCP客户端开发" class="headerlink" title="第一步：MCP客户端开发"></a>第一步：MCP客户端开发</h3><ol><li><p>安装依赖：<code>pip install langchain_mcp_adapters</code></p></li><li><p>获取高德应用key: <a href="https://lbs.amap.com/api/mcp-server/create-project-and-key">https://lbs.amap.com/api/mcp-server/create-project-and-key</a></p></li><li><p>开发高德mcp客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 15:40</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_amap_mcp_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    amap_key = os.environ.get(<span class="string">&quot;AMAP_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;amap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">f&quot;https://mcp.amap.com/sse?key=<span class="subst">&#123;amap_key&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client, tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client, tools = asyncio.run(create_amap_mcp_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看是否创建完成客户端------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(client)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看提供的工具有哪些------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="第二步：创建智能体，集成MCP工具"><a href="#第二步：创建智能体，集成MCP工具" class="headerlink" title="第二步：创建智能体，集成MCP工具"></a>第二步：创建智能体，集成MCP工具</h3><ol><li>获取mcp tools</li><li>创建智能体</li><li>创建提示词</li><li>异步运行智能体</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_amap_mcp_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    amap_key = os.environ.get(<span class="string">&quot;AMAP_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;amap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">f&quot;https://mcp.amap.com/sse?key=<span class="subst">&#123;amap_key&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client, tools</span><br><span class="line">  </span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_run_agent</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建智能体，集成MCP工具&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1.获取mcp tools</span></span><br><span class="line">    client, tools = <span class="keyword">await</span> create_amap_mcp_client()</span><br><span class="line">    <span class="comment"># 2.创建智能体</span></span><br><span class="line">    qv_llm = ChatOpenAI(</span><br><span class="line">        model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">        base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">        api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">        streaming=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,  <span class="comment"># 打开调试模式</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 3.创建提示词</span></span><br><span class="line">    prompt_template = PromptTemplate.from_template(</span><br><span class="line">        <span class="string">&quot;你是一个智能助手，可以调用高德 MCP 工具。\n\n问题: &#123;input&#125;&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    prompt = prompt_template.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;提供北京南站的坐标&quot;</span>)</span><br><span class="line">    <span class="comment"># 4.异步运行智能体</span></span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="基于高德MCP的复杂路径规划-可视化展示"><a href="#基于高德MCP的复杂路径规划-可视化展示" class="headerlink" title="基于高德MCP的复杂路径规划+可视化展示"></a>基于高德MCP的复杂路径规划+可视化展示</h2><p>增加文件工具及扩展智能体工具，文件工具需要安装依赖:<code>pip install langchain_community</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_amap_mcp_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    amap_key = os.environ.get(<span class="string">&quot;AMAP_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;amap&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">f&quot;https://mcp.amap.com/sse?key=<span class="subst">&#123;amap_key&#125;</span>&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client, tools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"><span class="keyword">from</span> langchain_community.agent_toolkits <span class="keyword">import</span> FileManagementToolkit</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain.prompts <span class="keyword">import</span> PromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_run_agent</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建智能体，集成MCP工具&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 1.获取mcp tools</span></span><br><span class="line">    client, tools = <span class="keyword">await</span> create_amap_mcp_client()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 增加获取文件工具</span></span><br><span class="line">    file_toolkit = FileManagementToolkit(root_dir=<span class="string">&quot;/Users/jinglv/PycharmProjects/ai-agent-dev/temp&quot;</span>)</span><br><span class="line">    file_tools = file_toolkit.get_tools()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2.创建智能体</span></span><br><span class="line">    qv_llm = ChatOpenAI(</span><br><span class="line">        model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">        base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">        api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">        streaming=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools + file_tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,  <span class="comment"># 打开调试模式</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 3.创建提示词</span></span><br><span class="line">    prompt_template = PromptTemplate.from_template(</span><br><span class="line">        <span class="string">&quot;你是一个智能助手，可以调用高德 MCP 工具。\n\n问题: &#123;input&#125;&quot;</span></span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    prompt = prompt_template.<span class="built_in">format</span>(<span class="built_in">input</span>=<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    目标：</span></span><br><span class="line"><span class="string">    - 明天上午10点我要从北京南站到北京望京SOHO</span></span><br><span class="line"><span class="string">    - 线路选择：公路地址或打车</span></span><br><span class="line"><span class="string">    - 考虑出行时间和路线，以及天气状况和穿衣建议</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    要求:</span></span><br><span class="line"><span class="string">    - 制作网页来展示出现线路和位置，输出一个HTML页面，将网页保存到：/Users/jinglv/PycharmProjects/ai-agent-dev/temp目录下</span></span><br><span class="line"><span class="string">    - 网页使用简约美观的页面风格，以及卡片展示</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span>)</span><br><span class="line">    <span class="comment"># 4.异步运行智能体</span></span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(prompt)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    client, tools = asyncio.run(create_amap_mcp_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看是否创建完成客户端------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(client)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------查看提供的工具有哪些------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line">    res = asyncio.run(create_run_agent())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;-------------------------------智能体结合MCP客户端执行结果------------------------&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangChain学习笔记第十一讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/tags/LangChain/"/>
    
  </entry>
  
  <entry>
    <title>MCP通信方式</title>
    <link href="https://jinglv.github.io/2025/09/16/ai/langchain/12-langchain-agent-mcp-protocol/"/>
    <id>https://jinglv.github.io/2025/09/16/ai/langchain/12-langchain-agent-mcp-protocol/</id>
    <published>2025-09-15T16:00:00.000Z</published>
    <updated>2025-09-16T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三种MCP通讯方式"><a href="#三种MCP通讯方式" class="headerlink" title="三种MCP通讯方式"></a>三种MCP通讯方式</h1><p>MCP（Model Context Protocol）协议目前支持<strong>三种主要通信方式</strong>，分别是：</p><h2 id="stdio（标准输入输出）"><a href="#stdio（标准输入输出）" class="headerlink" title="stdio（标准输入输出）"></a><code>stdio</code>（标准输入输出）</h2><ul><li><p>工作原理：</p><p>通过本地进程的标准输入（stdin）和标准输出（stdout）进行通信。客户端以子进程的形式启动MCP服务器，双方通过管道交换JSON-RPC格式的消息，消息以换行符分隔。</p></li><li><p>适用场景：</p><ul><li>本地进程间通信（如命令行工具、文件系统操作）。</li><li>简单的批处理任务或工具调用。</li></ul></li><li><p>优点：</p><ul><li>实现简单，低延迟。</li><li>无需网络配置，适合本地开发。</li></ul></li><li><p>限制：</p><ul><li>仅限本地使用，不支持分布式部署。</li><li>服务端不能输出控制台日志（会污染协议流）。</li></ul></li></ul><h2 id="SSE（Server-Sent-Events）"><a href="#SSE（Server-Sent-Events）" class="headerlink" title="SSE（Server-Sent Events）"></a><code>SSE</code>（Server-Sent Events）</h2><ul><li><p>工作原理：</p><p>基于HTTP长连接实现服务器到客户端的单向消息推送。客户端通过<code>GET /sse</code>建立长连接，服务器通过SSE流发送JSON-RPC消息；客户端通过<code>POST /message</code>发送请求或响应。</p></li><li><p>适用场景：</p><ul><li>远程服务调用（如云服务、多客户端监控）。</li><li>需要实时数据推送的场景（如对话式AI的流式输出）。</li></ul></li><li>优点：<ul><li>支持实时单向推送，适合流式交互。</li></ul></li><li>限制：<ul><li><strong>已逐步被弃用</strong>（2025年3月后被Streamable HTTP取代）。</li><li>连接中断后无法恢复，需重新建立。</li><li>服务器需维持长连接，资源消耗较高。</li></ul></li></ul><h2 id="Streamable-HTTP（流式HTTP）"><a href="#Streamable-HTTP（流式HTTP）" class="headerlink" title="Streamable HTTP（流式HTTP）"></a><code>Streamable HTTP</code>（流式HTTP）</h2><ul><li><p>工作原理：</p><p>2025年3月引入的新传输方式，替代了SSE。通过统一的/message端点实现双向通信，支持以下特性：</p><ul><li>客户端通过HTTP POST发送请求（如工具调用）。</li><li>服务器可将响应升级为SSE流式传输（当需要时）。</li><li>支持无状态模式（Stateless Server），无需维持长连接。</li></ul></li><li><p>适用场景：</p><ul><li>高并发远程服务调用。</li><li>需要灵活流式响应的场景（如AI助手的动态输出）。</li></ul></li><li><p>优点：</p><ul><li>解决SSE的缺陷：<ul><li>支持连接恢复（无需重新开始）。</li><li>无需服务器维持长连接，降低资源压力。</li><li>统一端点（/message），简化接口设计。</li></ul></li><li>兼容基础设施（如中间件、负载均衡）。</li></ul></li><li><p>推荐使用：</p><p>当前MCP官方推荐的传输方式，尤其适合生产环境和云服务。</p></li></ul><h1 id="实现基于stdio的mcp服务"><a href="#实现基于stdio的mcp服务" class="headerlink" title="实现基于stdio的mcp服务"></a>实现基于stdio的mcp服务</h1><p>stdio模式mcp服务架构：</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250916171800738.png" alt="image-20250916171800738" style="zoom:50%;" /></p><h2 id="第一步：创建mcp-server（包含工具能力）"><a href="#第一步：创建mcp-server（包含工具能力）" class="headerlink" title="第一步：创建mcp server（包含工具能力）"></a>第一步：创建mcp server（包含工具能力）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 17:19</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Match Tools&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Multiply two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mcp.run(transport=<span class="string">&quot;stdio&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上代码包含两部分内容：</p><ol><li>使用<code>@mcp.tool()</code>装饰器注册的 mcp 工具方法；</li><li>使用 <code>mcp.run(transport=&quot;stdio&quot;)</code>启动 stdio mcp 服务。</li></ol><h2 id="第二步：启动mcp-server"><a href="#第二步：启动mcp-server" class="headerlink" title="第二步：启动mcp server"></a>第二步：启动mcp server</h2><p>找到 mcp server 所在文件夹，使用 python 命令启动服务（相当于启动了对 IO 流中 read 和 write 事件的监听）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(.venv) jinglv@localhost ai-agent-dev % python demo/mcp/stdio/mcp_stdio_server.py</span><br></pre></td></tr></table></figure><p>启动后，一直处于监听状态</p><h2 id="第三步：开发mcp-client（包含智能体）"><a href="#第三步：开发mcp-client（包含智能体）" class="headerlink" title="第三步：开发mcp client（包含智能体）"></a>第三步：开发mcp client（包含智能体）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 17:25</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.tools <span class="keyword">import</span> load_mcp_tools</span><br><span class="line"><span class="keyword">from</span> mcp <span class="keyword">import</span> StdioServerParameters, ClientSession</span><br><span class="line"><span class="keyword">from</span> mcp.client.stdio <span class="keyword">import</span> stdio_client</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">qv_llm = ChatOpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_mcp_stdio_client</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;创建MCP客户端&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 定义stdio server参数</span></span><br><span class="line">    server_params = StdioServerParameters(</span><br><span class="line">        command=<span class="string">&quot;python&quot;</span>,</span><br><span class="line">        args=[<span class="string">&quot;/Users/jinglv/PycharmProjects/ai-agent-dev/demo/mcp/stdio/mcp_stdio_server.py&quot;</span>],</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取 stdio mcp tools</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">with</span> stdio_client(server_params) <span class="keyword">as</span> (read, write):</span><br><span class="line">        <span class="comment"># 设置会话，并初始化</span></span><br><span class="line">        <span class="keyword">async</span> <span class="keyword">with</span> ClientSession(read, write) <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">await</span> session.initialize()</span><br><span class="line">            tools = <span class="keyword">await</span> load_mcp_tools(session)</span><br><span class="line">            <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 定义智能体，加载 mcp tools</span></span><br><span class="line">            agent = initialize_agent(</span><br><span class="line">                tools=tools,</span><br><span class="line">                llm=qv_llm,</span><br><span class="line">                agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">                verbose=<span class="literal">True</span>,</span><br><span class="line">            )</span><br><span class="line">            res = <span class="keyword">await</span> agent.ainvoke(<span class="string">&quot;100+100=?&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = asyncio.run(create_mcp_stdio_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行结果：<span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：stdio方式是可以不启动mcp server的，在客户端定义stdio server参数会加载进去的</p><h1 id="实现基于sse的mcp服务"><a href="#实现基于sse的mcp服务" class="headerlink" title="实现基于sse的mcp服务"></a>实现基于sse的mcp服务</h1><p>注意：sse已被官方废弃，优先使用streamable-http，两者从代码层面来看，差异不大</p><p>sse/streamable-http模式mcp服务架构：</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250916184135754.png" alt="image-20250916184135754" style="zoom:50%;" /></p><h2 id="第一步：创建mcp-server端"><a href="#第一步：创建mcp-server端" class="headerlink" title="第一步：创建mcp server端"></a>第一步：创建mcp server端</h2><p>与stdio的区别，是将MCP启动修改为sse：transport=”stdio”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:43</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Match Tools&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Multiply two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mcp.run(transport=<span class="string">&quot;sse&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第二步：启动mcp-server-1"><a href="#第二步：启动mcp-server-1" class="headerlink" title="第二步：启动mcp server"></a>第二步：启动mcp server</h2><p>注意：这个是基于网络协议的，需要启动服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(.venv) jinglv@localhost ai-agent-dev % python demo/mcp/sse/mcp_sse_server.py </span><br></pre></td></tr></table></figure><p>启动服务会暴露一个端口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">INFO:     Started server process [36603]</span><br><span class="line">INFO:     Waiting <span class="keyword">for</span> application startup.</span><br><span class="line">INFO:     Application startup complete.</span><br><span class="line">INFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="第三步：开发mcp-client（包含智能体）-1"><a href="#第三步：开发mcp-client（包含智能体）-1" class="headerlink" title="第三步：开发mcp client（包含智能体）"></a>第三步：开发mcp client（包含智能体）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:45</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">qv_llm = ChatOpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_mcp_sse_client</span>():</span><br><span class="line">    <span class="comment"># 创建MCP客户端</span></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;mcp&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/sse&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;sse&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(<span class="string">&quot;100+100=?&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = asyncio.run(create_mcp_sse_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行结果：<span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="实现基于streamable-http的mcp服务"><a href="#实现基于streamable-http的mcp服务" class="headerlink" title="实现基于streamable_http的mcp服务"></a>实现基于streamable_http的mcp服务</h1><p>注意：sse已被官方废弃，优先使用streamable-http，两者从代码层面来看，差异不大，和sse的区别也只是服务启动方式和创建客户端方式有差异其他基本一致</p><h2 id="mcp-server端"><a href="#mcp-server端" class="headerlink" title="mcp server端"></a>mcp server端</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:54</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> mcp.server.fastmcp <span class="keyword">import</span> FastMCP</span><br><span class="line"></span><br><span class="line">mcp = FastMCP(<span class="string">&quot;Match Tools&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Add two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@mcp.tool()</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">multiply</span>(<span class="params">a: <span class="built_in">int</span>, b: <span class="built_in">int</span></span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Multiply two numbers&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> a * b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    mcp.run(transport=<span class="string">&quot;streamable-http&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mcp-client端（包含智能体）"><a href="#mcp-client端（包含智能体）" class="headerlink" title="mcp client端（包含智能体）"></a>mcp client端（包含智能体）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/16 18:54</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain.agents <span class="keyword">import</span> initialize_agent, AgentType</span><br><span class="line"><span class="keyword">from</span> langchain_mcp_adapters.client <span class="keyword">import</span> MultiServerMCPClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载 .env 文件中的变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">qv_llm = ChatOpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;LLM_MODEL&quot;</span>),</span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;LLM_BASE_URL&quot;</span>),</span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;LLM_API_KEY&quot;</span>),</span><br><span class="line">    streaming=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">def</span> <span class="title function_">create_mcp_streamable_http_client</span>():</span><br><span class="line">    <span class="comment"># 创建MCP客户端</span></span><br><span class="line">    client = MultiServerMCPClient(&#123;</span><br><span class="line">        <span class="string">&quot;mcp&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;url&quot;</span>: <span class="string">&quot;http://127.0.0.1:8000/mcp&quot;</span>,</span><br><span class="line">            <span class="string">&quot;transport&quot;</span>: <span class="string">&quot;streamable_http&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    tools = <span class="keyword">await</span> client.get_tools()</span><br><span class="line">    <span class="built_in">print</span>(tools)</span><br><span class="line"></span><br><span class="line">    agent = initialize_agent(</span><br><span class="line">        tools=tools,</span><br><span class="line">        llm=qv_llm,</span><br><span class="line">        agent=AgentType.STRUCTURED_CHAT_ZERO_SHOT_REACT_DESCRIPTION,</span><br><span class="line">        verbose=<span class="literal">True</span>,</span><br><span class="line">    )</span><br><span class="line">    res = <span class="keyword">await</span> agent.ainvoke(<span class="string">&quot;100+100=?&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    res = asyncio.run(create_mcp_streamable_http_client())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;执行结果：<span class="subst">&#123;res&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">学习LangChain学习笔记第十二讲</summary>
    
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/categories/LangChain/"/>
    
    
    <category term="LangChain" scheme="https://jinglv.github.io/tags/LangChain/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库检索（搜索）、度量类型和条件过滤</title>
    <link href="https://jinglv.github.io/2025/09/02/ai/rag/23-vector-db-action/"/>
    <id>https://jinglv.github.io/2025/09/02/ai/rag/23-vector-db-action/</id>
    <published>2025-09-01T16:00:00.000Z</published>
    <updated>2025-09-02T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Milvus混合检索实战"><a href="#Milvus混合检索实战" class="headerlink" title="Milvus混合检索实战"></a>Milvus混合检索实战</h1><h2 id="稠密向量"><a href="#稠密向量" class="headerlink" title="稠密向量"></a>稠密向量</h2><p>稠密向量通常表示为<strong>具有固定长度的浮点数数组</strong>，例如[0.2, 0.7, 0.1, 0.8, 0.3, …, 0.5]。这些向量的维数通常在数百到数千之间，例如 128、256、768 或 1024。每个维度都捕获对象的特定语义特征，使其通过相似度计算适用于各种场景。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090321879.png" alt="image-20250902090321879" style="zoom:50%;" /></p><ul><li>定义：由固定长度的浮点数数组表示，如﻿$[0.2,0.7,0.1,0.8,0.3,…,0.5]$﻿</li><li>维度范围：通常在数百到数千之间（如128/256/768/1024维）</li><li>特性：每个维度捕获对象的特定语义特征，通过相似度计算适用于多种场景</li><li>语义表示：坐标值表示语义维度强度，点间距反映语义相似度（越近越相似）</li></ul><h2 id="稀疏向量"><a href="#稀疏向量" class="headerlink" title="稀疏向量"></a>稀疏向量</h2><p>稀疏向量的特点是<strong>向量维数高且非零值较少</strong>。这种结构使其特别适合传统的信息检索应用。在大多数情况下，稀疏向量中使用的维度数对应于一种或多种语言中的不同标记。每个维度都被赋予一个值，该值指示该标记在文档中的相对重要性。这种布局对于涉及文本匹配的任务非常有利。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090518281.png" alt="image-20250902090518281" style="zoom:80%;" /></p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090551605.png" alt="image-20250902090551605" style="zoom:67%;" /></p><ul><li>特点：维度数高但非零值少，传统信息检索中常用</li><li>表示方式：<ul><li>早期：二进制表示（0/1）</li><li>现代：通过机器学习习得的实数值（如﻿$\{2:0.2,…,9997:0.5,9999:0.7\}$﻿）</li></ul></li><li>适用场景：文本匹配任务，维度对应语言中的不同标记，值表示标记在文档中的相对重要性</li></ul><h2 id="混合检索"><a href="#混合检索" class="headerlink" title="混合检索"></a>混合检索</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902090904917.png" alt="image-20250902090904917" style="zoom:67%;" /></p><p>工作流程：</p><ol><li>通过嵌入模型（如BERT和Transformers）生成密集向量。</li><li>通过BM25、BGE-M3、SPLADE等嵌入模型生成稀疏向量。（可以使用 Function生成稀疏向量）</li><li>创建一个集合并定义包含密集和稀疏矢量场的集合模式。</li><li>将稀疏密集向量插入到上一步刚刚创建的集合中。</li><li>进行混合搜索：对密集向量进行 ANN 搜索将返回一组前 K 个最相似的结果，对稀疏向量进行文本匹配也将返回一组前 K 个结果。</li><li>归一化：将两组top-K结果的得分进行归一化，将得分转换到[0,1]之间的范围。</li><li>选择合适的<strong>重排序</strong>策略，对两组top-K结果进行合并、重排序，最终返回一组top-K结果。</li></ol><p>重排序</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902091114481.png" alt="image-20250902091114481" style="zoom:67%;" /></p><p>优势：同时保留密集向量的语义相似度和稀疏向量的关键字查询优势</p><h2 id="实战代码（说明）"><a href="#实战代码（说明）" class="headerlink" title="实战代码（说明）"></a>实战代码（说明）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/2 09:15</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> (</span><br><span class="line">    connections,</span><br><span class="line">    utility,</span><br><span class="line">    FieldSchema,</span><br><span class="line">    CollectionSchema,</span><br><span class="line">    DataType,</span><br><span class="line">    Collection,</span><br><span class="line">    AnnSearchRequest,</span><br><span class="line">    WeightedRanker</span><br><span class="line">)</span><br><span class="line"><span class="keyword">from</span> pymilvus.exceptions <span class="keyword">import</span> MilvusException</span><br><span class="line"><span class="keyword">from</span> pymilvus.model.hybrid <span class="keyword">import</span> BGEM3EmbeddingFunction  <span class="comment"># pip install &quot;pymilvus[model]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0. 配置 (方便修改)</span></span><br><span class="line">DATA_PATH = <span class="string">&quot;../../../data/灭神纪/战斗场景.json&quot;</span></span><br><span class="line">COLLECTION_NAME = <span class="string">&quot;wukong_hybrid_v4&quot;</span>  <span class="comment"># 使用新的集合名以避免旧数据冲突</span></span><br><span class="line">MILVUS_URI = <span class="string">&quot;http://82.157.193.65:19530&quot;</span>  <span class="comment"># 使用新的数据库文件</span></span><br><span class="line">BATCH_SIZE = <span class="number">50</span>  <span class="comment"># 可以尝试减小批次大小，例如 10 或 20，进行测试</span></span><br><span class="line">DEVICE = <span class="string">&quot;cpu&quot;</span>  <span class="comment"># 或者 &quot;cuda&quot; 如果有GPU并已正确配置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;脚本开始执行...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 加载数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;1. 正在从 <span class="subst">&#123;DATA_PATH&#125;</span> 加载数据...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(DATA_PATH, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        dataset = json.load(f)</span><br><span class="line"><span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误: 数据文件 <span class="subst">&#123;DATA_PATH&#125;</span> 未找到。请检查路径。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">except</span> json.JSONDecodeError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误: 数据文件 <span class="subst">&#123;DATA_PATH&#125;</span> JSON 格式错误。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line">docs = []</span><br><span class="line">metadata = []</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> dataset.get(<span class="string">&#x27;data&#x27;</span>, []):  <span class="comment"># 使用 .get 避免 &#x27;data&#x27; 键不存在的错误</span></span><br><span class="line">    text_parts = [item.get(<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;&#x27;</span>), item.get(<span class="string">&#x27;description&#x27;</span>, <span class="string">&#x27;&#x27;</span>)]</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;combat_details&#x27;</span> <span class="keyword">in</span> item <span class="keyword">and</span> <span class="built_in">isinstance</span>(item[<span class="string">&#x27;combat_details&#x27;</span>], <span class="built_in">dict</span>):</span><br><span class="line">        text_parts.extend(item[<span class="string">&#x27;combat_details&#x27;</span>].get(<span class="string">&#x27;combat_style&#x27;</span>, []))</span><br><span class="line">        text_parts.extend(item[<span class="string">&#x27;combat_details&#x27;</span>].get(<span class="string">&#x27;abilities_used&#x27;</span>, []))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;scene_info&#x27;</span> <span class="keyword">in</span> item <span class="keyword">and</span> <span class="built_in">isinstance</span>(item[<span class="string">&#x27;scene_info&#x27;</span>], <span class="built_in">dict</span>):</span><br><span class="line">        text_parts.extend([</span><br><span class="line">            item[<span class="string">&#x27;scene_info&#x27;</span>].get(<span class="string">&#x27;location&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            item[<span class="string">&#x27;scene_info&#x27;</span>].get(<span class="string">&#x27;environment&#x27;</span>, <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">            item[<span class="string">&#x27;scene_info&#x27;</span>].get(<span class="string">&#x27;time_of_day&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        ])</span><br><span class="line">    <span class="comment"># 过滤掉 None 和空字符串，然后连接</span></span><br><span class="line">    docs.append(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">filter</span>(<span class="literal">None</span>, [<span class="built_in">str</span>(part).strip() <span class="keyword">for</span> part <span class="keyword">in</span> text_parts <span class="keyword">if</span> part])))</span><br><span class="line">    metadata.append(item)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> docs:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误: 未能从数据文件中加载任何文档。请检查文件内容和结构。&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数据加载完成，共 <span class="subst">&#123;<span class="built_in">len</span>(docs)&#125;</span> 条文档。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 生成向量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2. 正在生成向量...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ef = BGEM3EmbeddingFunction(use_fp16=<span class="literal">False</span>, device=DEVICE)</span><br><span class="line">    docs_to_embed = docs</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;将为 <span class="subst">&#123;<span class="built_in">len</span>(docs_to_embed)&#125;</span> 条文档生成向量...&quot;</span>)</span><br><span class="line">    docs_embeddings = ef(docs_to_embed)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;向量生成完成。&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  密集向量维度: <span class="subst">&#123;ef.dim[<span class="string">&#x27;dense&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;sparse&quot;</span> <span class="keyword">in</span> docs_embeddings <span class="keyword">and</span> docs_embeddings[<span class="string">&quot;sparse&quot;</span>].shape[<span class="number">0</span>] &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  稀疏向量类型 (整体): <span class="subst">&#123;<span class="built_in">type</span>(docs_embeddings[<span class="string">&#x27;sparse&#x27;</span>])&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="comment">#  打印第一个稀疏向量的形状和部分内容以供检查</span></span><br><span class="line">        first_sparse_vector_row_obj = docs_embeddings[<span class="string">&#x27;sparse&#x27;</span>][<span class="number">0</span>]  <span class="comment"># 这会得到一个表示单行的稀疏数组对象</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (行对象类型): <span class="subst">&#123;<span class="built_in">type</span>(first_sparse_vector_row_obj)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (行对象形状): <span class="subst">&#123;first_sparse_vector_row_obj.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj, <span class="string">&#x27;col&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分列索引/col): <span class="subst">&#123;first_sparse_vector_row_obj.col[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分数据/data): <span class="subst">&#123;first_sparse_vector_row_obj.data[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj, <span class="string">&#x27;indices&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(first_sparse_vector_row_obj,</span><br><span class="line">                                                                         <span class="string">&#x27;data&#x27;</span>):  <span class="comment"># Fallback for other types</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分索引/indices): <span class="subst">&#123;first_sparse_vector_row_obj.indices[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  第一个稀疏向量 (部分数据/data): <span class="subst">&#123;first_sparse_vector_row_obj.data[:<span class="number">5</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;  无法直接获取第一个稀疏向量的列索引和数据属性。&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;警告: 未生成稀疏向量或稀疏向量为空。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;生成向量时发生错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 连接Milvus</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;3. 正在连接 Milvus (URI: <span class="subst">&#123;MILVUS_URI&#125;</span>)...&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    connections.connect(uri=MILVUS_URI)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;成功连接到 Milvus。&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;连接 Milvus 失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 创建集合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;4. 正在准备集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">fields = [</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;pk&quot;</span>, dtype=DataType.VARCHAR, is_primary=<span class="literal">True</span>, auto_id=<span class="literal">True</span>, max_length=<span class="number">100</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;text&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">65535</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;id&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">100</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;title&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">512</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;category&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">128</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;location&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">256</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;environment&quot;</span>, dtype=DataType.VARCHAR, max_length=<span class="number">128</span>),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;sparse_vector&quot;</span>, dtype=DataType.SPARSE_FLOAT_VECTOR),</span><br><span class="line">    FieldSchema(name=<span class="string">&quot;dense_vector&quot;</span>, dtype=DataType.FLOAT_VECTOR, dim=ef.dim[<span class="string">&quot;dense&quot;</span>])</span><br><span class="line">]</span><br><span class="line">schema = CollectionSchema(fields, description=<span class="string">&quot;Wukong Hybrid Search Collection v4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">if</span> utility.has_collection(COLLECTION_NAME):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 已存在，正在删除...&quot;</span>)</span><br><span class="line">        utility.drop_collection(COLLECTION_NAME)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 删除成功。&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在创建集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">    collection = Collection(name=COLLECTION_NAME, schema=schema, consistency_level=<span class="string">&quot;Strong&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 创建成功。&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在为 sparse_vector 创建索引 (SPARSE_INVERTED_INDEX, IP)...&quot;</span>)</span><br><span class="line">    collection.create_index(<span class="string">&quot;sparse_vector&quot;</span>, &#123;<span class="string">&quot;index_type&quot;</span>: <span class="string">&quot;SPARSE_INVERTED_INDEX&quot;</span>, <span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;sparse_vector 索引创建成功。&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在为 dense_vector 创建索引 (AUTOINDEX, IP)...&quot;</span>)</span><br><span class="line">    collection.create_index(<span class="string">&quot;dense_vector&quot;</span>, &#123;<span class="string">&quot;index_type&quot;</span>: <span class="string">&quot;AUTOINDEX&quot;</span>, <span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>&#125;)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;dense_vector 索引创建成功。&quot;</span>)</span><br><span class="line">    time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在加载集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27;...&quot;</span>)</span><br><span class="line">    collection.load()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;集合 &#x27;<span class="subst">&#123;COLLECTION_NAME&#125;</span>&#x27; 加载成功。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;创建或加载集合/索引时发生 Milvus 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;创建或加载集合/索引时发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 插入数据</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;5. 正在准备插入数据...&quot;</span>)</span><br><span class="line">num_docs_to_insert = <span class="built_in">len</span>(docs_to_embed)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, num_docs_to_insert, BATCH_SIZE):</span><br><span class="line">        end_idx = <span class="built_in">min</span>(i + BATCH_SIZE, num_docs_to_insert)</span><br><span class="line">        batch_data = []</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  正在准备批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> (索引 <span class="subst">&#123;i&#125;</span> 到 <span class="subst">&#123;end_idx - <span class="number">1</span>&#125;</span>)...&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i, end_idx):</span><br><span class="line">            item_metadata = metadata[j]</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 关键：转换稀疏向量格式</span></span><br><span class="line">            <span class="comment"># 当从 csr_array 索引一行时，可能得到 coo_array 或其他稀疏格式</span></span><br><span class="line">            sparse_row_obj = docs_embeddings[<span class="string">&quot;sparse&quot;</span>][j]</span><br><span class="line">            <span class="comment"># coo_array 使用 .col 和 .data</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;col&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">                milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx_col): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx_col, val <span class="keyword">in</span></span><br><span class="line">                                        <span class="built_in">zip</span>(sparse_row_obj.col, sparse_row_obj.data)&#125;</span><br><span class="line">            <span class="comment"># csr_array (如果直接是行 csr_array) 使用 .indices 和 .data</span></span><br><span class="line">            <span class="keyword">elif</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;indices&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">                milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx_col): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx_col, val <span class="keyword">in</span></span><br><span class="line">                                        <span class="built_in">zip</span>(sparse_row_obj.indices, sparse_row_obj.data)&#125;</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;警告: 无法识别的稀疏行对象类型 <span class="subst">&#123;<span class="built_in">type</span>(sparse_row_obj)&#125;</span> 在索引 <span class="subst">&#123;j&#125;</span>。跳过此条。&quot;</span>)</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 或者引发错误</span></span><br><span class="line"></span><br><span class="line">            doc_text = docs_to_embed[j]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(doc_text) &gt; <span class="number">65530</span>:</span><br><span class="line">                doc_text = doc_text[:<span class="number">65530</span>]</span><br><span class="line"></span><br><span class="line">            title_text = item_metadata.get(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;N/A&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(title_text) &gt; <span class="number">500</span>:</span><br><span class="line">                title_text = title_text[:<span class="number">500</span>]</span><br><span class="line"></span><br><span class="line">            batch_data.append(&#123;</span><br><span class="line">                <span class="string">&quot;text&quot;</span>: doc_text,</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: <span class="built_in">str</span>(item_metadata.get(<span class="string">&quot;id&quot;</span>, <span class="string">f&quot;unknown_id_<span class="subst">&#123;j&#125;</span>&quot;</span>)),</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: title_text,</span><br><span class="line">                <span class="string">&quot;category&quot;</span>: item_metadata.get(<span class="string">&quot;category&quot;</span>, <span class="string">&quot;N/A&quot;</span>),</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: item_metadata.get(<span class="string">&quot;scene_info&quot;</span>, &#123;&#125;).get(<span class="string">&quot;location&quot;</span>, <span class="string">&quot;N/A&quot;</span>),</span><br><span class="line">                <span class="string">&quot;environment&quot;</span>: item_metadata.get(<span class="string">&quot;scene_info&quot;</span>, &#123;&#125;).get(<span class="string">&quot;environment&quot;</span>, <span class="string">&quot;N/A&quot;</span>),</span><br><span class="line">                <span class="string">&quot;sparse_vector&quot;</span>: milvus_sparse_vector,</span><br><span class="line">                <span class="string">&quot;dense_vector&quot;</span>: docs_embeddings[<span class="string">&quot;dense&quot;</span>][j].tolist()</span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> batch_data:  <span class="comment"># 如果批次中所有稀疏向量都无法处理</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> 为空，跳过插入。&quot;</span>)</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  正在插入批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> (<span class="subst">&#123;<span class="built_in">len</span>(batch_data)&#125;</span> 条记录)...&quot;</span>)</span><br><span class="line">        insert_result = collection.insert(batch_data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> 插入成功, 主键: <span class="subst">&#123;insert_result.primary_keys[:<span class="number">5</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">        collection.flush()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  批次 <span class="subst">&#123;i // BATCH_SIZE + <span class="number">1</span>&#125;</span> flush 完成。&quot;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;所有数据插入完成。总共 <span class="subst">&#123;collection.num_entities&#125;</span> 条实体。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;插入数据时发生 Milvus 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;batch_data&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> batch_data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;问题批次的第一条数据（部分）:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Text: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;text&#x27;</span>][:<span class="number">100</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  ID: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;id&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Title: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;title&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;插入数据时发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;batch_data&#x27;</span> <span class="keyword">in</span> <span class="built_in">locals</span>() <span class="keyword">and</span> batch_data:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;问题批次的第一条数据（部分）:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  Text: <span class="subst">&#123;batch_data[<span class="number">0</span>][<span class="string">&#x27;text&#x27;</span>][:<span class="number">100</span>]&#125;</span>...&quot;</span>)</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 混合搜索 (示例)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hybrid_search</span>(<span class="params">query, category=<span class="literal">None</span>, environment=<span class="literal">None</span>, limit=<span class="number">5</span>, weights=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> weights <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        weights = &#123;<span class="string">&quot;sparse&quot;</span>: <span class="number">0.5</span>, <span class="string">&quot;dense&quot;</span>: <span class="number">0.5</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n6. 执行混合搜索: &#x27;<span class="subst">&#123;query&#125;</span>&#x27;&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;   Category: <span class="subst">&#123;category&#125;</span>, Environment: <span class="subst">&#123;environment&#125;</span>, Limit: <span class="subst">&#123;limit&#125;</span>, Weights: <span class="subst">&#123;weights&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        query_embeddings = ef([query])</span><br><span class="line"></span><br><span class="line">        conditions = []</span><br><span class="line">        <span class="keyword">if</span> category:</span><br><span class="line">            conditions.append(<span class="string">f&#x27;category == &quot;<span class="subst">&#123;category&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> environment:</span><br><span class="line">            conditions.append(<span class="string">f&#x27;environment == &quot;<span class="subst">&#123;environment&#125;</span>&quot;&#x27;</span>)</span><br><span class="line">        expr = <span class="string">&quot; &amp;&amp; &quot;</span>.join(conditions) <span class="keyword">if</span> conditions <span class="keyword">else</span> <span class="literal">None</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;   过滤表达式: <span class="subst">&#123;expr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        search_params_dense = &#123;<span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>, <span class="string">&quot;params&quot;</span>: &#123;&#125;&#125;</span><br><span class="line">        search_params_sparse = &#123;<span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;IP&quot;</span>, <span class="string">&quot;params&quot;</span>: &#123;&#125;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> expr:</span><br><span class="line">            search_params_dense[<span class="string">&quot;expr&quot;</span>] = expr</span><br><span class="line">            search_params_sparse[<span class="string">&quot;expr&quot;</span>] = expr</span><br><span class="line"></span><br><span class="line">        dense_req = AnnSearchRequest(</span><br><span class="line">            data=[query_embeddings[<span class="string">&quot;dense&quot;</span>][<span class="number">0</span>].tolist()],</span><br><span class="line">            anns_field=<span class="string">&quot;dense_vector&quot;</span>,</span><br><span class="line">            param=search_params_dense,</span><br><span class="line">            limit=limit</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 转换查询稀疏向量格式</span></span><br><span class="line">        query_sparse_row_obj = query_embeddings[<span class="string">&quot;sparse&quot;</span>][<span class="number">0</span>]  <span class="comment"># 索引返回单行稀疏对象</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;col&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            query_milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx, val <span class="keyword">in</span></span><br><span class="line">                                          <span class="built_in">zip</span>(query_sparse_row_obj.col, query_sparse_row_obj.data)&#125;</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;indices&#x27;</span>) <span class="keyword">and</span> <span class="built_in">hasattr</span>(query_sparse_row_obj, <span class="string">&#x27;data&#x27;</span>):</span><br><span class="line">            query_milvus_sparse_vector = &#123;<span class="built_in">int</span>(idx): <span class="built_in">float</span>(val) <span class="keyword">for</span> idx, val <span class="keyword">in</span></span><br><span class="line">                                          <span class="built_in">zip</span>(query_sparse_row_obj.indices, query_sparse_row_obj.data)&#125;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误: 无法识别的查询稀疏向量类型 <span class="subst">&#123;<span class="built_in">type</span>(query_sparse_row_obj)&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        sparse_req = AnnSearchRequest(</span><br><span class="line">            data=[query_milvus_sparse_vector],</span><br><span class="line">            anns_field=<span class="string">&quot;sparse_vector&quot;</span>,</span><br><span class="line">            param=search_params_sparse,</span><br><span class="line">            limit=limit</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        rerank = WeightedRanker(weights[<span class="string">&quot;sparse&quot;</span>], weights[<span class="string">&quot;dense&quot;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;   发送混合搜索请求到 Milvus...&quot;</span>)</span><br><span class="line">        results = collection.hybrid_search(</span><br><span class="line">            reqs=[sparse_req, dense_req],</span><br><span class="line">            rerank=rerank,</span><br><span class="line">            limit=limit,</span><br><span class="line">            output_fields=[<span class="string">&quot;text&quot;</span>, <span class="string">&quot;id&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;category&quot;</span>, <span class="string">&quot;location&quot;</span>, <span class="string">&quot;environment&quot;</span>, <span class="string">&quot;pk&quot;</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;   搜索完成。结果:&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> results <span class="keyword">or</span> <span class="keyword">not</span> results[<span class="number">0</span>]:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;   未找到结果。&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">        processed_results = []</span><br><span class="line">        <span class="keyword">for</span> hit <span class="keyword">in</span> results[<span class="number">0</span>]:</span><br><span class="line">            processed_results.append(&#123;</span><br><span class="line">                <span class="string">&quot;id&quot;</span>: hit.entity.get(<span class="string">&quot;id&quot;</span>),</span><br><span class="line">                <span class="string">&quot;pk&quot;</span>: hit.<span class="built_in">id</span>,</span><br><span class="line">                <span class="string">&quot;title&quot;</span>: hit.entity.get(<span class="string">&quot;title&quot;</span>),</span><br><span class="line">                <span class="string">&quot;text_preview&quot;</span>: hit.entity.get(<span class="string">&quot;text&quot;</span>, <span class="string">&quot;&quot;</span>)[:<span class="number">200</span>] + <span class="string">&quot;...&quot;</span>,</span><br><span class="line">                <span class="string">&quot;category&quot;</span>: hit.entity.get(<span class="string">&quot;category&quot;</span>),</span><br><span class="line">                <span class="string">&quot;location&quot;</span>: hit.entity.get(<span class="string">&quot;location&quot;</span>),</span><br><span class="line">                <span class="string">&quot;environment&quot;</span>: hit.entity.get(<span class="string">&quot;environment&quot;</span>),</span><br><span class="line">                <span class="string">&quot;distance&quot;</span>: hit.distance</span><br><span class="line">            &#125;)</span><br><span class="line">        <span class="keyword">return</span> processed_results</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> MilvusException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;混合搜索时发生 Milvus 错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;混合搜索时发生未知错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例搜索调用</span></span><br><span class="line"><span class="keyword">if</span> collection.num_entities &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n开始示例搜索...&quot;</span>)</span><br><span class="line">    search_results = hybrid_search(<span class="string">&quot;孙悟空的战斗技巧&quot;</span>, category=<span class="string">&quot;神魔大战&quot;</span>, limit=<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span> search_results:</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> search_results:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - PK: <span class="subst">&#123;res[<span class="string">&#x27;pk&#x27;</span>]&#125;</span>, Title: <span class="subst">&#123;res[<span class="string">&#x27;title&#x27;</span>]&#125;</span>, Distance: <span class="subst">&#123;res[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Category: <span class="subst">&#123;res[<span class="string">&#x27;category&#x27;</span>]&#125;</span>, Location: <span class="subst">&#123;res[<span class="string">&#x27;location&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Preview: <span class="subst">&#123;res[<span class="string">&#x27;text_preview&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    search_results_filtered = hybrid_search(<span class="string">&quot;火焰山的战斗&quot;</span>, environment=<span class="string">&quot;火山&quot;</span>, limit=<span class="number">2</span>)</span><br><span class="line">    <span class="keyword">if</span> search_results_filtered:</span><br><span class="line">        <span class="keyword">for</span> res <span class="keyword">in</span> search_results_filtered:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - PK: <span class="subst">&#123;res[<span class="string">&#x27;pk&#x27;</span>]&#125;</span>, Title: <span class="subst">&#123;res[<span class="string">&#x27;title&#x27;</span>]&#125;</span>, Distance: <span class="subst">&#123;res[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Category: <span class="subst">&#123;res[<span class="string">&#x27;category&#x27;</span>]&#125;</span>, Location: <span class="subst">&#123;res[<span class="string">&#x27;location&#x27;</span>]&#125;</span>, Environment: <span class="subst">&#123;res[<span class="string">&#x27;environment&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    Preview: <span class="subst">&#123;res[<span class="string">&#x27;text_preview&#x27;</span>]&#125;</span>\n&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n集合中没有实体，跳过示例搜索。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n脚本执行完毕。&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用BGE-M3嵌入：</p><ul><li>特点：多任务整合模型，可生成密集向量和稀疏向量</li><li>实现：BGEM3EmbeddingFunction(use_fp16=False, device=”cpu”)</li></ul><p>混合检索逻辑</p><ul><li>关键组件<ul><li>AnnSearchRequest：处理两种向量类型的检索请求</li><li>字段定义：需包含sparse_vector和dense_vector字段</li></ul></li><li>索引创建</li><li>权重参数设计<ul><li>设计原则：权重值为相对比例而非百分比（如{“sparse”:0.7,”dense”:1.0}）</li><li>调整策略：<ul><li>密集向量效果更好时增加dense权重</li><li>稀疏向量效果更好时增加sparse权重</li><li>效果相当时设置相近权重</li></ul></li></ul></li></ul><h1 id="Milvus多模态检索实战"><a href="#Milvus多模态检索实战" class="headerlink" title="Milvus多模态检索实战"></a>Milvus多模态检索实战</h1><h2 id="多模态检索"><a href="#多模态检索" class="headerlink" title="多模态检索"></a>多模态检索</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250902093817419.png" alt="image-20250902093817419" style="zoom:80%;" /></p><ul><li>本质理解: 多模态检索可理解为混合检索，即在原有检索基础上增加一种向量表示方式。</li><li>应用场景: 适用于需要同时支持文字和图片检索的场景，如博客图片搜索引擎、游戏场景搜索等。</li><li>核心组件:<ul><li>多模态编码器：如Visualized-BGE模型</li><li>向量数据库：存储向量和元数据</li><li>相似度搜索：基于余弦相似度等算法</li></ul></li><li>模型特点:<ul><li>基于BGE文本嵌入框架，增加图像token嵌入能力</li><li>保留原BGE模型的强大文本嵌入能力</li><li>支持多种检索任务：多模态知识检索、组合图像检索等</li></ul></li><li>模型版本:<ul><li>bge-visualized-base-en-v1.5：768维，英文版</li><li>bge-visualized-m3：1024维，多语言版</li></ul></li><li>安装使用:<ul><li>需要按官方指导逐步安装模型</li><li>模型下载后需上传到服务器指定路径</li><li>核心依赖包：torchvision、timm、einops等</li></ul></li></ul><h2 id="visual-bge模型下载安装"><a href="#visual-bge模型下载安装" class="headerlink" title="visual_bge模型下载安装"></a>visual_bge模型下载安装</h2><p>github说明地址：<a href="https://github.com/FlagOpen/FlagEmbedding/tree/master/research/visual_bge">https://github.com/FlagOpen/FlagEmbedding/tree/master/research/visual_bge</a></p><ol><li><p>下载工程安装依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/FlagOpen/FlagEmbedding.git</span><br><span class="line">cd FlagEmbedding/research/visual_bge</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>安装其他需要的依赖</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torchvision timm einops ftfy</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>测试是否安装成功:<code>pip show visual-bge</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Name: visual_bge</span><br><span class="line">Version: 0.1.0</span><br><span class="line">Summary: visual_bge</span><br><span class="line">Home-page: https://github.com/FlagOpen/FlagEmbedding/tree/master/research/visual_bge</span><br><span class="line">Author: </span><br><span class="line">Author-email: </span><br><span class="line">License: </span><br><span class="line">Location: /Users/jinglv/PycharmProjects/llm-rag-system/.venv/lib/python3.12/site-packages</span><br><span class="line">Editable project location: /Users/jinglv/PycharmProjects/llm-rag-system/FlagEmbedding/research/visual_bge</span><br><span class="line">Requires: einops, ftfy, timm, torchvision</span><br><span class="line">Required-by: </span><br></pre></td></tr></table></figure></li></ol><p>导入报错问题：<code>ModuleNotFoundError: No module named &#39;visual_bge&#39;</code></p><ul><li>visual<em>bge：是在下载的FlagEmbedding源码中，去找对应的位置，有包导入错误，或者不是python的包（目录下缺少：`<em>_init</em></em>.py`）补上对应的部分即可。</li></ul><h2 id="实战代码（说明）-1"><a href="#实战代码（说明）-1" class="headerlink" title="实战代码（说明）"></a>实战代码（说明）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/9/2 09:45</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">多模态图像检索系统：基于Visualized-BGE和Milvus实现</span></span><br><span class="line"><span class="string">功能：对图像和文本进行多模态编码，并在图像数据库中检索相似内容</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># ==================== 1. 初始化编码器 ====================</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> FlagEmbedding.research.visual_bge.visual_bge.modeling <span class="keyword">import</span> Visualized_BGE</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># from visual_bge.modeling import Visualized_BGE</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WukongEncoder</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;多模态编码器：将图像和文本编码成向量&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, model_name: <span class="built_in">str</span>, model_path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.model = Visualized_BGE(model_name_bge=model_name, model_weight=model_path)</span><br><span class="line">        <span class="variable language_">self</span>.model.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode_query</span>(<span class="params">self, image_path: <span class="built_in">str</span>, text: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">float</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;编码图像和文本的组合查询&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            query_emb = <span class="variable language_">self</span>.model.encode(image=image_path, text=text)</span><br><span class="line">        <span class="keyword">return</span> query_emb.tolist()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encode_image</span>(<span class="params">self, image_path: <span class="built_in">str</span></span>) -&gt; <span class="built_in">list</span>[<span class="built_in">float</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;仅编码图像&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            query_emb = <span class="variable language_">self</span>.model.encode(image=image_path)</span><br><span class="line">        <span class="keyword">return</span> query_emb.tolist()[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化编码器</span></span><br><span class="line">model_name = <span class="string">&quot;BAAI/bge-m3&quot;</span></span><br><span class="line">model_path = <span class="string">&quot;../../../visualized_models/Visualized_m3.pth&quot;</span></span><br><span class="line">encoder = WukongEncoder(model_name, model_path)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 2. 数据集管理 ====================</span></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WukongImage</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图像元数据结构&quot;&quot;&quot;</span></span><br><span class="line">    image_id: <span class="built_in">str</span></span><br><span class="line">    file_path: <span class="built_in">str</span></span><br><span class="line">    title: <span class="built_in">str</span></span><br><span class="line">    category: <span class="built_in">str</span></span><br><span class="line">    description: <span class="built_in">str</span></span><br><span class="line">    tags: <span class="type">List</span>[<span class="built_in">str</span>]</span><br><span class="line">    game_chapter: <span class="built_in">str</span></span><br><span class="line">    location: <span class="built_in">str</span></span><br><span class="line">    characters: <span class="type">List</span>[<span class="built_in">str</span>]</span><br><span class="line">    abilities_shown: <span class="type">List</span>[<span class="built_in">str</span>]</span><br><span class="line">    environment: <span class="built_in">str</span></span><br><span class="line">    time_of_day: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">WukongDataset</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;图像数据集管理类&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, data_dir: <span class="built_in">str</span>, metadata_path: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="variable language_">self</span>.data_dir = data_dir</span><br><span class="line">        <span class="variable language_">self</span>.metadata_path = metadata_path</span><br><span class="line">        <span class="variable language_">self</span>.images: <span class="type">List</span>[WukongImage] = []</span><br><span class="line">        <span class="variable language_">self</span>._load_metadata()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_load_metadata</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;加载图像元数据&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.metadata_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = json.load(f)</span><br><span class="line">            <span class="keyword">for</span> img_data <span class="keyword">in</span> data[<span class="string">&#x27;images&#x27;</span>]:</span><br><span class="line">                <span class="comment"># 确保图片路径是相对于 data_dir 的</span></span><br><span class="line">                img_data[<span class="string">&#x27;file_path&#x27;</span>] = <span class="string">f&quot;<span class="subst">&#123;self.data_dir&#125;</span>/<span class="subst">&#123;img_data[<span class="string">&#x27;file_path&#x27;</span>].split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]&#125;</span>&quot;</span></span><br><span class="line">                <span class="variable language_">self</span>.images.append(WukongImage(**img_data))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化数据集</span></span><br><span class="line">dataset = WukongDataset(<span class="string">&quot;../../../data/多模态&quot;</span>, <span class="string">&quot;../../../data/多模态/metadata.json&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 3. 生成图像嵌入 ====================</span></span><br><span class="line"><span class="comment"># 为所有图像生成嵌入向量</span></span><br><span class="line">image_dict = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> tqdm(dataset.images, desc=<span class="string">&quot;生成图片嵌入&quot;</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        image_dict[image.file_path] = encoder.encode_image(image.file_path)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;处理图片 <span class="subst">&#123;image.file_path&#125;</span> 失败：<span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;成功编码 <span class="subst">&#123;<span class="built_in">len</span>(image_dict)&#125;</span> 张图片&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 4. Milvus向量库设置 ====================</span></span><br><span class="line"><span class="comment"># 连接/创建Milvus数据库</span></span><br><span class="line">collection_name = <span class="string">&quot;wukong_scenes&quot;</span></span><br><span class="line">milvus_client = MilvusClient(uri=<span class="string">&quot;http://82.157.193.65:19530&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建向量集合</span></span><br><span class="line">dim = <span class="built_in">len</span>(<span class="built_in">list</span>(image_dict.values())[<span class="number">0</span>])</span><br><span class="line">milvus_client.create_collection(</span><br><span class="line">    collection_name=collection_name,</span><br><span class="line">    dimension=dim,</span><br><span class="line">    auto_id=<span class="literal">True</span>,</span><br><span class="line">    enable_dynamic_field=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 插入数据到Milvus</span></span><br><span class="line">insert_data = []</span><br><span class="line"><span class="keyword">for</span> image <span class="keyword">in</span> dataset.images:</span><br><span class="line">    <span class="keyword">if</span> image.file_path <span class="keyword">in</span> image_dict:</span><br><span class="line">        insert_data.append(&#123;</span><br><span class="line">            <span class="string">&quot;image_path&quot;</span>: image.file_path,</span><br><span class="line">            <span class="string">&quot;vector&quot;</span>: image_dict[image.file_path],</span><br><span class="line">            <span class="string">&quot;title&quot;</span>: image.title,</span><br><span class="line">            <span class="string">&quot;category&quot;</span>: image.category,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: image.description,</span><br><span class="line">            <span class="string">&quot;tags&quot;</span>: <span class="string">&quot;,&quot;</span>.join(image.tags),</span><br><span class="line">            <span class="string">&quot;game_chapter&quot;</span>: image.game_chapter,</span><br><span class="line">            <span class="string">&quot;location&quot;</span>: image.location,</span><br><span class="line">            <span class="string">&quot;characters&quot;</span>: <span class="string">&quot;,&quot;</span>.join(image.characters),</span><br><span class="line">            <span class="string">&quot;abilities&quot;</span>: <span class="string">&quot;,&quot;</span>.join(image.abilities_shown),</span><br><span class="line">            <span class="string">&quot;environment&quot;</span>: image.environment,</span><br><span class="line">            <span class="string">&quot;time_of_day&quot;</span>: image.time_of_day</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">result = milvus_client.insert(</span><br><span class="line">    collection_name=collection_name,</span><br><span class="line">    data=insert_data</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;索引构建完成，共插入 <span class="subst">&#123;result[<span class="string">&#x27;insert_count&#x27;</span>]&#125;</span> 条记录&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 5. 搜索功能实现 ====================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">search_similar_images</span>(<span class="params"></span></span><br><span class="line"><span class="params">        query_image: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        query_text: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        limit: <span class="built_in">int</span> = <span class="number">9</span></span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="type">List</span>[<span class="built_in">dict</span>]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    搜索相似图像</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        query_image: 查询图像路径</span></span><br><span class="line"><span class="string">        query_text: 查询文本</span></span><br><span class="line"><span class="string">        limit: 返回结果数量</span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        检索结果列表</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 生成查询向量</span></span><br><span class="line">    query_vec = encoder.encode_query(query_image, query_text)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 构建搜索参数</span></span><br><span class="line">    search_params = &#123;</span><br><span class="line">        <span class="string">&quot;metric_type&quot;</span>: <span class="string">&quot;COSINE&quot;</span>,</span><br><span class="line">        <span class="string">&quot;params&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;nprobe&quot;</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="string">&quot;radius&quot;</span>: <span class="number">0.1</span>,</span><br><span class="line">            <span class="string">&quot;range_filter&quot;</span>: <span class="number">0.8</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行搜索</span></span><br><span class="line">    results = milvus_client.search(</span><br><span class="line">        collection_name=collection_name,</span><br><span class="line">        data=[query_vec],</span><br><span class="line">        output_fields=[</span><br><span class="line">            <span class="string">&quot;image_path&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;category&quot;</span>, <span class="string">&quot;description&quot;</span>,</span><br><span class="line">            <span class="string">&quot;tags&quot;</span>, <span class="string">&quot;game_chapter&quot;</span>, <span class="string">&quot;location&quot;</span>, <span class="string">&quot;characters&quot;</span>,</span><br><span class="line">            <span class="string">&quot;abilities&quot;</span>, <span class="string">&quot;environment&quot;</span>, <span class="string">&quot;time_of_day&quot;</span></span><br><span class="line">        ],</span><br><span class="line">        limit=limit,</span><br><span class="line">        search_params=search_params</span><br><span class="line">    )[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 6. 可视化函数 ====================</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visualize_results</span>(<span class="params">query_image: <span class="built_in">str</span>, results: <span class="type">List</span>[<span class="built_in">dict</span>], output_path: <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    可视化搜索结果</span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        query_image: 查询图像路径</span></span><br><span class="line"><span class="string">        results: 搜索结果列表</span></span><br><span class="line"><span class="string">        output_path: 输出图像路径</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 设置图片大小和网格参数</span></span><br><span class="line">    img_size = (<span class="number">300</span>, <span class="number">300</span>)</span><br><span class="line">    grid_size = (<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 创建画布</span></span><br><span class="line">    canvas_height = img_size[<span class="number">0</span>] * (grid_size[<span class="number">0</span>] + <span class="number">1</span>)</span><br><span class="line">    canvas_width = img_size[<span class="number">1</span>] * (grid_size[<span class="number">1</span>] + <span class="number">1</span>)</span><br><span class="line">    canvas = np.full((canvas_height, canvas_width, <span class="number">3</span>), <span class="number">255</span>, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加查询图片</span></span><br><span class="line">    query_img = Image.<span class="built_in">open</span>(query_image).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">    query_array = np.array(query_img)</span><br><span class="line">    query_resized = cv2.resize(query_array, (img_size[<span class="number">0</span>] - <span class="number">20</span>, img_size[<span class="number">1</span>] - <span class="number">20</span>))</span><br><span class="line">    bordered_query = cv2.copyMakeBorder(</span><br><span class="line">        query_resized, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>,</span><br><span class="line">        cv2.BORDER_CONSTANT,</span><br><span class="line">        value=(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    )</span><br><span class="line">    canvas[:img_size[<span class="number">0</span>], :img_size[<span class="number">1</span>]] = bordered_query</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加结果图片</span></span><br><span class="line">    <span class="keyword">for</span> idx, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results[:grid_size[<span class="number">0</span>] * grid_size[<span class="number">1</span>]]):</span><br><span class="line">        row = (idx // grid_size[<span class="number">1</span>]) + <span class="number">1</span></span><br><span class="line">        col = idx % grid_size[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        img = Image.<span class="built_in">open</span>(result[<span class="string">&quot;entity&quot;</span>][<span class="string">&quot;image_path&quot;</span>]).convert(<span class="string">&quot;RGB&quot;</span>)</span><br><span class="line">        img_array = np.array(img)</span><br><span class="line">        resized = cv2.resize(img_array, (img_size[<span class="number">0</span>], img_size[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">        y_start = row * img_size[<span class="number">0</span>]</span><br><span class="line">        x_start = col * img_size[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        canvas[y_start:y_start + img_size[<span class="number">0</span>], x_start:x_start + img_size[<span class="number">1</span>]] = resized</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 添加相似度分数</span></span><br><span class="line">        score_text = <span class="string">f&quot;Score: <span class="subst">&#123;result[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.2</span>f&#125;</span>&quot;</span></span><br><span class="line">        cv2.putText(</span><br><span class="line">            canvas,</span><br><span class="line">            score_text,</span><br><span class="line">            (x_start + <span class="number">10</span>, y_start + img_size[<span class="number">0</span>] - <span class="number">10</span>),</span><br><span class="line">            cv2.FONT_HERSHEY_SIMPLEX,</span><br><span class="line">            <span class="number">0.5</span>,</span><br><span class="line">            (<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">            <span class="number">1</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    cv2.imwrite(output_path, canvas)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># ==================== 7. 执行查询示例 ====================</span></span><br><span class="line"><span class="comment"># 执行查询</span></span><br><span class="line">query_image = <span class="string">&quot;../../../data/多模态/query_image.jpg&quot;</span></span><br><span class="line">query_text = <span class="string">&quot;寻找悟空面对建筑物战斗场景&quot;</span></span><br><span class="line"></span><br><span class="line">results = search_similar_images(</span><br><span class="line">    query_image=query_image,</span><br><span class="line">    query_text=query_text,</span><br><span class="line">    limit=<span class="number">9</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出详细信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n搜索结果:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> idx, result <span class="keyword">in</span> <span class="built_in">enumerate</span>(results):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n结果 <span class="subst">&#123;idx&#125;</span>:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;图片：<span class="subst">&#123;result[<span class="string">&#x27;entity&#x27;</span>][<span class="string">&#x27;image_path&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;标题：<span class="subst">&#123;result[<span class="string">&#x27;entity&#x27;</span>][<span class="string">&#x27;title&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;描述：<span class="subst">&#123;result[<span class="string">&#x27;entity&#x27;</span>][<span class="string">&#x27;description&#x27;</span>]&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;相似度分数：<span class="subst">&#123;result[<span class="string">&#x27;distance&#x27;</span>]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化结果</span></span><br><span class="line">visualize_results(query_image, results, <span class="string">&quot;search_results.jpg&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>权重参数设计:</p><ul><li>sparse权重0.7，dense权重1.0</li><li>权重值不需要加起来等于1，表示相对重要性比例</li><li>稠密向量重要性是稀疏向量的约1.43倍(1.0/0.7)</li><li>可根据实际效果动态调整权重比例</li></ul></li><li><p>数据集管理</p><ul><li>数据结构:<ul><li>包含图像ID、文件路径、标题、类别等基础信息</li><li>详细描述字段：如战斗场景描述、角色、环境等</li><li>标签列表：如”群战”、”水特效”等关键词</li></ul></li><li>构建方法:<ul><li>可使用大模型自动生成图像元数据</li><li>元数据与图像文件需保持对应关系</li><li>支持自定义字段扩展</li></ul></li></ul></li><li>检索功能的实现<ul><li>检索方式:<ul><li>支持纯图像检索</li><li>支持图文混合检索</li><li>支持带过滤条件的检索</li></ul></li><li>核心流程:<ul><li>初始化编码器并加载模型</li><li>为所有图像生成嵌入向量</li><li>创建Milvus向量集合</li><li>执行相似度搜索</li><li>可视化展示结果</li></ul></li><li>混合检索实现:<ul><li>同时编码图像和文本生成查询向量</li><li>可设置过滤条件缩小搜索范围</li><li>支持调整稀疏和稠密向量的权重比例</li></ul></li></ul></li></ul><h2 id="其它多模态解决方案"><a href="#其它多模态解决方案" class="headerlink" title="其它多模态解决方案"></a>其它多模态解决方案</h2><ul><li>Weaviate：原生支持图像、文本等多种模态的 Any-to-Any 检索 。</li><li>Qdrant：结合 ImageBind、LlamaIndex 等模型，可实现音频、图像、文本等跨模态向量化检索。</li><li>OpenSearch：通过神经插件（Neural Search）和 Titan 多模态嵌入模型，提供云端托管的多模态搜索能力。</li><li>Pinecone：全托管向量库，开箱即可实现图像、音频、视频等多模态向量检索。</li><li>Haystack：在 NLP 检索框架基础上，集成 CLIP 等模型，可扩展为多模态搜索系统。</li><li>Vespa：支持多向量索引与复杂排名函数，擅长电商、新闻等场景下的多模态检索。</li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第二十三讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>AI大模型和Agent智能体介绍</title>
    <link href="https://jinglv.github.io/2025/08/25/ai/llm/1-introduce/"/>
    <id>https://jinglv.github.io/2025/08/25/ai/llm/1-introduce/</id>
    <published>2025-08-24T16:00:00.000Z</published>
    <updated>2025-08-31T12:18:01.596Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是大语言模型（LLM）"><a href="#什么是大语言模型（LLM）" class="headerlink" title="什么是大语言模型（LLM）"></a>什么是大语言模型（LLM）</h1><h2 id="大语言模型定义（LLM）"><a href="#大语言模型定义（LLM）" class="headerlink" title="大语言模型定义（LLM）"></a>大语言模型定义（LLM）</h2><p><strong>定义：</strong> 大语言模型（Large Language Model，简称 LLM）是使用大规模自然语言数据训练而成的<strong>深度学习模型</strong>，具有对文本的理解与生成能力。</p><ul><li>它不仅能理解用户输入的自然语言，还能输出连贯、有逻辑、具有上下文关联的内容。</li><li>可执行的任务包括：问答、翻译、文本总结、代码生成、逻辑推理等。</li></ul><h2 id="大语言模型的主要特征"><a href="#大语言模型的主要特征" class="headerlink" title="大语言模型的主要特征"></a>大语言模型的主要特征</h2><h4 id="上下文理解能力"><a href="#上下文理解能力" class="headerlink" title="上下文理解能力"></a>上下文理解能力</h4><ul><li>能追踪对话历史，理解并回应语义连续的问题。</li><li>举例：连续对话中，模型知道“他”指的是上一个问题提到的人物。</li></ul><h4 id="执行复杂任务"><a href="#执行复杂任务" class="headerlink" title="执行复杂任务"></a>执行复杂任务</h4><ul><li>能进行逻辑推理、情感分析、摘要生成、甚至代码编写。</li><li>如：分析电影评论的情绪、生成博客摘要、输出 Python 函数。</li></ul><h4 id="Prompt-驱动学习方式"><a href="#Prompt-驱动学习方式" class="headerlink" title="Prompt 驱动学习方式"></a>Prompt 驱动学习方式</h4><ul><li><strong>Zero-shot Learning（零样本学习）</strong>：不提供示例，仅靠自然语言提示执行任务。</li><li><strong>Few-shot Learning（少样本学习）</strong>：提供 1~3 个示例，模型基于这些示例推理出解决方案。</li></ul><h2 id="主流开源与闭源模型对比"><a href="#主流开源与闭源模型对比" class="headerlink" title="主流开源与闭源模型对比"></a>主流开源与闭源模型对比</h2><h3 id="按开源-闭源分类"><a href="#按开源-闭源分类" class="headerlink" title="按开源/闭源分类"></a>按开源/闭源分类</h3><div class="table-container"><table><thead><tr><th><strong>类型</strong></th><th><strong>代表模型</strong></th></tr></thead><tbody><tr><td>开源</td><td>LLaMA、BLOOM、DeepSeek、Qwen、ChatGLM、</td></tr><tr><td>闭源</td><td>GPT 系列、Claude、文心一言</td></tr></tbody></table></div><ul><li><p><strong>开源模型类比：自己搭建一台服务器</strong></p><ul><li><p>优点：可控、安全、可修改。</p></li><li><p>缺点：运维成本高，需要配置显卡、权重文件、加载方式等。</p></li></ul></li><li><p><strong>闭源模型类比：租用云服务</strong></p><ul><li><p>优点：即开即用，性能强大，无需部署。</p></li><li><p>缺点：数据出境、黑盒限制、定价可能较高。</p></li></ul></li></ul><h3 id="主流模型对比维度"><a href="#主流模型对比维度" class="headerlink" title="主流模型对比维度"></a>主流模型对比维度</h3><div class="table-container"><table><thead><tr><th><strong>大模型</strong></th><th><strong>机构</strong></th><th><strong>是否开源</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>GPT-4</strong></td><td>OpenAI</td><td>❌ 否</td><td>API</td><td>综合能力强，生态成熟，稳定性高</td></tr><tr><td><strong>Claude 3</strong></td><td>Anthropic</td><td>❌ 否</td><td>API</td><td>长上下文支持强（200K+），安全性好</td></tr><tr><td><strong>文心一言（ERNIE Bot）</strong></td><td>百度</td><td>❌ 否</td><td>API</td><td>中文优化，集成百度生态</td></tr><tr><td><strong>ChatGLM3</strong></td><td>智谱AI（Zhipu AI）</td><td>✅ 是</td><td>本地部署 / API</td><td>中文优化好，推理快，有Mix结构</td></tr><tr><td><strong>LLaMA 2 / 3</strong></td><td>Meta</td><td>✅ 是</td><td>本地部署 / API</td><td>社区活跃，适合研究与自定义部署</td></tr><tr><td><strong>DeepSeek V3</strong></td><td>深度求索</td><td>✅ 是</td><td>本地 部署/ API</td><td>中文优化，性能优，效率高，支持多模态</td></tr><tr><td><strong>千问 Qwen</strong></td><td>阿里</td><td>✅ 是</td><td>本地部署 / API</td><td>中文强，支持长上下文，推理强，应用活跃</td></tr></tbody></table></div><h3 id="闭源模型的优势与局限"><a href="#闭源模型的优势与局限" class="headerlink" title="闭源模型的优势与局限"></a>闭源模型的优势与局限</h3><p><strong>👍</strong> <strong>优势:</strong></p><ul><li>表现强大，常居排行榜前列（如 GPT-4o）</li><li>云端部署，无需本地资源</li></ul><p><strong>👎</strong> <strong>局限：</strong></p><ul><li>使用成本较高（按 token 收费）</li><li>无法自定义/微调模型</li><li>数据传输涉及隐私和合规风险</li></ul><h3 id="开源模型的优势与局限"><a href="#开源模型的优势与局限" class="headerlink" title="开源模型的优势与局限"></a>开源模型的优势与局限</h3><p><strong>👍</strong> <strong>优势：</strong></p><ul><li>自主可控，可本地部署，无需联网</li><li>可微调适配特定场景（如医疗问答、教育问答）</li><li>成本低，适合企业/高校私有部署</li></ul><p><strong>👎</strong> <strong>局限：</strong></p><ul><li>单模型能力一般不如 GPT-4o等闭源模型</li><li>微调与部署需要 GPU 资源及一定工程能力</li></ul><h2 id="大模型的能力"><a href="#大模型的能力" class="headerlink" title="大模型的能力"></a>大模型的能力</h2><h3 id="擅长的能力领域（当前）"><a href="#擅长的能力领域（当前）" class="headerlink" title="擅长的能力领域（当前）"></a>擅长的能力领域（当前）</h3><div class="table-container"><table><thead><tr><th><strong>能力</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>文本生成</td><td>自动撰写文章、文案、邮件等</td></tr><tr><td>信息整合</td><td>摘要、翻译、知识问答等任务</td></tr><tr><td>代码编写</td><td>自动生成、补全、修复代码（如 Python、JS）</td></tr><tr><td>逻辑推理</td><td>在提示引导下完成结构化推理（如 Chain-of-Thought）</td></tr><tr><td>对话管理</td><td>支持上下文关联、情绪调节</td></tr><tr><td>多任务执行</td><td>简单任务规划与指令分解执行</td></tr></tbody></table></div><h3 id="不擅长的领域"><a href="#不擅长的领域" class="headerlink" title="不擅长的领域"></a>不擅长的领域</h3><div class="table-container"><table><thead><tr><th><strong>能力限制</strong></th><th><strong>描述</strong></th><th><strong>当前改进方向</strong></th></tr></thead><tbody><tr><td>实时查询</td><td>默认闭源模型不联网</td><td>插件或外接 API（如 Perplexity、Bing）支持</td></tr><tr><td>精准计算</td><td>数学能力有限，易出错</td><td>可结合 Wolfram Alpha 插件进行数学计算</td></tr><tr><td>上下文一致性</td><td>长对话易“遗忘”前文内容</td><td>Claude 3、Gemini 1.5 提供超长上下文支持</td></tr><tr><td>信息幻觉</td><td>可能编造事实、引用错误</td><td>使用 RAG 技术、提示词优化可缓解</td></tr><tr><td>安全边界</td><td>无法处理敏感隐私信息</td><td>不适合用于医疗诊断、法律定案等场景</td></tr><tr><td>多模态限制</td><td>图像、音频推理尚不成熟</td><td>存在空间理解与情感识别的瓶颈</td></tr></tbody></table></div><h3 id="能力边界的“动态性”"><a href="#能力边界的“动态性”" class="headerlink" title="能力边界的“动态性”"></a>能力边界的“动态性”</h3><ul><li>技术持续更新，能力边界正在拓宽</li><li>当前不等于永久不行</li></ul><h1 id="什么是Agent智能体"><a href="#什么是Agent智能体" class="headerlink" title="什么是Agent智能体"></a>什么是Agent智能体</h1><p>智能体（AI Agents或Agents）是指能够<strong>自主感知环境、做出决策并执行行动的系统或程序</strong>。根据IBM的定义，智能体是“能够通过设计其工作流和利用可用工具，代表用户或其他系统自主执行任务的系统或程序”[<a href="https://www.ibm.com/cn-zh/think/topics/ai-agents">IBM</a>]。英伟达则将智能体描述为“AI 智能体是先进的 AI 系统，旨在<strong>根据高级目标自主进行推理，制定计划并执行复杂任务</strong>。”，代表了“从简单自动化向能够管理复杂工作流的自主系统过渡”的演进方向[<a href="https://www.nvidia.cn/glossary/ai-agents/">NVIDIA</a>]。</p><p>在更专业的学术定义中，百度百科指出：“智能体是指能够感知环境并自主采取行动以实现特定目标的实体。这一概念最早由“人工智能之父”马文·明斯基提出，他认为某些问题可经由社会中的一些个体经过协商后解决，这些个体就是智能体。”[<a href="https://baike.baidu.com/item/智能体/9446647">百度百科</a>]</p><p>智能体具有以下基本特征：</p><ul><li>自主性(Autonomy)：智能体能够在没有人类或其他实体的直接干预下运行，并对其行动和内部状态具有某种程度的控制。</li><li>反应性(Reactivity)：智能体能够感知其环境，并对环境变化做出实时响应。</li><li>交互性/社交性(Socialability)：智能体能够与其他智能体或人类进行交互和协作。</li><li>适应性/主动性(Proactivity)：智能体能够根据环境变化主动调整其行为策略，适应新的情况。</li><li>学习能力：许多智能体具有通过经验或数据学习和改进的能力。</li></ul><h2 id="智能体的类型"><a href="#智能体的类型" class="headerlink" title="智能体的类型"></a>智能体的类型</h2><ul><li><p>自主智能体 (Autonomous Agents)</p><p>自主智能体是一种能够在没有人类干预的情况下，自主执行任务、做出决策和与环境互动的智能系统。它们具有高度的自主性，能够独立地感知环境、做出决策并执行行动，而不需要外部的控制和干预。</p></li><li><p>反应智能体 (Reactive Agents)</p><p>反应智能体主要关注对环境变化的实时响应。使用简单反射模型，根据当前感知做出决策，而不需要复杂的内部状态或长期规划</p></li></ul><h2 id="智能体的发展阶段"><a href="#智能体的发展阶段" class="headerlink" title="智能体的发展阶段"></a>智能体的发展阶段</h2><p>OpenAI根据自身技术研发与产品开发提出了通往AGI的五级量表，将AI Agent分为五个阶段，每个阶段代表更高级的能力水平：[<a href="https://www.51cto.com/aigc/3449.html">51CTO</a>]</p><ol><li><strong>第1级：聊天机器人</strong> - 具有对话语言技能</li><li><strong>第2级：实用工具</strong> - 能够执行具体任务</li><li><strong>第3级：专家助手</strong> - 具有特定领域的专业知识</li><li><strong>第4级：团队合作者</strong> - 能够与人类团队协作</li><li><strong>第5级：通用人工智能(AGI)</strong> - 具有与人类相当或超越人类的通用智能</li></ol><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250828152117511.png" alt="image-20250828152117511" style="zoom:50%;" /></p><h2 id="智能体的应用"><a href="#智能体的应用" class="headerlink" title="智能体的应用"></a>智能体的应用</h2><h3 id="工业自动化"><a href="#工业自动化" class="headerlink" title="工业自动化"></a>工业自动化</h3><p>在工业领域，智能体被用于：</p><ul><li>自动化生产线监控和优化</li><li>设备预测性维护</li><li>仓储和物流自动化</li><li>质量控制和检测</li></ul><h3 id="服务业"><a href="#服务业" class="headerlink" title="服务业"></a>服务业</h3><p>在服务业，智能体的应用包括：</p><ul><li>智能客服和客户支持</li><li>个性化推荐系统</li><li>智能健康管理</li><li>智能金融分析和风险管理</li></ul><h3 id="医疗健康"><a href="#医疗健康" class="headerlink" title="医疗健康"></a>医疗健康</h3><p>在医疗健康领域，智能体被用于：</p><ul><li>医学影像辅助诊断</li><li>病人监测和远程医疗</li><li>药物研发和临床试验优化</li><li>个性化治疗方案设计</li></ul><h3 id="教育"><a href="#教育" class="headerlink" title="教育"></a>教育</h3><p>在教育领域，智能体的应用包括：</p><ul><li>个性化学习推荐系统</li><li>智能教学助手</li><li>学习评估和反馈系统</li><li>虚拟教育助手</li></ul><h3 id="娱乐与创意"><a href="#娱乐与创意" class="headerlink" title="娱乐与创意"></a>娱乐与创意</h3><p>在娱乐与创意领域，智能体被用于：</p><ul><li>智能内容创作和推荐</li><li>游戏AI和虚拟对手</li><li>数字助手和创意辅助工具</li><li>虚拟主播和内容生成</li></ul><h2 id="Agent-的核心能力模块"><a href="#Agent-的核心能力模块" class="headerlink" title="Agent 的核心能力模块"></a>Agent 的核心能力模块</h2><div class="table-container"><table><thead><tr><th><strong>模块</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>感知（Perception）</strong></td><td>读取输入内容，包括自然语言、结构化数据、环境状态等</td></tr><tr><td><strong>理解与推理（Reasoning）</strong></td><td>分析任务、拆解目标、制定解决策略</td></tr><tr><td><strong>记忆（Memory）</strong></td><td>保留上下文信息和历史记录，实现持续性交互</td></tr><tr><td><strong>规划（Planning）</strong></td><td>多步骤思考和任务分解能力（如Chain of Thought）</td></tr><tr><td><strong>工具调用（Tool Calling）</strong></td><td>结合 API、搜索、代码执行等外部能力完成任务</td></tr><tr><td><strong>执行与反馈（Action）</strong></td><td>执行任务并基于结果做出调整或解释</td></tr></tbody></table></div><h1 id="智能体和模型、大模型的区别"><a href="#智能体和模型、大模型的区别" class="headerlink" title="智能体和模型、大模型的区别"></a>智能体和模型、大模型的区别</h1><div class="table-container"><table><thead><tr><th><strong>名词</strong></th><th><strong>核心概念</strong></th></tr></thead><tbody><tr><td>AI</td><td>人工智能（AI）是计算机科学的一个分支学科</td></tr><tr><td>模型</td><td>AI系统的核心算法组件，通过从数据中学习规律和模式来实现特定功能常见模型如：预测模型（分类、回归），生成模型（文本、图像生成）等模型是无实体的工具，不具有自主性</td></tr><tr><td>大模型</td><td>模型的特殊形态，以参数规模巨大（达到百亿、千亿甚至万亿）为显著特征主要用来处理复杂任务和复杂推理，对人类指令有很强的遵循能力</td></tr><tr><td>智能体</td><td>能够感知环境、自主决策并执行行动以实现特定目标的实体或系统智能体是AI技术落地的系统级<strong>应用形式</strong>能够形成完整的“感知-决策-行动”闭环</td></tr></tbody></table></div><h1 id="智能体架构"><a href="#智能体架构" class="headerlink" title="智能体架构"></a>智能体架构</h1><ul><li><p>单个智能体的构成：</p><ul><li><p>大模型（必选）</p></li><li><p>Tools（必选）</p></li></ul></li><li><p>多个智能体的串联：</p><ul><li><p>LangGraph</p></li><li><p>Dify、Coze等平台</p></li></ul></li><li><p>智能体的调用：</p><ul><li>Python/Node</li></ul></li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250828152606906.png" alt="image-20250828152606906" style="zoom:50%;" /></p>]]></content>
    
    
    <summary type="html">学习 AI大模型和Agent智能体学习笔记第一讲</summary>
    
    
    
    <category term="AI大模型和Agent智能体学习" scheme="https://jinglv.github.io/categories/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8CAgent%E6%99%BA%E8%83%BD%E4%BD%93%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="AI大模型和Agent智能体学习" scheme="https://jinglv.github.io/tags/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%92%8CAgent%E6%99%BA%E8%83%BD%E4%BD%93%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库检索（搜索）、度量类型和条件过滤</title>
    <link href="https://jinglv.github.io/2025/08/22/ai/rag/22-vector-db-search/"/>
    <id>https://jinglv.github.io/2025/08/22/ai/rag/22-vector-db-search/</id>
    <published>2025-08-21T16:00:00.000Z</published>
    <updated>2025-08-22T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="度量类型"><a href="#度量类型" class="headerlink" title="度量类型"></a>度量类型</h1><h2 id="距离度量的标准（类型）"><a href="#距离度量的标准（类型）" class="headerlink" title="距离度量的标准（类型）"></a>距离度量的标准（类型）</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822101843966.png" alt="image-20250822101843966" style="zoom:67%;" /></p><h3 id="L2（欧氏距离）"><a href="#L2（欧氏距离）" class="headerlink" title="L2（欧氏距离）"></a>L2（欧氏距离）</h3><ul><li>适用于连续数值型特征，如图像像素或声纹特征；</li><li><p>常见于需要精确度量“几何距离”的场景，例如视觉检索、点云匹配等。</p></li><li><p>适用场景: 连续数值型特征(如图像像素、声纹特征)，需要精确度量几何距离的场景(视觉检索、点云匹配)</p></li><li>特性: 值越小相似度越高，范围﻿$[0,∞)$﻿</li><li>公式:$L2= \sqrt{\sum(A-B)^2}$﻿</li></ul><h3 id="IP（内积）"><a href="#IP（内积）" class="headerlink" title="IP（内积）"></a>IP（内积）</h3><ul><li>在向量长度（范数）有意义时使用，比如评估未归一化嵌入向量的匹配强度；</li><li><p>若向量已归一化，等价于余弦相似度，可用于文本或推荐系统中的评分计算。</p></li><li><p>适用场景: 向量长度(范数)有意义时(如未归一化的嵌入向量)</p></li><li>特性: 值越大相似度越高，范围无限制</li><li>公式:﻿ $IP = A \cdot B = \sum(A_1B_1 + A_2B_2 + …)$﻿</li><li>注意: 若向量已归一化，等价于余弦相似度</li></ul><h3 id="COSINE（余弦相似度）"><a href="#COSINE（余弦相似度）" class="headerlink" title="COSINE（余弦相似度）"></a>COSINE（余弦相似度）</h3><ul><li>最常用于文本、自然语言嵌入之间的语义相似性计算；</li><li><p>不受向量长度影响，关注方向一致性，适合主题或意图匹配。</p></li><li><p>适用场景: 文本/NLP嵌入的语义相似性计算，主题或意图匹配</p></li><li>特性: 值越大相似度越高，范围﻿$[-1,1]$﻿</li><li>公式:$cos(θ)=\frac{A \cdot B}{|A||B|}$﻿</li><li>黄金标准: 文本检索不知道选什么时首选余弦</li></ul><h3 id="JACCARD（交并比距离）"><a href="#JACCARD（交并比距离）" class="headerlink" title="JACCARD（交并比距离）"></a>JACCARD（交并比距离）</h3><ul><li>用于集合或二值特征的相似度评估，如标签集合、关键词重叠；</li><li>在文本片段重叠、推荐系统中基于兴趣标签的匹配场景常见。</li></ul><ul><li>适用场景: 集合或二值特征的相似度评估(标签集合、关键词重叠)</li><li>特性: 值越小相似度越高，范围$[0,1]$﻿</li><li>公式:$J=1-\frac{|A∩B|}{|A∪B|}$﻿</li></ul><h3 id="HAMMING（海明距离）"><a href="#HAMMING（海明距离）" class="headerlink" title="HAMMING（海明距离）"></a>HAMMING（海明距离）</h3><ul><li>专用于二进制向量（如感知哈希、二值化特征）的相似度度量；</li><li><p>常见于图像指纹检索、人脸二值编码或者简易哈希匹配场景。</p></li><li><p>适用场景: 二进制向量(感知哈希、二值化特征)</p></li><li>特性: 值越小相似度越高，范围$[0,dim]$﻿</li></ul><h3 id="BM25（全文检索评分）"><a href="#BM25（全文检索评分）" class="headerlink" title="BM25（全文检索评分）"></a>BM25（全文检索评分）</h3><ul><li>专为稀疏向量上的全文搜索设计，结合 TF、IDF 和文档长度归一化；</li><li><p>适用于文档检索、问答系统的倒排索引搜索场景。</p></li><li><p>适用场景: 稀疏向量上的全文搜索(文档检索、问答系统)</p></li><li>特性: 值越大相似度越高，范围﻿$[0,∞)$﻿</li></ul><h2 id="各种字段所支持的度量类型"><a href="#各种字段所支持的度量类型" class="headerlink" title="各种字段所支持的度量类型"></a>各种字段所支持的度量类型</h2><div class="table-container"><table><thead><tr><th>字段类型</th><th>维度范围</th><th>支持的度量类型</th><th>默认度量类型</th></tr></thead><tbody><tr><td>FLOAT_VECTOR</td><td>2 – 32 768</td><td>COSINE、L2、IP</td><td>COSINE</td></tr><tr><td>FLOAT16_VECTOR</td><td>2 – 32 768</td><td>COSINE、L2、IP</td><td>COSINE</td></tr><tr><td>BFLOAT16_VECTOR</td><td>2 – 32 768</td><td>COSINE、L2、IP</td><td>COSINE</td></tr><tr><td>SPARSE_FLOAT_VECTOR</td><td>无需指定</td><td>IP、BM25(仅限全文检索)</td><td>IP</td></tr><tr><td>BINARY_VECTOR</td><td>8 – (32 768x8)</td><td>HAMMING、JACCARD</td><td>HAMMING</td></tr></tbody></table></div><ul><li>FLOAT/FLOAT16/BFLOAT16 VECTOR:<ul><li>维度范围: 2-32768</li><li>支持: COSINE, L2, IP</li><li>默认: COSINE</li></ul></li><li>SPARSE FLOAT VECTOR:<ul><li>无需指定维度</li><li>支持: IP、BM25(仅限全文检索)</li><li>默认: IP</li></ul></li><li>BINARY VECTOR:<ul><li>维度范围: 8-(32768×8)</li><li>支持: HAMMING, JACCARD</li><li>默认: HAMMING</li></ul></li></ul><h2 id="各种度量类型的取值范围"><a href="#各种度量类型的取值范围" class="headerlink" title="各种度量类型的取值范围"></a>各种度量类型的取值范围</h2><div class="table-container"><table><thead><tr><th>度量类型</th><th>相似度/距离特性</th><th>数值范围</th></tr></thead><tbody><tr><td><strong>L2</strong> (欧氏距离)</td><td>值越小，相似度越高</td><td>[0,∞)</td></tr><tr><td><strong>IP</strong> (内积)</td><td>值越大，相似度越高</td><td>[−1,1]</td></tr><tr><td><strong>COSINE</strong> (余弦)</td><td>值越大，相似度越高</td><td>[−1,1]</td></tr><tr><td><strong>JACCARD</strong></td><td>值越小，相似度越高</td><td>[0,1]</td></tr><tr><td><strong>HAMMING</strong></td><td>值越小，相似度越高</td><td>[0,dim)</td></tr><tr><td><strong>BM25</strong></td><td>值越大，相似度越高</td><td>[0,∞)</td></tr></tbody></table></div><p>关键注意: 不同度量类型的数值范围差异很大，如欧式距离可能大于1是正常的</p><h1 id="ANN搜索"><a href="#ANN搜索" class="headerlink" title="ANN搜索"></a>ANN搜索</h1><p>Milvus的ANN搜索是一种高效的向量相似度搜索方法，它通过预构建的索引文件来加速搜索过程。与kNN搜索相比，ANN搜索不需要遍历所有向量，而是通过索引快速定位可能包含最相似向量的子集，从而大大提高了搜索效率。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822101723764.png" alt="image-20250822101723764" style="zoom:67%;" /></p><ul><li>核心原理: 通过预构建的索引文件加速搜索过程，不需要遍历所有向量，而是快速定位可能包含最相似向量的子集</li><li>与kNN区别: ANN(Approximate Nearest Neighbor)是近似搜索，效率高但结果不一定完美；kNN需要精确遍历所有数据</li><li>主要特点:<ul><li>支持单向量和批量向量搜索</li><li>可在特定分区内进行搜索</li><li>支持多种相似度度量方式(L2、IP、COSINE等)</li><li>可通过过滤条件、范围搜索增强效果</li><li>支持分页查询和输出字段控制</li></ul></li></ul><h2 id="过滤搜索"><a href="#过滤搜索" class="headerlink" title="过滤搜索"></a>过滤搜索</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822102907414.png" alt="image-20250822102907414" style="zoom:67%;" /></p><h3 id="标准过滤"><a href="#标准过滤" class="headerlink" title="标准过滤"></a>标准过滤</h3><ul><li>原理: 先执行过滤条件筛选数据，再在过滤后的数据集上进行搜索</li><li>适用场景: 过滤条件简单且能显著减少数据量的情况</li></ul><h3 id="迭代过滤"><a href="#迭代过滤" class="headerlink" title="迭代过滤"></a>迭代过滤</h3><ul><li>原理: 边搜索边过滤，动态判断是否满足条件</li><li>优势: 处理复杂过滤条件时可能更高效</li><li>实现: 通过设置”hints”: “iterative filter”参数启用</li></ul><h2 id="范围搜索"><a href="#范围搜索" class="headerlink" title="范围搜索"></a>范围搜索</h2><p>范围搜索是在 ANN 搜索结果的基础上，进一步按相似度（或距离）阈值进行筛选，将符合条件的向量返回。</p><p>通过两个参数 radius（外圈半径）和 range_filter（内圈半径）构成一对同心圆，返回落在这两个圆之间（或内外圈定义区间内）的所有向量</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822103507782.png" alt="image-20250822103507782" style="zoom:67%;" /></p><ul><li>原理: 在ANN结果基础上，按相似度阈值进一步筛选</li><li>参数:<ul><li>radius: 外圈半径</li><li>range_filter: 内圈半径</li></ul></li><li>效果: 返回落在两个半径定义的环形区域内的向量</li></ul><h2 id="分组搜索"><a href="#分组搜索" class="headerlink" title="分组搜索"></a>分组搜索</h2><p>目的：在基于向量的相似度搜索结果中，按某个标量字段（如 docId、category）分组，以提高结果多样性，避免同一组内多个相似片段抢占 Top-K。</p><p>场景举例：对拆分成多个段落的文档做检索，希望最终返回最相关的文档列表，而不是返回同一文档中多个相似段落。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822103728847.png" alt="image-20250822103728847" style="zoom:67%;" /></p><p>流程</p><ol><li>ANN 检索 对整个集合执行近似最近邻搜索，得到若干最相似实体（chunk）。</li><li>按字段分组 将检索结果按 group_by_field 指定的字段值（如 docId）分桶。</li><li>选取每组 TopN 默认从每个组中取最相似的 1条； 如需更多，可通过 group_size（每组返回条数）和 strict_group_size（是否严格保证每组条数）进行控制。</li><li>整体汇总 最终按组级 TopK（limit）选出若干组，并返回各组内按相似度排序的实体。</li></ol><h2 id="混合搜索"><a href="#混合搜索" class="headerlink" title="混合搜索"></a>混合搜索</h2><p>同时对同一实体中的多种向量字段（如稠密向量 dense 与稀疏向量 sparse）分别执行 ANN 搜索，将各自返回的 Top-K 结果按得分或排名策略重新融合（rerank），最后输出一个统一的结果集。</p><p>目的：融合多模态或多视角特征，提高检索的准确性和鲁棒性。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822103942383.png" alt="image-20250822103942383" style="zoom:67%;" /></p><p>实现步骤：</p><ul><li>Embedding 生成<ul><li>稠密向量（dense）：用 BERT、CLIP、其他深度模型生成。</li><li>稀疏向量（sparse）：用 BM25、SPLADE、BGE-M3 等算法或 Milvus Function 生成。</li></ul></li><li>创建集合并定义多向量字段<ul><li>在建表时同时包括 FLOAT_VECTOR（稠密）</li><li>和 SPARSE_FLOAT_VECTOR（稀疏）字段</li><li>并分别建立索引</li></ul></li><li>插入数据<ul><li>同一条记录同时插入两种向量。</li><li>发起多次基础 ANN 搜索</li><li>针对每个向量字段构造一个AnnSearchRequest</li></ul></li><li>选择重排序（Reranking）策略<ul><li>WeightedRanker：可为每个向量字段分配权重，强化某些字段的重要性</li><li>RRFRanker（Reciprocal Rank Fusion）：平衡融合，默认参数 k 可调</li></ul></li><li>执行 Hybrid Search<ul><li>limit 决定最终输出的 Top-K 条融合结果。</li></ul></li></ul><h2 id="BM25-全文关键字检索"><a href="#BM25-全文关键字检索" class="headerlink" title="BM25 全文关键字检索"></a>BM25 全文关键字检索</h2><p>通过 BM25 对原始文本进行关键词匹配排序，弥补语义向量检索可能忽略精确词条匹配的不足。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250822104341926.png" alt="image-20250822104341926" style="zoom:67%;" /></p><p>优势：</p><ul><li>接受原始文本输入，无需手动生成向量；</li><li>自动将文本分词、映射为稀疏向量（SPARSE_FLOAT_VECTOR）；</li><li>适合需精确命中关键术语的场景，如法律、医药、配置文档等；</li><li>与稠密向量检索结合，可在 RAG 中实现“语义 + 关键词”双保险。</li></ul><p>应用: 可与稠密向量检索结合实现”语义+关键词”双保险</p><h2 id="Text-Match-精确文本匹配"><a href="#Text-Match-精确文本匹配" class="headerlink" title="Text Match: 精确文本匹配"></a>Text Match: 精确文本匹配</h2><p>精确匹配：基于倒排索引查找包含指定词条的文档，不计算相关度分数，仅返回命中实体。<br>底层引擎：集成 Tantivy ，针对每个 VARCHAR 字段建立倒排索引，按词条快速定位。</p><ul><li><p>原理: 基于倒排索引查找包含指定词条的文档</p></li><li><p>特点:</p><ul><li>不计算相关度分数，仅返回命中实体</li><li>底层集成Tantivy引擎</li></ul></li><li><p>查询语法:</p><ul><li><p>包含 machine 或 deep: TEXT_MATCH(text, ‘machine deep’)</p></li><li><p>包含 machine 且包含 deep: TEXT_MATCH(text, ‘machine’) AND TEXT_MATCH(text, ‘deep’)</p></li><li><p>包含 machine、learning，但不包含 deep: </p><p>TEXT_MATCH(text, ‘machine’)<br>AND TEXT_MATCH(text, ‘learning’)<br>AND NOT TEXT_MATCH(text, ‘deep’)</p></li></ul></li></ul><h1 id="搜索和查询"><a href="#搜索和查询" class="headerlink" title="搜索和查询"></a>搜索和查询</h1><ul><li>本质区别：<ul><li>搜索：基于向量相似度，通过距离度量找到相近向量（如余弦相似度）</li><li>查询：基于元数据（标量数据）直接定位实体，与向量无关</li></ul></li><li>典型场景：<ul><li>搜索适用于”找到相似内容”（如推荐系统）</li><li>查询适用于”精确查找记录”（如数据库检索）</li></ul></li></ul><div class="table-container"><table><thead><tr><th>方法</th><th>作用</th><th>输入</th><th>输出</th><th>场景</th></tr></thead><tbody><tr><td><strong>Get</strong></td><td>根据主键查询指定实体</td><td>collection_name, ids</td><td>指定主键对应的所有字段实体</td><td>已知 ID 时最快速地获取完整记录</td></tr><tr><td><strong>Query</strong></td><td>根据自定义过滤表达式查询指定数量的实体</td><td>collection_name, filter, limit</td><td>满足条件最多 limit 个实体</td><td>需要一次性拿到部分满足条件的结果</td></tr><tr><td><strong>QueryIterator</strong></td><td>根据自定义过滤表达式按批次 (分页) 遍历所有实体</td><td>collection_name, expr, batch_size</td><td>通过 iterator.next() 分批返回实体</td><td>需要遍历所有满足条件的实体 (流式或分页处理场景)</td></tr></tbody></table></div><h2 id="Get和Query"><a href="#Get和Query" class="headerlink" title="Get和Query"></a>Get和Query</h2><ul><li>核心功能：<ul><li>Get：通过主键ID快速获取完整记录（如查询ID为0/1/2的记录）</li><li>Query：通过过滤表达式获取限定数量的结果（如color=”红色”取前5条）</li></ul></li><li>参数特点：<ul><li>Get需明确指定ids字段列表</li><li>Query支持filter表达式和limit限制（示例：color like “color_1%”）</li></ul></li></ul><h2 id="QueryIterator"><a href="#QueryIterator" class="headerlink" title="QueryIterator"></a>QueryIterator</h2><ul><li>流式处理：<ul><li>通过iterator.next()分批返回结果（类似OpenAI API的流式响应）</li><li>每批数量由batch_size参数控制（如每次返回5条记录）</li></ul></li><li>适用场景：<ul><li>处理大规模结果集（避免内存溢出）</li><li>需要渐进式展示结果的场景（如分页加载）</li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第二十二讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库索引</title>
    <link href="https://jinglv.github.io/2025/08/19/ai/rag/21-vector-db-index/"/>
    <id>https://jinglv.github.io/2025/08/19/ai/rag/21-vector-db-index/</id>
    <published>2025-08-18T16:00:00.000Z</published>
    <updated>2025-08-19T07:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Milvus中的常用索引介绍"><a href="#Milvus中的常用索引介绍" class="headerlink" title="Milvus中的常用索引介绍"></a>Milvus中的常用索引介绍</h1><h2 id="FLAT-索引-–-全量扫描"><a href="#FLAT-索引-–-全量扫描" class="headerlink" title="FLAT 索引 – 全量扫描"></a>FLAT 索引 – 全量扫描</h2><p>每个查询向量直接与数据集中的每个向量进行比较，无需任何高级预处理或数据结构化。</p><p>工作原理：全量扫描每个查询向量，直接与数据集中的每个向量进行比较</p><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;your_vector_field_name&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;FLAT&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    params=&#123;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>特点：<ul><li>无预处理：数据加载时全部加载到内存，没有任何结构化处理</li><li>精准度高：能达到embedding模型给出的上限，是向量检索的”天花板”</li><li>适用场景：适合数据量在几万到几十万条的情况</li><li>性能局限：百万/千万级数据时延迟过高，不推荐使用</li></ul></li></ul><h2 id="IVF-FLAT-倒排文件"><a href="#IVF-FLAT-倒排文件" class="headerlink" title="IVF_FLAT - 倒排文件"></a>IVF_FLAT - 倒排文件</h2><p>当对数据集进行聚类可以减少搜索空间，并且有足够的内存来存储聚类数据时，快速查询响应并保证高精度。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820095803094.png" alt="image-20250820095803094" style="zoom:67%;" /></p><ul><li>核心思想：通过聚类减少搜索空间，相似向量聚为一类(类似：一张照片中，将人、猫、狗分别进行分区)</li><li>工作流程：<ul><li>使用k-means算法将向量聚类（nlist指定聚类数量）</li><li>查询时计算与各聚类中心的距离</li><li>只在最近的nprobe个聚类中进行搜索</li><li>返回最相似的结果</li></ul></li><li>关键参数：<ul><li>nlist：指定聚类分区数量（如64/80）</li><li>nprobe：搜索时考虑的聚类数量（如3/5）</li></ul></li><li>优势：<ul><li>效率提升：相比FLAT可快nlist倍（如分成80类快80倍）</li><li>灵活性：通过调整nprobe平衡精度与性能</li></ul></li><li>局限性：精度略低于FLAT，但通过增加nprobe可接近</li></ul><p>创建索引代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;IVF_FLAT&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;nlist&quot;</span>: <span class="number">64</span>  <span class="comment"># 设置聚类数量</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="IVF-PQ：倒排文件与乘积量化"><a href="#IVF-PQ：倒排文件与乘积量化" class="headerlink" title="IVF_PQ：倒排文件与乘积量化"></a>IVF_PQ：倒排文件与乘积量化</h2><p>Inverted File with Product Quantization，是一种结合索引和压缩的混合方法。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820101017610.png" alt="image-20250820101017610" style="zoom:80%;" /></p><ul><li>核心原理: 结合倒排索引和乘积量化的混合方法，通过维度分解和子空间量化实现高效压缩检索</li><li>工作流程:<ul><li>维度分解: 将高维向量分解为m个等长子向量，m值控制分解粒度和压缩率</li><li>码本生成: 每个子空间用K-means聚类生成$2^n$﻿位质心码本（如nbits=8时码本含256个质心）</li><li>矢量量化: 子向量通过最近邻搜索匹配对应子空间的质心</li><li>压缩表示: 最终编码由m个子空间索引组成，存储需求从$D×32$﻿位降至$m×nbits$﻿位</li></ul></li><li>量化本质:<ul><li>压缩原理: 通过降低参数精度（如64位浮点→8位整型）减少存储空间</li><li>性能影响: 显著提升检索速度但会损失精度，适用于对速度敏感、精度要求宽松的场景</li></ul></li><li>关键参数:<ul><li>k: 每个子空间的质心数，计算公式﻿$k=2^{nbits}$﻿</li><li>m: 原始向量分割的子向量数量，需满足$dim/m≥2$﻿</li><li>nbits: 质心索引编码位数（典型值为8位）</li></ul></li></ul><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;IVF_PQ&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;nlist&quot;</span>: <span class="number">64</span>,  <span class="comment"># 聚类中心数量，通常设置为 4*sqrt(n)，n 为向量数量</span></span><br><span class="line">        <span class="string">&quot;m&quot;</span>: <span class="number">32</span>,  <span class="comment"># 向量被分割的子向量数量，通常为 dim/m &gt;= 2，这里 128/32=4</span></span><br><span class="line">        <span class="string">&quot;nbits&quot;</span>: <span class="number">8</span>  <span class="comment"># 每个子向量的编码位数，通常为 8 位</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>参数配置:<ul><li>nlist=64: 聚类中心数量，建议设为﻿$4×\sqrt{n}$﻿（n为向量总数）</li><li>m=32: 128维向量分割为32个子向量（满足128/32=4）</li><li>nbits=8: 每个子向量8位编码，产生256个质心（﻿$2^8$﻿）</li></ul></li><li>实现特点:<ul><li>小数据集难以体现性能优势，适合大规模高维向量场景</li><li>相比原始存储（如1536维32位浮点向量），压缩后仅需$m×nbits$﻿存储空间</li></ul></li></ul><h2 id="HNSW：分层可导航小世界"><a href="#HNSW：分层可导航小世界" class="headerlink" title="HNSW：分层可导航小世界"></a>HNSW：分层可导航小世界</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820101448765.png" alt="image-20250820101448765" style="zoom:67%;" /></p><p><strong>分层可导航小世界 (HNSW)</strong> 算法构建了一个多层图，有点像具有不同缩放级别的地图。底层包含所有数据点，而上层则由从下层采样的数据点子集组成。</p><p>在这个层次结构中，每一层都包含代表数据点的节点，这些节点通过指示其接近度的边连接起来。较高的层级提供长距离跳跃，以快速接近目标，而较低的层级则支持细粒度搜索，以获得最准确的结果。</p><ol><li><strong>入口点</strong>：搜索从顶层的固定入口点开始，该入口点是图中预先确定的节点。</li><li><strong>贪婪搜索</strong>：该算法贪婪地移动到当前层的最近邻，直到无法再接近查询向量。上层起到导航的作用，充当粗略的过滤器，为下层更精细的搜索找到潜在的入口点。</li><li><strong>层下降</strong>：一旦在当前层达到局部最小值，算法就会使用预先建立的连接跳转到较低层，并重复贪婪搜索。</li><li><strong>最终细化</strong>：该过程持续直至到达底层，其中最终细化步骤识别最近的邻居。</li></ol><p>总结：</p><ul><li>算法架构: 多层图结构，类似多分辨率地图<ul><li>底层: 包含全部数据点</li><li>上层: 下层数据点的抽样子集，层级越高数据点越稀疏</li></ul></li><li>搜索机制:<ul><li>入口点: 从顶层固定入口点启动搜索</li><li>贪婪搜索: 逐层寻找最近邻，上层实现快速粗筛，下层进行精细搜索</li><li>层间跳转: 到达局部最优后降层继续搜索，直至底层完成最终匹配</li></ul></li><li>核心参数:<ul><li>M: 节点最大连接数（控制图密度）</li><li>efConstruction: 构建时的候选邻居数（影响索引质量）</li></ul></li><li>性能特点:<ul><li>精度与效率平衡良好，适合需要高准确率的场景</li><li>通过层级结构实现类似雷达的渐进式搜索，逐步扩大搜索范围</li></ul></li></ul><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,</span><br><span class="line">    index_type=<span class="string">&quot;HNSW&quot;</span>,</span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span>,</span><br><span class="line">    params=&#123;</span><br><span class="line">        <span class="string">&quot;M&quot;</span>: <span class="number">64</span>,  <span class="comment"># 最大邻居数</span></span><br><span class="line">        <span class="string">&quot;efConstruction&quot;</span>: <span class="number">100</span>  <span class="comment"># 构建时的候选邻居数</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="DISKANN（磁盘版图索引）"><a href="#DISKANN（磁盘版图索引）" class="headerlink" title="DISKANN（磁盘版图索引）"></a>DISKANN（磁盘版图索引）</h2><p>基于 Vamana 图（类似 HNSW），将图结构和压缩向量存放在 SSD 上；在内存中只保留元数据。</p><p><strong>查询流程</strong>：结合 PQ 压缩和图遍历，从磁盘 I/O 中读入必要节点。</p><p><strong>优缺点</strong></p><ul><li>✔ 适合海量数据：可支撑十亿级向量</li><li>✔ RAM 占用低：仅元数据在内存</li><li>✘ 延迟受 SSD IOPS 限制：对 I/O 性能依赖高</li></ul><p><strong>适用场景</strong></p><ul><li>数据量远超可用内存</li><li>对响应时延有一定容忍（或 SSD IOPS 足够高）</li></ul><p>总结：</p><ul><li>核心思想：基于Vamana图（类似HNSW）结构，将图结构和压缩向量存放在SSD上，内存中仅保留元数据</li><li>查询机制：结合PQ压缩和图遍历技术，按需从磁盘I/O读取必要节点</li><li>优势特点：<ul><li>海量支持：可处理十亿级向量数据</li><li>内存优化：仅需存储元数据，RAM占用极低</li></ul></li><li>性能局限：<ul><li>I/O依赖：查询延迟受SSD IOPS限制</li><li>速度折衷：相比纯内存方案存在性能差距</li></ul></li><li>适用场景：<ul><li>数据规模远超可用内存容量</li><li>对响应时延有一定容忍度（或具备高性能SSD）</li></ul></li></ul><p>创建索引代码示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">index_params = MilvusClient.prepare_index_params()</span><br><span class="line"></span><br><span class="line">index_params.add_index(</span><br><span class="line">    field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    metric_type=<span class="string">&quot;L2&quot;</span>,  <span class="comment"># 支持 L2、IP 或 COSINE</span></span><br><span class="line">    index_type=<span class="string">&quot;DISKANN&quot;</span>,  <span class="comment"># 使用 DiskANN 索引</span></span><br><span class="line">    index_name=<span class="string">&quot;vector_index&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>索引创建步骤：<ul><li>准备索引参数：使用prepare_index_params()方法初始化索引参数对象</li><li>添加索引配置：通过add_index()方法设置字段名、度量类型和索引类型<ul><li>支持三种度量类型：$L2$﻿距离、内积(、$IP$﻿)和余弦相似度($COSINE$﻿)</li><li>索引类型需明确指定为”DISKANN”</li></ul></li><li>执行创建操作：调用create_index()方法并传入集合名称和索引参数</li></ul></li><li>DiskANN特点：<ul><li>硬盘存储：索引数据直接存储在硬盘而非内存，适合大规模数据集</li><li>简单配置：只需在索引类型参数中指定”DISKANN”即可启用</li><li>自动运行：设置完成后系统会自动在硬盘上构建和运行索引</li></ul></li><li>注意事项：<ul><li>索引创建是同步操作，建议设置sync=True等待完成</li><li>创建前需确保集合已存在且包含向量数据</li><li>不同度量类型会影响搜索结果，需根据应用场景选择</li></ul></li></ul><h1 id="索引和向量类型以及度量标准相关"><a href="#索引和向量类型以及度量标准相关" class="headerlink" title="索引和向量类型以及度量标准相关"></a>索引和向量类型以及度量标准相关</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820102716154.png" alt="image-20250820102716154" style="zoom:50%;" /></p><ul><li>索引体系：<ul><li>浮点向量：支持FLAT/IVF_FLAT/IVF_SQ8/IVF_PQ/HNSW/DISKANN等</li><li>稀疏向量：仅支持SPARSE_INVERTED_INDEX</li><li>二进制向量：提供BIN_FLAT/BIN_IVF_FLAT专用索引</li></ul></li><li>度量标准：<ul><li>浮点向量：适用$L_2$﻿/IP/COSINE三种距离</li><li>稀疏向量：限定IP/BM25相似度</li><li>二进制向量：专用JACCARD/HAMMING距离</li></ul></li><li>组合规律：<ul><li>浮点向量索引体系最丰富（含GPU加速版本）</li><li>二进制向量索引采用”BIN_”前缀标识</li><li>稀疏向量仅支持倒排索引结构</li></ul></li></ul><h1 id="各种类型索引的组合"><a href="#各种类型索引的组合" class="headerlink" title="各种类型索引的组合"></a>各种类型索引的组合</h1><div class="table-container"><table><thead><tr><th>名称</th><th>分类</th><th>适用场景</th><th>嵌入类型</th></tr></thead><tbody><tr><td>FLAT</td><td>普通索引</td><td>数据集规模相对较小需要100%的召回率</td><td>浮点嵌入</td></tr><tr><td>IVF_FLAT</td><td>基于树的索引</td><td>查询速度要求高同时需要尽可能高的召回率<br />查询速度非常快内存资源有限</td><td>浮点嵌入</td></tr><tr><td>IVF_SQ8</td><td>基于量化的索引</td><td>可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td></td><td></td><td>查询速度较快内存资源有限</td><td></td></tr><tr><td>IVF_PQ</td><td>基于量化的索引</td><td>可接受在召回率上有轻微折中<br /></td><td>查询速度非常快对召回率要求高浮点嵌入</td></tr><tr><td>SCANN</td><td>基于量化的索引</td><td>查询速度非常快对召回率要求高内存资源充足</td><td>浮点嵌入</td></tr><tr><td>HNSW</td><td>基于图的索引</td><td>查询速度非常快对召回率要求高<br />内存资源较为充足</td><td>浮点嵌入</td></tr><tr><td>HNSW_SQ</td><td>基于图的索引</td><td>查询速度非常快内存资源有限<br />可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td>HNSW_PQ</td><td>基于图的索引</td><td>查询速度中等内存资源非常有限<br />可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td>HNSW_PRQ</td><td>基于图的索引</td><td>查询速度中等内存资源非常有限<br />可接受在召回率上有轻微折中</td><td>浮点嵌入</td></tr><tr><td>BIN_FLAT</td><td>普通索引</td><td>数据集规模较小<br />需要精确的搜索结果无须压缩</td><td>二进制嵌入</td></tr><tr><td>BIN_IVF_FLAT</td><td>基于树的索引</td><td>需要高查询速度对召回率要求高<br />数据集规模较大</td><td>二进制嵌入</td></tr><tr><td>SPARSE_INVERTED_INDEX</td><td>普通索引</td><td>数据集规模较小需要100%的召回率<br />适用于稀疏向量的检索</td><td>稀疏嵌入</td></tr></tbody></table></div><ul><li>FLAT索引：<ul><li>分类：普通索引</li><li>适用场景：数据集规模较小且需要100%召回率</li><li>嵌入类型：浮点嵌入</li><li>特点：全量精度最高，适合对召回率要求严格的场景</li></ul></li><li>IVF_FLAT索引：<ul><li>分类：基于树的索引</li><li>适用场景：查询速度要求高同时需要尽可能高的召回率</li><li>嵌入类型：浮点嵌入</li><li>特点：通过聚类(树状结构)加速查询，适合大规模数据</li></ul></li><li>量化索引系列：<ul><li>包含IVF_SQ8/IVF_PQ/SCANN等</li><li>共同特点：通过有损压缩减少内存占用</li><li>取舍：在查询速度和内存占用上有优势，但会牺牲部分召回率</li><li>典型应用：IVF_SQ8适合内存紧张场景，SCANN适合资源充足但对召回率要求高的场景</li></ul></li><li>图索引系列：<ul><li>包含HNSW/HNSW_SQ/HNSW_PQ等</li><li>共同特点：基于图网络结构实现快速导航</li><li>优势：HNSW在速度和召回率上表现优异，适合资源充足场景</li><li>变体：带量化的版本(HNSW_SQ等)在内存占用和性能间取得平衡</li></ul></li><li>二进制索引：<ul><li>BIN_FLAT：适合小规模二进制数据精确搜索</li><li>BIN_IVF_FLAT：适合大规模二进制数据高速查询</li><li>特点：专门处理二进制嵌入，不进行压缩</li></ul></li><li>稀疏索引：<ul><li>SPARSE_INVERTED_INDEX：专为稀疏向量设计</li><li>特点：保持100%召回率，适合小规模稀疏数据</li></ul></li></ul><h1 id="索引选型速览"><a href="#索引选型速览" class="headerlink" title="索引选型速览"></a>索引选型速览</h1><ul><li>精度优先：<ul><li>选择FLAT索引</li><li>特点：保证100%召回率，适合对精度要求极高的场景</li></ul></li><li>低延迟场景：<ul><li>选择HNSW系列</li><li>适用条件：top-K较小且内存资源充足</li><li>优势：查询速度非常快</li></ul></li><li>海量数据处理：<ul><li>选择IVF_FLAT</li><li>特点：适合大规模数据和大top-K场景</li><li>原理：通过聚类减少搜索范围</li></ul></li><li>内存优化方案：<ul><li>IVF_SQ8或IVF_PQ</li><li>特点：量化压缩减少内存占用</li><li>取舍：会轻微影响召回率</li></ul></li><li>GPU加速：<ul><li>GPU_IVF_FLAT/GPU_IVF_PQ</li><li>优势：利用GPU并行计算能力加速</li></ul></li><li>超大数据集：<ul><li>DISKANN</li><li>特点：数据量超过内存容量时使用</li><li>原理：基于磁盘的索引结构</li></ul></li></ul><h1 id="Milvus中索引的工作机制"><a href="#Milvus中索引的工作机制" class="headerlink" title="Milvus中索引的工作机制"></a>Milvus中索引的工作机制</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250820103439677.png" alt="image-20250820103439677" style="zoom:50%;" /></p><p>Milvus 的向量索引采用“粗—快—准”三层分层架构，以在检索效率和精度之间取得最佳平衡：</p><ol><li><strong>数据结构（粗过滤）</strong>— 例如 IVF 将向量按质心划分存储桶，或 HNSW构建分层图网络，通过只扫描与查询向量质心或邻域相关的子集，实现对大规模数据的快速过滤。</li><li><strong>量化（加速计算）</strong>— 通过 SQ8、PQ 等有损压缩，将向量从 32 位浮点压缩到 8 位或更低维度，大幅减少内存和计算开销，快速计算候选集距离。</li><li><strong>精炼器（精准重排</strong>）— 对量化后的候选结果（topK×扩展率）使用FP32 精度重新计算距离，对排序进行微调，弥补量化带来的误差，确保最终返回的 topK 结果高质量、低延迟。</li></ol><p>总结：</p><ul><li>三层架构：<ul><li>数据结构层：负责粗过滤，如IVF的聚类或HNSW的图结构</li><li>量化层：可选，通过SQ8/PQ等算法压缩数据</li><li>精炼器：对候选结果进行精准重排</li></ul></li><li>数据结构层：<ul><li>核心功能：组织数据以加速检索</li><li>实现方式：聚类(IVF)或图网络(HNSW)</li><li>特点：只扫描相关子集，大幅提高效率</li></ul></li><li>量化技术：<ul><li>目的：减少内存和计算开销</li><li>方法：将32位浮点压缩到8位或更低</li><li>影响：会引入误差，但显著提升速度</li></ul></li><li>精炼器机制：<ul><li>工作流程：先获取topK×扩展率的候选集，再用FP32精度重算距离</li><li>优势：弥补量化误差，确保最终结果质量</li><li>特点：类似检索后处理，提升排序准确性</li></ul></li><li>设计理念：<ul><li>“粗-快-准”分层架构</li><li>在检索效率和精度间取得最佳平衡</li><li>内部自动完成多阶段优化</li></ul></li></ul><h1 id="性能的权衡"><a href="#性能的权衡" class="headerlink" title="性能的权衡"></a>性能的权衡</h1><p><strong>构建时间 vs QPS vs 召回率</strong></p><ul><li>基于图（如 HNSW）通常能提供最高的 QPS 和低延迟，尤其适合 Top-K 较小（≤2 000）或对高召回率有需求的场景。</li><li>IVF 系列（IVF-PQ/SQ8 等）在 Top-K 较大（＞2 000）时更高效，能够通过聚类分桶减少检索范围。</li><li>在相同压缩率下，PQ 比 SQ8 召回率更高，但 SQ8 的查询速度略胜一筹。</li><li>使用 DiskANN（磁盘＋PQ 量化＋Vamana 图）可处理远超内存容量的海量数据，但会受制于磁盘 IOPS。</li></ul><p><strong>容量与内存映射（mmap</strong>）</p><ul><li>如果所有向量数据都能装进内存，可优先选用内存索引（HNSW、IVF＋精炼）并配合 mmap 优化大文件访问。</li><li>如果只有部分数据能进内存，DiskANN 是更稳的低延迟方案；IVFPQ/SQ8＋mmap 则在成本和精度间提供折中。</li></ul><p><strong>过滤率（Filter Rate）与召回策略</strong></p><ul><li>过滤率 &lt; 85%：图索引效果最佳</li><li>85% ≤ 过滤率 ≤ 95%：IVF 系列更合适</li><li>过滤率 &gt; 98%：暴力搜索（FLAT）可保证最高召回</li></ul><p><strong>Top-K 大小影响</strong></p><ul><li>小 top-K、高召回：基于图</li><li>大 top-K（占数据集 ≥ 1%）：IVF 系列</li><li>极高召回率（＞ 99%）：FLAT＋GPU 重算</li></ul><p>总结：</p><ol><li>构建时间 vs QPS vs 召回率<ul><li>基于图的索引优势：在Top-K较小（﻿$\leq 2000$﻿）或需要高召回率时，HNSW等图结构能提供最高QPS和最低延迟。</li><li>IVF系列适用场景：当Top-K较大（$&gt; 2000$﻿）时，IVF-PQ/SQ8通过聚类分桶减少检索范围更高效。</li><li>PQ与SQ8对比：相同压缩率下PQ召回率更高，但SQ8查询速度更快。</li><li>DiskANN特点：采用磁盘存储+PQ量化+Vamana图结构可处理超内存数据，但性能受磁盘IOPS限制。</li></ul></li><li>容量与内存映射<ul><li>全内存场景：优先选择HNSW或IVF+精炼索引，配合mmap优化大文件访问。</li><li>部分内存场景：<ul><li>DiskANN是低延迟稳定方案</li><li>VFPQ/SQ8+mmap在成本与精度间提供折中方案</li></ul></li></ul></li><li>过滤率与召回策略<ul><li>低过滤率（&lt;85%）：图索引效果最佳</li><li>中过滤率（85%-95%）：IVF系列更合适</li><li>极高过滤率（&gt;98%）：暴力搜索(FLAT)可保证最高召回</li></ul></li><li>Top-K大小影响<ul><li>小top-K高召回：基于图结构</li><li>大top-K（≥数据集1%）：IVF系列</li><li>极高召回率（&gt;99%）：FLAT+GPU重算</li></ul></li></ol><h1 id="案例：内存估算（以-1-百万条-128-维向量为例）"><a href="#案例：内存估算（以-1-百万条-128-维向量为例）" class="headerlink" title="案例：内存估算（以 1 百万条 128 维向量为例）"></a>案例：内存估算（以 1 百万条 128 维向量为例）</h1><div class="table-container"><table><thead><tr><th>索引类型</th><th>组成</th><th>内存消耗</th></tr></thead><tbody><tr><td>IVF-PQ</td><td>质心(2 000x128x4 B)=1 MB<br/>簇分配(1 000 000x2 B)=2 MB<br/>PQ(1 000 000x8 B)=8 MB</td><td>≈11 MB</td></tr><tr><td>IVF-PQ + 10% 精炼</td><td>IVF-PQ(11 MB)+精炼缓存(1 000 000x128 x 0.1 x4 B)=51.2 MB</td><td>≈62 MB</td></tr><tr><td>IVF-SQ8</td><td>质心(1 MB)+簇分配(2 MB)+SQ8(1 000 000x128 x 1 B)=128 MB</td><td>≈131 MB</td></tr><tr><td>IVF-FLAT</td><td>质心(1 MB)+簇分配(2 MB)+原始向量(1 000 000x128x4 B)=512 MB</td><td>≈515 MB</td></tr><tr><td>HNSW</td><td>图结构(1 000 000x32x4 B)=128 MB<br/>原始向量=512 MB</td><td>≈640 MB</td></tr><tr><td>HNSW-PQ</td><td>图结构(128 MB)+PQ(1 000 000x8 B)=8 MB</td><td>≈136 MB</td></tr></tbody></table></div><ul><li>IVF-PQ：11MB（质心1MB + 簇分配2MB + PQ编码8MB）</li><li>IVF-PQ+10%精炼：62MB（基础11MB + 精炼缓存51.2MB）</li><li>IVF-SQ8：131MB（质心1MB + 簇分配2MB + SQ8编码128MB）</li><li>IVF-FLAT：515MB（含原始向量存储）</li><li>HNSW：&lt;640MB（图结构128MB + 原始向量512MB）</li><li>HNSW-PQ：136MB（图结构128MB + PQ编码8MB）</li><li>估算方法：根据实际数据量参照表格比例计算，需结合可用内存选择合适索引类型。工业项目中需查阅文档获取更精确的内存映射算法参数。</li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第二十一讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库介绍</title>
    <link href="https://jinglv.github.io/2025/08/18/ai/rag/19-vector-db/"/>
    <id>https://jinglv.github.io/2025/08/18/ai/rag/19-vector-db/</id>
    <published>2025-08-17T16:00:00.000Z</published>
    <updated>2025-08-18T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向量存储"><a href="#向量存储" class="headerlink" title="向量存储"></a>向量存储</h1><h2 id="结构化数据vs向量数据"><a href="#结构化数据vs向量数据" class="headerlink" title="结构化数据vs向量数据"></a>结构化数据vs向量数据</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250818104425937.png" alt="image-20250818104425937" style="zoom:50%;" /></p><ul><li>结构化数据存储：通过数据库表结构存储，使用主键和外键相互链接形成复杂schema</li><li>非结构化数据转换：文本/图片/音频等通过嵌入模型转化为数字形式的向量</li><li>存储方式差异：<ul><li>结构化：传统SQL数据库表形式（如SQL Server）</li><li>向量数据：通过嵌入模型转换后存储在向量数据库</li></ul></li></ul><h2 id="简单的向量存储"><a href="#简单的向量存储" class="headerlink" title="简单的向量存储"></a>简单的向量存储</h2><p>使用LlamaIndex的index.storage_context.persist(persist_dir=”saved_index”) 将向量索引保存到磁盘</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> llama_index.core.node_parser <span class="keyword">import</span> SentenceSplitter</span><br><span class="line"></span><br><span class="line">text_splitter = SentenceSplitter(chunk_size=<span class="number">512</span>, chunk_overlap=<span class="number">10</span>)</span><br><span class="line">nodes = text_splitter.get_nodes_from_documents(documents)</span><br><span class="line">index = VectorStoreIndex(nodes, embed_model=embed_model) <span class="comment"># 从nodes中生成Index</span></span><br><span class="line"><span class="comment"># 保存索引到磁盘</span></span><br><span class="line">index.storage_context.persist(persist_dir=<span class="string">&quot;saved_index&quot;</span>)</span><br></pre></td></tr></table></figure><p>此写法会在当前目录下创建一个目录为saved_index，将向量索引的内容存储到该目录下。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250818111917272.png" alt="image-20250818111917272" style="zoom:67%;" /></p><ul><li>本地存储实现：<ul><li>使用storage_context.persist(persist_dir=”saved_index”)语句</li><li>生成5个核心文件：<ul><li>default_vector_store.json（向量数据）</li><li>docstore.json（文档关系）</li><li>graph_store.json（图结构）</li><li>image_vector_store.json（图像向量）</li><li>index_store.json（索引结构）</li></ul></li></ul></li><li>文件功能：<ul><li>index_store.json：记录所有节点ID和索引元数据</li><li>docstore.json：存储文档块间的前后关系（如relationship字段）</li></ul></li><li>节点关系表示：<ul><li>通过node_id和node_type字段建立关联</li><li>示例：relationship “3”表示后续节点关系</li><li>包含原始文档元数据（文件路径、创建时间等）</li></ul></li></ul><h1 id="从简单向量存储到商用向量数据库"><a href="#从简单向量存储到商用向量数据库" class="headerlink" title="从简单向量存储到商用向量数据库"></a>从简单向量存储到商用向量数据库</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250815103626944.png" alt="image-20250815103626944"></p><p>Milvus提供3种部署模式，适用于从简单应用到管理数百亿向量的大规模Kubernetes集群的数据规模。</p><ul><li>Milvus Lite作为Milvus的轻量级版本，易于集成到应用程序中，本书将以它为例进行介绍。</li><li>Milvus Standalone是Milvus的单机服务器版本，所有组件都打包在一个Docker镜像中，便于部署。</li><li>Milvus Distributed可以部署在Kubernetes集群上，支持十亿级向量甚至更大规模场景的云原生架构。</li></ul><h1 id="商用向量数据库的核心功能"><a href="#商用向量数据库的核心功能" class="headerlink" title="商用向量数据库的核心功能"></a>商用向量数据库的核心功能</h1><div class="table-container"><table><thead><tr><th>功能</th><th>描述</th></tr></thead><tbody><tr><td><strong>性能和容错</strong></td><td>分片，在多个节点上对数据进行分区; 复制，在不同节点上创建多个数据副本。发生故障时启用容错机制，确保性能稳定</td></tr><tr><td><strong>监测</strong></td><td>监测资源使用情况、查询性能及系统运行状况，持续优化性能和容错性</td></tr><tr><td><strong>访问控制</strong></td><td>确保数据安全，提供合规性、问责制及审计能力; 保护数据免受未经授权访问，并记录用户活动</td></tr><tr><td><strong>可扩展性与可调性</strong></td><td>支持横向扩展，适应不同的插入率、查询率及硬件差异</td></tr><tr><td><strong>多用户和数据隔离</strong></td><td>支持多用户或多租户; 实现数据隔离，确保用户活动 (如插入、删除查询) 不影响其他用户的私密数据</td></tr><tr><td><strong>备份</strong></td><td>定期创建数据备份; 支持在数据丢失或损坏时恢复到之前的状态，减少中断时间</td></tr><tr><td><strong>API和SDK</strong></td><td>提供易于操作的API; 封装多个API，方便开发者在特定用例 (如语义搜索、推荐系统等) 中使用向量数据库，不需要关注底层结构</td></tr></tbody></table></div><ul><li>关键能力：<ul><li>分片与复制：数据分区存储和容错机制</li><li>访问控制：合规审计和安全防护</li><li>横向扩展：适应不同硬件和负载</li><li>多租户隔离：保证用户数据私密性</li></ul></li><li>选型考量：<ul><li>社区活跃度（如PyTorch式生态）</li><li>API/SDK完善程度</li><li>监控和备份能力</li><li>检索算法多样性（哈希/量化/图搜索）</li></ul></li></ul><h1 id="主流向量数据库一览"><a href="#主流向量数据库一览" class="headerlink" title="主流向量数据库一览"></a>主流向量数据库一览</h1><h2 id="各种各样的向量数据库"><a href="#各种各样的向量数据库" class="headerlink" title="各种各样的向量数据库"></a>各种各样的向量数据库</h2><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250818134520067.png" alt="image-20250818134520067" style="zoom:67%;" /></p><p>市场现状: 目前市面上存在多种向量数据库选择，包括FAISS、Milvus、Weaviate、Qdrant、Elastic、Chroma等，选择时需要进行比较分析</p><h3 id="1-Milvus"><a href="#1-Milvus" class="headerlink" title="1. Milvus"></a>1. Milvus</h3><p>核心功能：</p><ul><li>高性能分布式向量检索，支持IVF、HNSW、ANNOY、DiskANN等多种索引</li><li>横向可扩展至1000+节点集群</li><li>支持动态字段、分区和并行查询</li></ul><p>特点：</p><ul><li>横向可伸缩、支持 1000+ 节点集群</li><li>丰富的 metric（COSINE/L2/IP）和索引类型</li><li>支持动态字段、分区、并行查询</li></ul><p>优势：企业级 SLA，海量数据（10⁸+）性能出色；社区活跃，生态完善。</p><p>劣势：运维相对复杂；对小规模单机部署略显重。</p><p>适用场景：大规模、多并发检索；需要复杂过滤、实时增量写入的生产环境。</p><p>选型建议：数据量 ≥1亿、对吞吐和可用性要求高时首选。</p><h3 id="2-Weaviate"><a href="#2-Weaviate" class="headerlink" title="2. Weaviate"></a>2. Weaviate</h3><p>核心功能：Any-to-Any 多模态检索（nearText/nearImage/nearVector）。</p><p>特点：</p><ul><li>原生 GraphQL 接口</li><li>内置如 CLIP、ImageBind、OpenAI Embeddings 等模型</li><li>自动 schema 管理与向量化管道</li></ul><p>优势：上手快、无需额外模型接入；多模态查询统一 API。</p><p>劣势：集群扩展性弱于 Milvus；企业级性能需商业版。</p><p>适用场景：PoC 验证、多模态实验、快速上线 MVP。</p><p>选型建议：团队希望零运维，想“开箱即用”时推荐</p><h3 id="3-Qdrant"><a href="#3-Qdrant" class="headerlink" title="3. Qdrant"></a>3. Qdrant</h3><p>核心功能：</p><ul><li>向量检索+高效过滤(Single-Stage Filtering/Hybrid Search)</li><li>Rust内核，单节点或小集群性能优异</li><li>支持多向量字段和分段索引</li></ul><p>特点：</p><ul><li>Rust 内核、单节点或小集群性能优</li><li>支持多向量字段和分段索引</li><li>丰富的二级过滤与布尔查询</li></ul><p>优势：延迟低、吞吐高；对复杂过滤条件性能友好。</p><p>劣势：大规模分布式部署方案较新，需要自行打磨。</p><p>适用场景：对过滤/布尔查询依赖度高的语义搜索；中小规模集群。</p><p>选型建议：需要在语义召回与精确过滤间平衡时优选</p><h3 id="4-Pinecone"><a href="#4-Pinecone" class="headerlink" title="4. Pinecone"></a>4. Pinecone</h3><p>核心功能：全托管、高可用向量数据库；支持 hybrid search、namespace 多租户。</p><p>特点：</p><ul><li>Serverless，自动扩缩容</li><li>支持稀疏+稠密混合检索</li></ul><p>优势：极低运维门槛；SDK 友好，企业级 SLA。</p><p>劣势：成本随存储/QPS 增长；网络延迟依赖云厂商。</p><p>适用场景：快速上线大规模检索服务；不想自建集群的业务。</p><p>选型建议：项目初期或短期 PoC，及对运维团队少的公司优选。</p><h3 id="5-Chroma"><a href="#5-Chroma" class="headerlink" title="5. Chroma"></a>5. Chroma</h3><p>核心功能：轻量级、本地化向量存储；适合开发者本地调试与小规模应用。</p><p>特点：</p><ul><li>Python 原生，API 与文档友好</li><li>支持 SQLite、DuckDB 等后端存储</li></ul><p>优势：零运维，直接内嵌到应用中；非常适合本地测试或桌面应用。</p><p>劣势：不适合大规模、分布式场景；功能相对基础。</p><p>适用场景：原型开发、Notebook 环境、桌面/小型服务。</p><p>选型建议：数据量 &lt;10万，团队无运维成本时优选。</p><h3 id="6-Faiss"><a href="#6-Faiss" class="headerlink" title="6. Faiss"></a>6. Faiss</h3><p>核心功能：Facebook 开源的高效向量近邻库；支持 CPU/GPU 算法。</p><p>特点：</p><ul><li>丰富的索引类型（IVF、PQ、HNSW、LSH）</li><li>代码级可控，适合集成到自研系统中</li></ul><p>优势：性能最优、算法前沿；GPU 加速效果显著。</p><p>劣势：仅提供库，不含存储层；需要自行实现数据管理、分布式。</p><p>适用场景：对算法调优有深度需求的科研或自研引擎。</p><p>选型建议：具备 ML/算法团队，需极致性能且愿意自行封装存储时选。</p><h3 id="7-Vespa"><a href="#7-Vespa" class="headerlink" title="7. Vespa"></a>7. Vespa</h3><p>核心功能：大规模分布式检索与实时计算；支持多向量字段、复杂 ranking。</p><p>特点：</p><ul><li>内置机器学习模型部署（Java/Python）</li><li>支持在线训练与在线推理</li></ul><p>优势：企业级特性完善；查询吞吐与排序能力强。</p><p>劣势：学习曲线陡峭；集群部署与运维成本高。</p><p>适用场景：电商推荐、新闻排序、广告排名等复杂检索与排序场景。</p><p>选型建议：需要自定义复杂排名函数、在线模型服务的场景优选。</p><h3 id="8-Elasticsearch"><a href="#8-Elasticsearch" class="headerlink" title="8. Elasticsearch"></a>8. Elasticsearch</h3><p>核心功能：全文检索＋向量检索混合；支持 BM25 + kNN。</p><p>特点：</p><ul><li>兼容原有搜索引擎生态</li><li>可在同一次查询中同时执行 sparse &amp; dense 检索</li><li>插件式扩展（自定义脚本、rank_feature）</li></ul><p>优势：无缝接入已有日志/指标平台；社区和商业支持成熟。</p><p>劣势：向量检索性能不及专用库；索引体积大，内存消耗高。</p><p>适用场景：已有 ES 集群，想增量加密向量搜索；对全文与向量混合检索有需求。</p><p>选型建议：已有 Elastic 部署，无需额外运维团队时可考虑。</p><h3 id="9-MongoDB-Atlas-Vector-Search"><a href="#9-MongoDB-Atlas-Vector-Search" class="headerlink" title="9. MongoDB Atlas Vector Search"></a>9. MongoDB Atlas Vector Search</h3><p>核心功能：Atlas 托管的向量检索；集成全文索引与地理位置。</p><p>特点：</p><ul><li>无缝与 MongoDB 文档数据联动</li><li>Atlas Serverless 可按需扩展</li></ul><p>优势：完全托管，零运维；可以利用平台监控与安全特性。</p><p>劣势：成本较高；检索性能略劣于专用库。</p><p>适用场景：已经在 Atlas 上，想增量加向量搜索能力的团队。</p><p>选型建议：对托管可信赖度要求高，且预算充足时可考虑。</p><h3 id="10-PGVector-PostgreSQL-插件）"><a href="#10-PGVector-PostgreSQL-插件）" class="headerlink" title="10. PGVector(PostgreSQL 插件）"></a>10. PGVector(PostgreSQL 插件）</h3><p>核心功能：在 PostgreSQL 中原生存储与检索向量；支持 SQL+向量混合查询。</p><p>特点：</p><ul><li>与关系数据无缝联表</li><li>支持索引（IVF、HNSW）</li></ul><p>优势：无需额外数据库，利用成熟的事务与权限体系。</p><p>劣势：单机性能有限；大规模时 PG 扩展复杂。</p><p>适用场景：已有 PostgreSQL，想追加简单向量检索功能的业务。</p><p>选型建议：关系型与向量混合场景，且数据量 &lt;千万级时优选。</p><h3 id="11-Redis-Vector"><a href="#11-Redis-Vector" class="headerlink" title="11. Redis Vector"></a>11. Redis Vector</h3><p>核心功能：Redis Modules 提供向量检索；支持 HNSW、Flat。</p><p>特点：</p><ul><li>结合 RedisStream、Pub/Sub 可做实时流式检索</li><li>单实例延迟极低</li></ul><p>优势：适合集成到已有 Redis 缓存/消息体系；运维经验普遍。</p><p>劣势：内存消耗大；分布式横向扩展需 Cluster+Slot 管理。</p><p>适用场景：对实时性要求极高，且已有 Redis 集群的场景。</p><p>选型建议：缓存/路由层即需做检索，且对高并发低延迟有严格要求时选。</p><h2 id="分成这么几类"><a href="#分成这么几类" class="headerlink" title="分成这么几类"></a>分成这么几类</h2><h3 id="1-专用向量数据库-Self-managed-或-托管版"><a href="#1-专用向量数据库-Self-managed-或-托管版" class="headerlink" title="1. 专用向量数据库 (Self-managed 或 托管版)"></a>1. 专用向量数据库 (Self-managed 或 托管版)</h3><p><strong>特点</strong>: 从底层到协议全文支持向量检索, 性能与可伸缩性最佳。</p><ul><li>Milvus (自建/企业级集群)</li><li>Qdrant (轻量 Rust 内核 + 高效过滤)</li><li>Weaviate (自建或 Weaviate Cloud, Any-to-Any 多模态)</li><li>Pinecone (全托管 Serverless)</li></ul><h3 id="2-通用搜索引擎增强-Search-first-平台"><a href="#2-通用搜索引擎增强-Search-first-平台" class="headerlink" title="2. 通用搜索引擎增强 (Search-first 平台)"></a>2. 通用搜索引擎增强 (Search-first 平台)</h3><p><strong>特点</strong>: 兼顾文本检索与向量检索, 适合已有 Elasticsearch/类似体系的扩展。</p><ul><li>Elasticsearch (+ kNN)</li><li>Vespa (多向量字段 + 复杂 Ranking, 引擎级排序能力)</li><li>MongoDB Atlas Vector Search (托管, 文档 + 向量混合)</li></ul><h3 id="3-数据库原生插件-SQL-NoSQL-向量"><a href="#3-数据库原生插件-SQL-NoSQL-向量" class="headerlink" title="3. 数据库原生插件 (SQL/NoSQL + 向量)"></a>3. 数据库原生插件 (SQL/NoSQL + 向量)</h3><p><strong>特点</strong>: 在现有关系或 KV 存储中叠加向量检索, 运维简单、数据联动强。</p><ul><li>Pgvector (PostgreSQL 插件)</li><li>Redis Vector (Redis 模块)</li></ul><h3 id="4-嵌入式轻量库-Library-first"><a href="#4-嵌入式轻量库-Library-first" class="headerlink" title="4. 嵌入式轻量库 (Library-first)"></a>4. 嵌入式轻量库 (Library-first)</h3><p><strong>特点</strong>:  仅提供向量算法或本地存储, 适合嵌入式、桌面/小规模场景或深度定制。</p><ul><li>FAISS (CPU/GPU 高性能向量库)</li><li>Chroma (Python 本地轻量存储)</li><li>LanceDB (基于 Arrow/Parquet 文件存储)</li></ul><h1 id="问题仍然聚焦于：如何选择？"><a href="#问题仍然聚焦于：如何选择？" class="headerlink" title="问题仍然聚焦于：如何选择？"></a>问题仍然聚焦于：如何选择？</h1><p><a href="https://python.langchain.com/docs/integrations/vectorstores/">https://python.langchain.com/docs/integrations/vectorstores/</a></p><div class="table-container"><table><thead><tr><th>向量数据库名称</th><th>是否支持开源</th><th>是否支持自托管</th><th>是否支持云端管理</th><th>是否专为向量搜索设计</th><th>开发者体验</th><th>每秒查询数</th><th>延迟/ms</th><th>支持索引类型</th><th>是否支持混合搜索</th><th>是否支持向量索引</th><th>是否支持角色访问控制</th><th>是否支持动态分片</th><th>是否免费托管计划</th><th>价格 (50K 向量) /美元</th><th>价格 (20M向量)/美元</th></tr></thead><tbody><tr><td>Pinecone</td><td>否</td><td>否</td><td>是</td><td>是</td><td>较好</td><td>150+ (扩展后更高)</td><td>1</td><td>未知</td><td>是</td><td>否</td><td>否</td><td>未知</td><td>是</td><td>70</td><td>227 (高性能版为2074)</td></tr><tr><td>Weaviate</td><td>是</td><td>是</td><td>是</td><td>是</td><td>较好</td><td>791</td><td>2</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>否，静态分片</td><td>是</td><td>25起</td><td>1536</td></tr><tr><td>Milvus</td><td>是</td><td>是</td><td>是</td><td>是</td><td>很好</td><td>2406</td><td>1</td><td>多种 (11种)</td><td>是</td><td>是</td><td>是</td><td>是</td><td>是</td><td>65起</td><td>309 (高性能版为2291)</td></tr><tr><td>Qdrant</td><td>是</td><td>是</td><td>是</td><td>是</td><td>较好</td><td>326</td><td>4</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>是</td><td>是</td><td>9起</td><td>281 (高性能版为820)</td></tr><tr><td>Chroma</td><td>是</td><td>是</td><td>否</td><td>是</td><td>较好</td><td>未知</td><td>未知</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>是</td><td>自托管免费</td><td>自托管免费</td><td></td></tr><tr><td>Elasticsearch</td><td>否</td><td>是</td><td>否</td><td>否</td><td>一般</td><td>700-100</td><td>5-10</td><td>HNSW</td><td>是</td><td>是</td><td>否</td><td>是，静态分片</td><td>自托管免费</td><td>不定</td><td>1225</td></tr><tr><td>PGVector</td><td>是</td><td>是</td><td>否</td><td>否</td><td>一般</td><td>141</td><td>8</td><td>HNSW/IVFFlat</td><td>是</td><td>是</td><td>否</td><td>-</td><td>自托管免费</td><td>不定</td><td>不定</td></tr></tbody></table></div><ul><li>选型维度:<ul><li>是否开源、是否支持自托管、是否支持云端管理</li><li>专为向量搜索设计、开发者体验、每秒查询数</li><li>延迟、支持索引类型、是否支持混合搜索</li><li>是否支持磁盘索引、角色访问控制、动态分片</li><li>价格等商业考量因素</li></ul></li><li>典型数据:<ul><li>Milvus支持多达11种索引类型</li><li>Pinecone价格从70美元(50k向量)到2074美元(高性能版20M向量)不等</li><li>Weaviate查询性能791 QPS，延迟2ms</li></ul></li></ul><h2 id="选型思路总结"><a href="#选型思路总结" class="headerlink" title="选型思路总结"></a>选型思路总结</h2><ul><li>规模与性能:<ul><li>超大规模($10^8+$﻿)、高并发：Milvus、Vespa、Pinecone</li><li>中小规模($&lt;10^7$﻿): Qdrant、Weaviate、Redis</li></ul></li><li>运维成本:<ul><li>零运维：Pinecone、MongoDB Atlas、Weaviate(Cloud)</li><li>自研可控：Milvus、FAISS、Vespa</li></ul></li><li>功能侧重:<ul><li>多模态Any-to-Any: Weaviate、OpenSearch</li><li>复杂过滤&amp;混合检索：Qdrant、Elasticsearch</li></ul></li><li>现有栈对接:<ul><li>已有PostgreSQL/Redis: Pgvector、Redis Vector</li><li>Elasticsearch生态：Elasticsearch(+kNN)</li></ul></li></ul><h1 id="一些开源测评工具"><a href="#一些开源测评工具" class="headerlink" title="一些开源测评工具"></a>一些开源测评工具</h1><p>工具：<a href="https://ann-benchmarks.com/index.html">https://ann-benchmarks.com/index.html</a></p><p>工具：<a href="https://github.com/zilliztech/VectorDBBench">https://github.com/zilliztech/VectorDBBench</a></p>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第十九讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量数据库集合</title>
    <link href="https://jinglv.github.io/2025/08/18/ai/rag/20-vector-db-collection/"/>
    <id>https://jinglv.github.io/2025/08/18/ai/rag/20-vector-db-collection/</id>
    <published>2025-08-17T16:00:00.000Z</published>
    <updated>2025-08-18T10:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="向量数据库基本处理流程"><a href="#向量数据库基本处理流程" class="headerlink" title="向量数据库基本处理流程"></a>向量数据库基本处理流程</h1><p>以Milvus向量数据库为例</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250818180534338.png" alt="image-20250818180534338" style="zoom:67%;" /></p><ul><li>核心指标：向量数据库处理需平衡三个关键指标：准确率（逼近模型上限）、检索速度、内存消耗</li><li>完整流程：<ul><li>数据准备：游戏数据/医疗数据等原始数据</li><li>向量化处理：使用OpenAI Embedding Model等模型生成向量</li><li>数据库操作：<ul><li>创建Collection并定义Schema</li><li>创建索引（索引类型直接影响检索效率）</li><li>批量插入向量数据形成实体</li></ul></li><li>检索功能：<ul><li>相似度搜索</li><li>条件过滤</li><li>向量距离计算</li><li>属性筛选</li></ul></li></ul></li><li>关键因素：<ul><li>模型能力：Embedding模型质量决定准确率上限</li><li>索引优化：需根据数据量和内存情况选择最优索引参数</li><li>工程考量：不能简单使用AUTOINDEX，需了解不同索引方式的适用场景</li></ul></li></ul><h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>Milvus官方网址：<a href="https://milvus.io/">https://milvus.io/</a></p><p>在 Milvus 中，数据库是组织和管理数据的逻辑单元。多租户创建多个数据库，为不同的应用程序或租户从逻辑上隔离数据。例如，创建一个数据库用于存储用户 A 的数据，另一个数据库用于存储用户 B 的数据。</p><ul><li><p>逻辑单元：数据库是组织管理数据的逻辑单元，支持多租户隔离</p></li><li><p>创建方法，参考代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line">client = MilvusClient(</span><br><span class="line">uri=<span class="string">&quot;http://localhost:19530&quot;</span>,</span><br><span class="line">token=<span class="string">&quot;root:Milvus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">client.create_database(</span><br><span class="line">db_name=<span class="string">&quot;my_database_1&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li>版本要求：需使用Standalone版（Local版功能受限，不支持量化索引等高级功能）</li></ul><h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ol><li><p>连接Milvus客户端</p><ul><li><p>uri: 协议+地址+端口，默认为 <a href="http://localhost:19530">http://localhost:19530</a></p></li><li><p>token: “用户名:密码”，默认 root:Milvus (注：也可以为空)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient, exceptions</span><br><span class="line"></span><br><span class="line">client = MilvusClient(</span><br><span class="line">    uri=<span class="string">&quot;http://localhost:19530&quot;</span>,</span><br><span class="line">    <span class="comment"># token=&quot;root:Milvus&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ol><li><p>创建数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> exceptions</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    client.create_database(db_name=<span class="string">&quot;test_vector_db&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;✓ test_vector_db创建成功&quot;</span>)</span><br><span class="line"><span class="keyword">except</span> exceptions.AlreadyExistError:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ℹ test_vector_db 已存在&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>列出所有数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db_list = client.list_databases()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前所有数据库：&quot;</span>, db_list)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>查看数据库详情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">default_info = client.describe_database(db_name=<span class="string">&quot;default&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;默认数据库详情：&quot;</span>, default_info)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>修改数据库属性：限制最大集合数为10</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client.alter_database_properties(</span><br><span class="line">    db_name=<span class="string">&quot;test_vector_db&quot;</span>,</span><br><span class="line">    properties=&#123;<span class="string">&quot;database.max.collections&quot;</span>: <span class="number">10</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已为 test_vector_db 限制最大集合数为 10&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>删除数据最大集合限制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client.drop_database_properties(</span><br><span class="line">    db_name=<span class="string">&quot;test_vector_db&quot;</span>,</span><br><span class="line">    property_keys=[<span class="string">&quot;database.max.collections&quot;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已移除 test_vector_db 的最大集合数限制&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>切换数据库</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.use_database(db_name=<span class="string">&quot;dev_vector_db&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已切换当前数据库为 dev_vector_db&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>删除数据库</p><ul><li>注意：如果库内有 Collection，需先 client.drop_collection() 将其清空</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.drop_database(db_name=<span class="string">&quot;test_vector_db&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ test_vector_db 已删除&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="集合：Collection"><a href="#集合：Collection" class="headerlink" title="集合：Collection"></a>集合：Collection</h2><ul><li>基本概念：Collection是管理数据的容器，可以创建多个Collections来组织数据，类似于关系数据库中的表。</li><li>数据结构：采用二维表结构，具有固定的列（字段）和变化的行（实体），每列代表一个字段，每行代表一个实体。</li><li>类比关系：Collections对应数据库表，实体(Entity)对应表中的记录</li></ul><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250819110839640.png" alt="image-20250819110839640" style="zoom:80%;" /></p><h3 id="集合的Schema"><a href="#集合的Schema" class="headerlink" title="集合的Schema"></a>集合的Schema</h3><p>代码示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient, DataType</span><br><span class="line"></span><br><span class="line">client = MilvusClient(</span><br><span class="line">  uri=<span class="string">&quot;http://localhost:19530&quot;</span>,</span><br><span class="line">  token=<span class="string">&quot;root:Milvus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create schema</span></span><br><span class="line">schema = MilvusClient.create_schema(</span><br><span class="line">  auto_id=<span class="literal">False</span>,</span><br><span class="line">  enable_dynamic_field=<span class="literal">True</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add fields to schema</span></span><br><span class="line">schema.add_field(field_name=<span class="string">&quot;my_id&quot;</span>, datatype=DataType.INT64, is_primary=<span class="literal">True</span>)</span><br><span class="line">schema.add_field(field_name=<span class="string">&quot;my_vector&quot;</span>, datatype=DataType.FLOAT_VECTOR, dim=<span class="number">5</span>)</span><br><span class="line">schema.add_field(field_name=<span class="string">&quot;my_varchar&quot;</span>, datatype=DataType.VARCHAR, max_length=<span class="number">512</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>定义：Schema规定了集合的数据结构，在创建集合时必须明确设计。</li><li>核心字段：<ul><li>ID字段：必须存在的主键字段，支持整数或字符串类型</li><li>Vector字段：存储向量数据的核心字段</li><li>Text字段：与向量对应的原始文本字段</li></ul></li><li>动态字段：可通过设置enable_dynamic_field=True允许后续添加未定义的字段</li></ul><h3 id="集合的字段架构"><a href="#集合的字段架构" class="headerlink" title="集合的字段架构"></a>集合的字段架构</h3><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250819111346793.png" alt="image-20250819111346793" style="zoom:67%;" /></p><ul><li>字段限制：<ul><li>必须包含1个主键字段</li><li>最多支持4个向量字段</li></ul></li><li>多向量应用：<ul><li>支持混合检索（密集向量+稀疏向量）</li><li>支持多模态检索（文本+图像等）</li></ul></li></ul><h3 id="主键和Auto-ID"><a href="#主键和Auto-ID" class="headerlink" title="主键和Auto ID"></a>主键和Auto ID</h3><p>与关系数据库中的主字段类似，Collection 也有一个主字段，用于将实体与其他实体区分开来。主字段中的每个值都是全局唯一的，并与一个特定实体相对应。</p><p>名为id的字段是主字段。主字段只接受整数或字符串。</p><ul><li>插入实体时，默认情况下应包含主字段值。</li><li>如果在创建 Collections 时启用了AutoId，Milvus 将在插入数据时生成这些值。此时，从要插入的实体中排除主字段值。</li></ul><p>总结：</p><ul><li>主键特性：<ul><li>每个值全局唯一</li><li>支持整数或字符串类型</li><li>用于精确查询而非向量检索</li></ul></li><li>Auto ID：<ul><li>创建集合时可启用自动生成主键功能</li><li>启用后插入数据时无需指定主键值</li><li>系统会自动分配唯一ID值</li></ul></li></ul><h3 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Miilvus</span></span><br><span class="line">client = MilvusClient(</span><br><span class="line">    uri=<span class="string">&quot;http://localhost:19530&quot;</span>,</span><br><span class="line">    <span class="comment"># token=&quot;root:Milvus&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li><p>创建 Collection</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查并删除已存在的集合</span></span><br><span class="line">collection_name = <span class="string">&quot;quick_setup&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> collection_name <span class="keyword">in</span> client.list_collections():</span><br><span class="line">    client.drop_collection(collection_name=collection_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;✓ 已删除已存在的集合 <span class="subst">&#123;collection_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新集合,</span></span><br><span class="line">client.create_collection(</span><br><span class="line">    collection_name=collection_name,</span><br><span class="line">    dimension=<span class="number">5</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;✓ <span class="subst">&#123;collection_name&#125;</span> 已创建&quot;</span>) <span class="comment"># 没有指定数据库创建集合，则集合会创建在default下</span></span><br></pre></td></tr></table></figure><p>使用默认设置立即创建集合时，将应用以下设置：</p><ul><li>将主要字段和向量字段添加到模式（id和矢量）中。</li><li>主字段接受整数并禁用AutoId。</li><li>向量字段接受浮点向量嵌入。</li><li>AUTOINDEX用于在矢量字段上创建索引。</li><li>COSINE用于测量向量嵌入之间的相似性。</li><li>启用名为$meta的保留动态字段，以键值对的形式保存非模式定义的字段及其值。</li><li>该集合在创建时自动加载。</li></ul></li></ol><p>   创建了包含索引参数的集合，Milvus 会在创建时自动加载该集合。在这种情况下，索引参数中提到的所有字段都会被索引。</p>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client.create_collection(</span><br><span class="line">  collection_name=<span class="string">&quot;customized_setup_1&quot;</span>,</span><br><span class="line">  schema=schema,</span><br><span class="line">  index_params=index_params</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li><p>列出所有 Collections</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cols = client.list_collections()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前所有集合：&quot;</span>, cols)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>查看 Collection 详情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info = client.describe_collection(collection_name=collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;collection_name&#125;</span> 详情：&quot;</span>, info)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>重命名 Collection</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">new_collection_name = <span class="string">&quot;quick_renamed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> new_collection_name <span class="keyword">in</span> client.list_collections():</span><br><span class="line">    client.drop_collection(collection_name=new_collection_name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;✓ 已删除已存在的集合 <span class="subst">&#123;new_collection_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">client.rename_collection(</span><br><span class="line">    old_name=collection_name,</span><br><span class="line">    new_name=new_collection_name</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;✓ <span class="subst">&#123;collection_name&#125;</span> 已重命名为 <span class="subst">&#123;new_collection_name&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>修改 Collection 属性（设置 TTL 60 秒）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client.alter_collection_properties(</span><br><span class="line">    collection_name=new_collection_name,</span><br><span class="line">    properties=&#123;<span class="string">&quot;collection.ttl.seconds&quot;</span>: <span class="number">60</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;✓ 已为 <span class="subst">&#123;new_collection_name&#125;</span> 设置 TTL=60s&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>删除 Collection 属性（TTL）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">client.drop_collection_properties(</span><br><span class="line">    collection_name=new_collection_name,</span><br><span class="line">    property_keys=[<span class="string">&quot;collection.ttl.seconds&quot;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;✓ 已删除 <span class="subst">&#123;new_collection_name&#125;</span> 的 TTL 属性&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>加载 &amp; 检查加载状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client.load_collection(collection_name=new_collection_name)</span><br><span class="line">state = client.get_load_state(collection_name=new_collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;加载状态：&quot;</span>, state)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>释放 &amp; 检查释放状态</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">client.release_collection(collection_name=new_collection_name)</span><br><span class="line">state = client.get_load_state(collection_name=new_collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;释放后状态：&quot;</span>, state)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>管理 Partition(分区)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9.1 列出 Partition（默认只有 &quot;_default&quot;）</span></span><br><span class="line"></span><br><span class="line">parts = client.list_partitions(collection_name=new_collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Partition 列表：&quot;</span>, parts)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9.2 创建新 Partition</span></span><br><span class="line"></span><br><span class="line">client.create_partition(</span><br><span class="line">    collection_name=new_collection_name,</span><br><span class="line">    partition_name=<span class="string">&quot;partA&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已创建 partition partA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;更新后 Partition 列表：&quot;</span>, client.list_partitions(new_collection_name))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9.3 检查 Partition 是否存在</span></span><br><span class="line"></span><br><span class="line">exists = client.has_partition(</span><br><span class="line">    collection_name=new_collection_name,</span><br><span class="line">    partition_name=<span class="string">&quot;partA&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;partA 存在？&quot;</span>, exists)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9.4 加载 &amp; 释放 指定 Partition</span></span><br><span class="line"></span><br><span class="line">client.load_partitions(</span><br><span class="line">    collection_name=new_collection_name,</span><br><span class="line">    partition_names=[<span class="string">&quot;partA&quot;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;partA 加载状态：&quot;</span>, client.get_load_state(new_collection_name, partition_name=<span class="string">&quot;partA&quot;</span>))</span><br><span class="line"></span><br><span class="line">client.release_partitions(</span><br><span class="line">    collection_name=new_collection_name,</span><br><span class="line">    partition_names=[<span class="string">&quot;partA&quot;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;partA 释放后状态：&quot;</span>, client.get_load_state(new_collection_name, partition_name=<span class="string">&quot;partA&quot;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 9.5 删除 Partition（需先 release）</span></span><br><span class="line"></span><br><span class="line">client.drop_partition(</span><br><span class="line">    collection_name=new_collection_name,</span><br><span class="line">    partition_name=<span class="string">&quot;partA&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已删除 partition partA&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;最终 Partition 列表：&quot;</span>, client.list_partitions(new_collection_name))</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>管理 Alias(别名)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.1 创建 Alias</span></span><br><span class="line"></span><br><span class="line">client.create_alias(collection_name=new_collection_name, alias=<span class="string">&quot;alias3&quot;</span>)</span><br><span class="line">client.create_alias(collection_name=new_collection_name, alias=<span class="string">&quot;alias4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已创建 alias3, alias4&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.2 列出 Alias</span></span><br><span class="line"></span><br><span class="line">aliases = client.list_aliases(collection_name=new_collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;当前 aliases：&quot;</span>, aliases)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.3 查看 Alias 详情</span></span><br><span class="line"></span><br><span class="line">desc = client.describe_alias(alias=<span class="string">&quot;alias3&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;alias3 详情：&quot;</span>, desc)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.4 重新分配 Alias</span></span><br><span class="line"></span><br><span class="line">client.alter_alias(collection_name=new_collection_name, alias=<span class="string">&quot;alias4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已将 alias4 重新分配给 quick_renamed&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 10.5 删除 Alias</span></span><br><span class="line"></span><br><span class="line">client.drop_alias(alias=<span class="string">&quot;alias4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已删除 alias4&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;剩余 aliases：&quot;</span>, client.list_aliases(new_collection_name))</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>删除 Collection</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.drop_collection(collection_name=new_collection_name) <span class="comment"># 注：集合中的Alias也要删干净，否则集合也不会删除成功</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;✓ 集合 <span class="subst">&#123;new_collection_name&#125;</span> 已删除&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="Schema操作"><a href="#Schema操作" class="headerlink" title="Schema操作"></a>Schema操作</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient, DataType</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Miilvus</span></span><br><span class="line">client = MilvusClient(</span><br><span class="line">    uri=<span class="string">&quot;http://localhost:19530&quot;</span>,</span><br><span class="line">    <span class="comment"># token=&quot;root:Milvus&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li><p>创建基本 Schema</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">schema = MilvusClient.create_schema()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已创建空 Schema&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>添加主键字段（Primary Field）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.1 INT64类型主键（手动指定ID）</span></span><br><span class="line"></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;id&quot;</span>,</span><br><span class="line">    datatype=DataType.INT64,</span><br><span class="line">    is_primary=<span class="literal">True</span>,  <span class="comment"># 设置为主键</span></span><br><span class="line">    auto_id=<span class="literal">False</span>     <span class="comment"># 不自动生成ID</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2.2 VARCHAR类型主键（自动生成ID）</span></span><br><span class="line"></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;doc_id&quot;</span>,</span><br><span class="line">    datatype=DataType.VARCHAR,</span><br><span class="line">    is_primary=<span class="literal">True</span>,  <span class="comment"># 设置为主键</span></span><br><span class="line">    auto_id=<span class="literal">True</span>,     <span class="comment"># 自动生成ID</span></span><br><span class="line">    max_length=<span class="number">100</span>    <span class="comment"># VARCHAR类型需要指定最大长度</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>添加向量字段（Vector Field）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.1 Dense Vector (浮点向量)</span></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;text_vector&quot;</span>,</span><br><span class="line">    datatype=DataType.FLOAT_VECTOR,  <span class="comment"># 32位浮点向量</span></span><br><span class="line">    dim=<span class="number">768</span>                          <span class="comment"># 向量维度</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3.2 Binary Vector (二进制向量)</span></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;image_vector&quot;</span>,</span><br><span class="line">    datatype=DataType.BINARY_VECTOR,  <span class="comment"># 二进制向量</span></span><br><span class="line">    dim=<span class="number">256</span>                           <span class="comment"># 维度必须是8的倍数</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>添加标量字段（Scalar Field）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.1 字符串字段</span></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;title&quot;</span>,</span><br><span class="line">    datatype=DataType.VARCHAR,</span><br><span class="line">    max_length=<span class="number">200</span>,</span><br><span class="line">    <span class="comment"># 可以为空且有默认值</span></span><br><span class="line">    is_nullable=<span class="literal">True</span>,</span><br><span class="line">    default_value=<span class="string">&quot;untitled&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.2 数值字段</span></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;age&quot;</span>,</span><br><span class="line">    datatype=DataType.INT32,</span><br><span class="line">    is_nullable=<span class="literal">False</span>  <span class="comment"># 不可为空</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.3 布尔字段</span></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;is_active&quot;</span>,</span><br><span class="line">    datatype=DataType.BOOL,</span><br><span class="line">    default_value=<span class="literal">True</span>  <span class="comment"># 默认值为True</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.4 JSON字段</span></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;metadata&quot;</span>,</span><br><span class="line">    datatype=DataType.JSON</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4.5 数组字段</span></span><br><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;tags&quot;</span>,</span><br><span class="line">    datatype=DataType.ARRAY,</span><br><span class="line">    element_type=DataType.VARCHAR,  <span class="comment"># 数组元素类型</span></span><br><span class="line">    max_capacity=<span class="number">10</span>,                <span class="comment"># 数组最大容量</span></span><br><span class="line">    max_length=<span class="number">50</span>                   <span class="comment"># 每个元素最大长度</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>添加动态字段（Dynamic Field）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">schema.add_field(</span><br><span class="line">    field_name=<span class="string">&quot;dynamic_field&quot;</span>,</span><br><span class="line">    datatype=DataType.VARCHAR,</span><br><span class="line">    is_dynamic=<span class="literal">True</span>,    <span class="comment"># 设置为动态字段</span></span><br><span class="line">    max_length=<span class="number">500</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>使用Schema创建Collection</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">collection_name = <span class="string">&quot;document_store10&quot;</span></span><br><span class="line">client.create_collection(</span><br><span class="line">    collection_name=collection_name,</span><br><span class="line">    schema=schema</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>修改Collection字段</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加新字段</span></span><br><span class="line">client.alter_collection_field(</span><br><span class="line">    collection_name=collection_name,</span><br><span class="line">    field_name=<span class="string">&quot;tags&quot;</span>,</span><br><span class="line">    field_params=&#123;</span><br><span class="line">        <span class="string">&quot;max_capacity&quot;</span>: <span class="number">64</span></span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>查看Collection详情</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info = client.describe_collection(collection_name=collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Collection详情：&quot;</span>, info)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>清理（删除集合）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">client.drop_collection(collection_name=collection_name)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;✓ 已删除测试集合&quot;</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><ul><li>必要性：向量字段必须创建索引才能高效检索</li><li>索引参数：<ul><li>向量字段需指定索引类型和度量类型</li><li>标量字段只需指定索引类型</li></ul></li><li>度量类型：包括余弦相似度(COSINE)、内积(IP)、欧式距离(L2)等</li></ul><p>创建索引示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Prepare index parameters</span></span><br><span class="line">index_params = client.prepare_index_params()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Add indexes</span></span><br><span class="line">index_params.add_index(</span><br><span class="line">  field_name=<span class="string">&quot;my_id&quot;</span>,</span><br><span class="line">  index_type=<span class="string">&quot;AUTOINDEX&quot;</span></span><br><span class="line">)</span><br><span class="line">index_params.add_index(</span><br><span class="line">  field_name=<span class="string">&quot;my_vector&quot;</span>,</span><br><span class="line">  index_type=<span class="string">&quot;AUTOINDEX&quot;</span>,</span><br><span class="line">  metric_type=<span class="string">&quot;COSINE&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="实体：Entity"><a href="#实体：Entity" class="headerlink" title="实体：Entity"></a>实体：Entity</h2><p>在 Milvus 中，Entity是指Collection中共享同一个Schema的数据记录，一行中每个字段的数据构成一个 Entity。因此，同一个 Collection 内的 Entity 具有相同的属性（例如字段名、数据类型和其他约束）。</p><p>将实体插入集合 (Collection) 时，只有包含 Schema 中定义的所有字段，插入的实体才能成功添加。插入的实体将按插入顺序进入名为_default的分区 (Partition )。如果存在某个分区 (Partition)，您也可以通过在插入请求中指定分区名称，将实体插入到该分区 (Partition) 中。</p><h3 id="实体：Upsert"><a href="#实体：Upsert" class="headerlink" title="实体：Upsert"></a>实体：Upsert</h3><p>当你需要更新集合中的实体，或者不确定是更新还是插入时，可以尝试使用 Upsert 操作。务必确保 Upsert 请求中包含的实体包含主键，否则会报错。</p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250819160329230.png" alt="image-20250819160329230" style="zoom:50%;" /></p><ol><li>检查Collection的主字段是否启用了AutoId。<ul><li>如果是，Milvus 会将实体中的主键替换为自动生成的主键，并插入数据。</li><li>如果没有，Milvus 将使用实体携带的主键来插入数据。</li></ul></li><li>根据Upsert请求中包含的Entity的主键值执行删除操作。</li></ol><ul><li>Upsert操作:<ul><li>结合insert和update功能</li><li>检查AutoID设置决定主键处理方式</li><li>存在相同主键时先删除再插入</li></ul></li></ul><h3 id="实体Entity操作"><a href="#实体Entity操作" class="headerlink" title="实体Entity操作"></a>实体Entity操作</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pymilvus <span class="keyword">import</span> MilvusClient</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="comment"># 连接Miilvus</span></span><br><span class="line">client = MilvusClient(</span><br><span class="line">    uri=<span class="string">&quot;http://localhost:19530&quot;</span>,</span><br><span class="line">    <span class="comment"># token=&quot;root:Milvus&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line"><span class="comment"># 检查集合是否存在，如果存在则删除</span></span><br><span class="line"><span class="keyword">if</span> client.has_collection(<span class="string">&quot;quick_setup&quot;</span>):</span><br><span class="line">    client.drop_collection(<span class="string">&quot;quick_setup&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建集合</span></span><br><span class="line">client.create_collection(</span><br><span class="line">    collection_name=<span class="string">&quot;quick_setup&quot;</span>,</span><br><span class="line">    dimension=<span class="number">5</span>,  <span class="comment"># vector 维度</span></span><br><span class="line">    primary_field_name=<span class="string">&quot;id&quot;</span>,</span><br><span class="line">    vector_field_name=<span class="string">&quot;vector&quot;</span>,</span><br><span class="line">    id_type=<span class="string">&quot;int&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li><p>插入实体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">data=[</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.3580376395471989</span>, -<span class="number">0.6023495712049978</span>, <span class="number">0.18414012509913835</span>, -<span class="number">0.26286205330961354</span>, <span class="number">0.9029438446296592</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;pink_8682&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.19886812562848388</span>, <span class="number">0.06023560599112088</span>, <span class="number">0.6976963061752597</span>, <span class="number">0.2614474506242501</span>, <span class="number">0.838729485096104</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;red_7025&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">2</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.43742130801983836</span>, -<span class="number">0.5597502546264526</span>, <span class="number">0.6457887650909682</span>, <span class="number">0.7894058910881185</span>, <span class="number">0.20785793220625592</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;orange_6781&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">3</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.3172005263489739</span>, <span class="number">0.9719044792798428</span>, -<span class="number">0.36981146090600725</span>, -<span class="number">0.4860894583077995</span>, <span class="number">0.95791889146345</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;pink_9298&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">4</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.4452349528804562</span>, -<span class="number">0.8757026943054742</span>, <span class="number">0.8220779437047674</span>, <span class="number">0.46406290649483184</span>, <span class="number">0.30337481143159106</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;red_4794&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">5</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.985825131989184</span>, -<span class="number">0.8144651566660419</span>, <span class="number">0.6299267002202009</span>, <span class="number">0.1206906911183383</span>, -<span class="number">0.1446277761879955</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;yellow_4222&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">6</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.8371977790571115</span>, -<span class="number">0.015764369584852833</span>, -<span class="number">0.31062937026679327</span>, -<span class="number">0.562666951622192</span>, -<span class="number">0.8984947637863987</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;red_9392&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">7</span>, <span class="string">&quot;vector&quot;</span>: [-<span class="number">0.33445148015177995</span>, -<span class="number">0.2567135004164067</span>, <span class="number">0.8987539745369246</span>, <span class="number">0.9402995886420709</span>, <span class="number">0.5378064918413052</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;grey_8510&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">8</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.39524717779832685</span>, <span class="number">0.4000257286739164</span>, -<span class="number">0.5890507376891594</span>, -<span class="number">0.8650502298996872</span>, -<span class="number">0.6140360785406336</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;white_9381&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">9</span>, <span class="string">&quot;vector&quot;</span>: [<span class="number">0.5718280481994695</span>, <span class="number">0.24070317428066512</span>, -<span class="number">0.3737913482606834</span>, -<span class="number">0.06726932177492717</span>, -<span class="number">0.6980531615588608</span>], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;purple_4976&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">res = client.insert(</span><br><span class="line">    collection_name=<span class="string">&quot;quick_setup&quot;</span>,</span><br><span class="line">    data=data</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>更新实体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">update_data = [</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">0</span>, <span class="string">&quot;vector&quot;</span>: [random.random() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;updated_pink_8682&quot;</span>&#125;,</span><br><span class="line">    &#123;<span class="string">&quot;id&quot;</span>: <span class="number">1</span>, <span class="string">&quot;vector&quot;</span>: [random.random() <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>)], <span class="string">&quot;color&quot;</span>: <span class="string">&quot;updated_red_7025&quot;</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">res = client.upsert(</span><br><span class="line">    collection_name=<span class="string">&quot;quick_setup&quot;</span>,</span><br><span class="line">    data=update_data</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n更新结果:&quot;</span>, res)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>删除实体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">res = client.delete(</span><br><span class="line">    collection_name=<span class="string">&quot;quick_setup&quot;</span>,</span><br><span class="line">    ids=[<span class="number">0</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n删除结果:&quot;</span>, res)</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>查询实体</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">client.flush(collection_name=<span class="string">&quot;quick_setup&quot;</span>) <span class="comment"># 刷新内存</span></span><br><span class="line"></span><br><span class="line">res = client.query(</span><br><span class="line">    collection_name=<span class="string">&quot;quick_setup&quot;</span>,</span><br><span class="line">    <span class="built_in">filter</span>=<span class="string">&quot;id in [1,2]&quot;</span>,</span><br><span class="line">    output_fields=[<span class="string">&quot;id&quot;</span>, <span class="string">&quot;color&quot;</span>]</span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n查询结果:&quot;</span>, res)</span><br></pre></td></tr></table></figure></li></ol><h1 id="其它概念"><a href="#其它概念" class="headerlink" title="其它概念"></a>其它概念</h1><ul><li><strong>Partition</strong> - 分区是集合的子集，与其父集合共享相同的字段集，每个分区包含一个实体子集。通过将实体分配到不同的分区，您可以创建实体组。您可以在特定分区内进行搜索和查询，让Milvus 忽略其他分区中的实体，从而提高搜索效率。</li><li><strong>Shard</strong> - 分片是集合的水平切片。每个分片对应一个数据输入通道。每个集合默认都有一个分片。您可以根据预期吞吐量和要插入到集合中的数据量，在创建集合时设置适当的分片数量。。</li><li><strong>Alias</strong> - 您可以为集合创建别名。一个集合可以有多个别名，但集合之间不能共享一个别名。收到针对某个集合的请求后，Milvus 会根据提供的名称查找该集合。</li><li><strong>Function</strong> - 您可以在 Milvus 创建集合时设置函数来导出字段。例如，全文搜索功能使用用户自定义函数从特定的 varchar 字段导出稀疏向量字段。</li><li><strong>Consistency Leve</strong>l - 分布式数据库系统通常使用一致性级别来定义跨数据节点和副本的数据相同性。可以在创建集合或在集合内进行相似性搜索时设置单独的一致性级别。适用的一致性级别包括<strong>Strong</strong>, <strong>Bounded Staleness</strong>, <strong>Session</strong>, <strong>Eventually</strong></li></ul><h1 id="数据一致性"><a href="#数据一致性" class="headerlink" title="数据一致性"></a>数据一致性</h1><div class="table-container"><table><thead><tr><th>一致性级别</th><th>含义</th><th>特性</th><th>典型场景</th></tr></thead><tbody><tr><td>Strong（一致性）</td><td>任何读操作都能立刻看到所有已完成写操作的最新数据，保证“线性化”</td><td>• 最高读写一致性<br>• 延迟和吞吐可能受限于副本同步速度</td><td>• 对数据准确性要求极高的业务，如金融交易、订单支付<br>• 写入与读取强耦合的场景</td></tr><tr><td>Bounded Staleness（有界时滞一致性）</td><td>读操作可能看到最新写操作之前的旧数据，但“落后量”可控</td><td>• 最长时延或版本差可配置（如最多滞后5秒或3个版本）<br>• 在可接受延迟范围内兼顾性能与一致性</td><td>• 社交媒体时序数据显示，只要误差在几秒以内可接受<br>• 仪表盘、监控类场景</td></tr><tr><td>Session（会话一致性）</td><td>同一客户端会话内，读写操作按照客户端顺序一致；跨会话可见性无保证</td><td>• 保证“读已所写”、“读后写”、“写后读”<br>• 不同客户端之间可能看到不同版本</td><td>• 用户个性化操作：自己写入的数据自己即刻可见<br>• 聊天、个人设置等场景</td></tr><tr><td>Eventually（最终一致性）</td><td>写操作会被异步传播到所有副本，短期内读到旧数据，最终收敛到一致</td><td>• 写入延迟最低、吞吐最高<br>• 不保证任何时刻的一致性，只保证最终一致</td><td>• 海量日志收集、埋点数据、离线分析场景<br>• 缓存回源、CDN数据分发</td></tr></tbody></table></div><ul><li>Strong(强一致性):<ul><li>任何读都能看到最新写结果</li><li>适用于金融交易等高要求场景</li></ul></li><li>Bounded Staleness(有界时滞):<ul><li>默认级别，落后量可控(如5秒内)</li><li>兼顾性能与一致性</li></ul></li><li>Session(会话一致性):<ul><li>保证同一会话内的读写顺序</li><li>适用于个性化操作场景</li></ul></li><li>Eventually(最终一致性):<ul><li>写入延迟最低，最终收敛一致</li><li>适用于日志收集等场景</li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第二十讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量嵌入之稀疏嵌入、密集嵌入、混合检索</title>
    <link href="https://jinglv.github.io/2025/08/15/ai/rag/17-embedding-technology/"/>
    <id>https://jinglv.github.io/2025/08/15/ai/rag/17-embedding-technology/</id>
    <published>2025-08-14T16:00:00.000Z</published>
    <updated>2025-08-15T01:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="稀疏嵌入与密集嵌入"><a href="#稀疏嵌入与密集嵌入" class="headerlink" title="稀疏嵌入与密集嵌入"></a>稀疏嵌入与密集嵌入</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250815093602208.png" alt="image-20250815093602208" style="zoom:50%;" /></p><h2 id="稀疏嵌入"><a href="#稀疏嵌入" class="headerlink" title="稀疏嵌入"></a>稀疏嵌入</h2><ul><li>定义：早期自然语言处理中基于词频统计的嵌入方式</li><li>形成方式：通过词频或n-gram统计词在文档中出现次数</li><li>稀疏性原因：维度与词典大小相同（如现代汉语字典几万字对应几万维）</li><li>存储方式：出现词标记为1（如”黑神话悟空”在3000、5000、8000维标记1），未出现词均为0</li><li>典型示例：游戏角色特征标签（金箍棒:1，七十二变:1，筋斗云:1等）</li></ul><p>稀疏嵌入的特定场景应用</p><ul><li>保留价值：<ul><li>精确匹配特定关键词（如游戏中的”金箍棒”）</li><li>快速过滤未出现的关键词（得分为0）</li><li>处理明确特征标签（如角色属性、技能名称）</li></ul></li><li>混合检索：结合稀疏嵌入的精确匹配和密集嵌入的语义理解优势</li></ul><h2 id="密集嵌入"><a href="#密集嵌入" class="headerlink" title="密集嵌入"></a>密集嵌入</h2><ul><li>现代主流：大语言模型时代主要使用的嵌入形式</li><li>生成方式：通过transformer架构计算，基于文档相似度特征提取</li><li>特点：<ul><li>连续实数值（如[0.2,-0.5,0.8]）</li><li>维度较小（通常128-256维）</li><li>特征自动学习得到</li></ul></li><li>优势：能捕捉语义相似度，适合处理抽象语义关系</li></ul><h1 id="稀疏嵌入与密集嵌入的结合使用"><a href="#稀疏嵌入与密集嵌入的结合使用" class="headerlink" title="稀疏嵌入与密集嵌入的结合使用"></a>稀疏嵌入与密集嵌入的结合使用</h1><ul><li>应用场景：游戏问答系统中查询特定武器/技能时</li><li>协同效应：<ul><li>稀疏嵌入快速定位含关键词段落</li><li>密集嵌入理解语义相关但表述不同的内容</li></ul></li><li>示例：查询”悟空的武器在哪些关卡管用”时，稀疏嵌入能精准匹配”金箍棒”相关段落</li></ul><h1 id="稀疏嵌入的特征标签表示形式"><a href="#稀疏嵌入的特征标签表示形式" class="headerlink" title="稀疏嵌入的特征标签表示形式"></a>稀疏嵌入的特征标签表示形式</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250815093846348.png" alt="image-20250815093846348" style="zoom:50%;" /></p><ul><li>标签化表示：将特征转化为二进制标记（存在=1，不存在=0）</li><li>现代发展：从简单0/1标记发展为带权重的实数表示（如金箍棒:0.82）</li><li>类比理解：可视为更精确的关键词检索系统</li></ul><h1 id="向量类型的对比"><a href="#向量类型的对比" class="headerlink" title="向量类型的对比"></a>向量类型的对比</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250815094142413.png" alt="image-20250815094142413" style="zoom:50%;" /></p><ul><li>主要类型：<ul><li>Float Vector（密集嵌入）</li><li>Sparse Float Vector（稀疏实数向量）</li><li>Binary Vector（稀疏嵌入简化形式）</li></ul></li></ul><h2 id="Sparse-Float-Vector（稀疏实数向量）"><a href="#Sparse-Float-Vector（稀疏实数向量）" class="headerlink" title="Sparse Float Vector（稀疏实数向量）"></a>Sparse Float Vector（稀疏实数向量）</h2><ul><li>存储方式：键值对表示（如(1:0.5, 5:-0.3, 8:0.7)）</li><li>特点：<ul><li>只存储非零值</li><li>维度可以非常大（几万维）</li><li>现代稀疏向量包含权重值（非简单0/1）</li></ul></li></ul><h2 id="Binary-Vector（稀疏嵌入的简化形式）"><a href="#Binary-Vector（稀疏嵌入的简化形式）" class="headerlink" title="Binary Vector（稀疏嵌入的简化形式）"></a>Binary Vector（稀疏嵌入的简化形式）</h2><ul><li>特点：<ul><li>仅包含0和1</li><li>表示特征存在与否</li><li>推荐系统中用户画像的典型表示方式</li></ul></li><li>示例：淘宝用户标签系统（性别、消费偏好等）</li></ul><h2 id="稀疏嵌入与密集嵌入的关系"><a href="#稀疏嵌入与密集嵌入的关系" class="headerlink" title="稀疏嵌入与密集嵌入的关系"></a>稀疏嵌入与密集嵌入的关系</h2><ul><li>实现形式：<ul><li>密集嵌入 → Float Vector</li><li>稀疏嵌入 → Binary Vector或Sparse Float Vector</li></ul></li><li>核心区别：<ul><li>密集嵌入所有位置都有值</li><li>稀疏嵌入大部分位置为0</li></ul></li></ul><h1 id="BM25：典型的稀疏嵌入实现"><a href="#BM25：典型的稀疏嵌入实现" class="headerlink" title="BM25：典型的稀疏嵌入实现"></a>BM25：典型的稀疏嵌入实现</h1><p>文本：“猢狲施展烈焰拳，击退妖怪；随后开启金刚体，抵挡神兵攻击。”如词表包含10 000个词，但作为稀疏向量只有特定维度有值，例如103维、302维等，分别对应“金刚体”“灭神纪”“猢狲”等词的权重。</p><script type="math/tex; mode=display">\text{score}(w) = \text{IDF}(w) \cdot \frac{\text{TF}(w) \cdot (k_1 + 1)}{\text{TF}(w) + k_1 \cdot \left(1 - b + b \cdot \frac{\text{文档长度}}{\text{平均文档长度}}\right)}</script><ul><li>参数说明：<ul><li>﻿$k_1$﻿：控制词频对权重的影响（取值1-2）</li><li>﻿$b$﻿：文档长度归一化参数（0-1）</li></ul></li><li>参数调整：<ul><li>文档长度差异大时增加b值</li><li>强调词频重要性时增加k1值</li></ul></li></ul><script type="math/tex; mode=display">\text{IDF}(w) = \log \frac{\text{总文档数} - \text{包含词 } w \text{ 的文档数} + 0.5}{\text{包含词 } w \text{ 的文档数} + 0.5} + 1</script><ul><li><h6 id="词频（TF）的解释与计算"><a href="#词频（TF）的解释与计算" class="headerlink" title="词频（TF）的解释与计算"></a>词频（TF）的解释与计算</h6><ul><li>计算方式：词在当前文档中出现的次数</li><li>示例：”悟空”出现3次则TF=3</li><li>基础作用：单独使用TF即可生成简单稀疏向量</li></ul></li><li><h6 id="逆文档频率（IDF）的概念与重要性"><a href="#逆文档频率（IDF）的概念与重要性" class="headerlink" title="逆文档频率（IDF）的概念与重要性"></a>逆文档频率（IDF）的概念与重要性</h6><ul><li>定义：衡量词在所有文档中的全局重要性</li><li>核心思想：<ul><li>在所有文档中频繁出现的词（如”的”、”是”）重要性低</li><li>在少数文档中高频出现的词重要性高</li></ul></li></ul></li></ul><h2 id="BM25的应用实例与解释"><a href="#BM25的应用实例与解释" class="headerlink" title="BM25的应用实例与解释"></a>BM25的应用实例与解释</h2><ul><li>示例文本：”猢狲施展烈焰拳，击退妖怪；随后开启金刚体，抵挡神兵攻击”</li><li>处理过程：<ul><li>万维词表中只有特定维度有值（如103维”金刚体”）</li><li>计算各关键词的BM25得分</li></ul></li><li>比较示例：<ul><li>“金箍棒”在段落出现3次，全局出现少 → 高分</li><li>“悟空”在段落出现3次，但全局出现万次 → 相对低分</li></ul></li></ul><h2 id="BM25在大模型时代的应用价值"><a href="#BM25在大模型时代的应用价值" class="headerlink" title="BM25在大模型时代的应用价值"></a>BM25在大模型时代的应用价值</h2><ul><li>快速过滤：对未出现关键词得分为0，检索效率高</li><li>精确匹配：对强特征标签（如特定武器名）检索准确</li><li>混合优势：与密集嵌入配合实现快速精确的混合检索</li></ul><p>示例代码：稀疏向量的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/8/15 10:01</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 猢狲的战斗日志</span></span><br><span class="line">battle_logs = [</span><br><span class="line">    <span class="string">&quot;猢狲，施展，烈焰拳，击退，妖怪；随后开启，金刚体，抵挡，神兵，攻击。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;妖怪，使用，寒冰箭，攻击，猢狲，但被，烈焰拳，反击，击溃。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;猢狲，召唤，烈焰拳，与，毁灭咆哮，击败，妖怪，随后，收集，妖怪，精华。&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># 超参数</span></span><br><span class="line">k1 = <span class="number">1.5</span></span><br><span class="line">b = <span class="number">0.75</span></span><br><span class="line"><span class="comment"># 构建词表</span></span><br><span class="line">vocabulary = <span class="built_in">set</span>(word <span class="keyword">for</span> log <span class="keyword">in</span> battle_logs <span class="keyword">for</span> word <span class="keyword">in</span> log.split(<span class="string">&quot;，&quot;</span>))</span><br><span class="line">vocab_to_idx = &#123;word: idx <span class="keyword">for</span> idx, word <span class="keyword">in</span> <span class="built_in">enumerate</span>(vocabulary)&#125;</span><br><span class="line"><span class="comment"># 计算IDF</span></span><br><span class="line">N = <span class="built_in">len</span>(battle_logs)</span><br><span class="line">df = Counter(word <span class="keyword">for</span> log <span class="keyword">in</span> battle_logs <span class="keyword">for</span> word <span class="keyword">in</span> <span class="built_in">set</span>(log.split(<span class="string">&quot;，&quot;</span>)))</span><br><span class="line">idf = &#123;word: math.log((N - df[word] + <span class="number">0.5</span>) / (df[word] + <span class="number">0.5</span>) + <span class="number">1</span>) <span class="keyword">for</span> word <span class="keyword">in</span> vocabulary&#125;</span><br><span class="line"><span class="comment"># 日志长度信息</span></span><br><span class="line">avg_log_len = <span class="built_in">sum</span>(<span class="built_in">len</span>(log.split(<span class="string">&quot;，&quot;</span>)) <span class="keyword">for</span> log <span class="keyword">in</span> battle_logs) / N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># BM25稀疏嵌入生成</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bm25_sparse_embedding</span>(<span class="params">log</span>):</span><br><span class="line">    tf = Counter(log.split(<span class="string">&quot;，&quot;</span>))</span><br><span class="line">    log_len = <span class="built_in">len</span>(log.split(<span class="string">&quot;，&quot;</span>))</span><br><span class="line">    embedding = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> word, freq <span class="keyword">in</span> tf.items():</span><br><span class="line">        <span class="keyword">if</span> word <span class="keyword">in</span> vocabulary:</span><br><span class="line">            idx = vocab_to_idx[word]</span><br><span class="line">            score = idf[word] * (freq * (k1 + <span class="number">1</span>)) / (freq + k1 * (<span class="number">1</span> - b + b * log_len / avg_log_len))</span><br><span class="line">            embedding[idx] = score</span><br><span class="line">    <span class="keyword">return</span> embedding</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成稀疏向量</span></span><br><span class="line"><span class="keyword">for</span> log <span class="keyword">in</span> battle_logs:</span><br><span class="line">    sparse_embedding = bm25_sparse_embedding(log)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;稀疏嵌入： <span class="subst">&#123;sparse_embedding&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果，内容输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">稀疏嵌入： &#123;1: 0.12572760993867385, 21: 0.9235080629006516, 2: 0.12572760993867385, 11: 0.9235080629006516, 10: 0.9235080629006516, 7: 0.9235080629006516, 19: 0.6429294928361478, 12: 0.9235080629006516, 3: 0.9235080629006516, 16: 0.9235080629006516&#125;</span><br></pre></td></tr></table></figure><h3 id="LangChain实现BM25的嵌入检索"><a href="#LangChain实现BM25的嵌入检索" class="headerlink" title="LangChain实现BM25的嵌入检索"></a>LangChain实现BM25的嵌入检索</h3><p>安装包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install rank_bm25</span><br></pre></td></tr></table></figure><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/8/15 10:06</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> langchain_community.retrievers <span class="keyword">import</span> BM25Retriever  <span class="comment"># pip install rank_bm25</span></span><br><span class="line"><span class="keyword">from</span> langchain_community.vectorstores <span class="keyword">import</span> Chroma  <span class="comment"># pip install chromadb</span></span><br><span class="line"><span class="keyword">from</span> langchain_core.documents <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> langchain_core.prompts <span class="keyword">import</span> ChatPromptTemplate</span><br><span class="line"><span class="keyword">from</span> langchain_openai <span class="keyword">import</span> ChatOpenAI</span><br><span class="line"></span><br><span class="line">battle_logs = [</span><br><span class="line">    <span class="string">&quot;猢狲身披锁子甲。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;猢狲在无回谷遭遇了妖怪，妖怪开始攻击，猢狲使用铜云棒抵挡。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;猢狲施展烈焰拳击退妖怪随后开启金刚体抵挡神兵攻击。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;妖怪使用寒冰箭攻击猢狲但被烈焰拳反击击溃。&quot;</span>,</span><br><span class="line">    <span class="string">&quot;猢狲召唤烈焰拳与毁灭咆哮击败妖怪随后收集妖怪精华。&quot;</span></span><br><span class="line">]</span><br><span class="line">request = <span class="string">&quot;猢狲有什么装备和招数？&quot;</span></span><br><span class="line"></span><br><span class="line">bm25_retriever = BM25Retriever.from_texts(battle_logs)</span><br><span class="line">bm25_response = bm25_retriever.invoke(request)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;BM25检索结果：\n<span class="subst">&#123;bm25_response&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">docs = [Document(page_content=log) <span class="keyword">for</span> log <span class="keyword">in</span> battle_logs]</span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 设置嵌入模型</span></span><br><span class="line"><span class="keyword">from</span> langchain_huggingface <span class="keyword">import</span> HuggingFaceEmbeddings  <span class="comment"># pip install langchain-huggingface</span></span><br><span class="line"></span><br><span class="line">embeddings = HuggingFaceEmbeddings(</span><br><span class="line">    model_name=<span class="string">&quot;BAAI/bge-small-zh&quot;</span>,</span><br><span class="line">    model_kwargs=&#123;<span class="string">&#x27;device&#x27;</span>: <span class="string">&#x27;cpu&#x27;</span>&#125;,</span><br><span class="line">    encode_kwargs=&#123;<span class="string">&#x27;normalize_embeddings&#x27;</span>: <span class="literal">True</span>&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">chroma_vs = Chroma.from_documents(</span><br><span class="line">    docs,</span><br><span class="line">    embedding=embeddings</span><br><span class="line">    <span class="comment"># embedding=OpenAIEmbeddings(</span></span><br><span class="line">    <span class="comment">#     model=&quot;text-embedding-3-small&quot;,</span></span><br><span class="line">    <span class="comment">#     api_key=os.getenv(&quot;DEEPSEEK_API_KEY&quot;),  # 从环境变量加载API key</span></span><br><span class="line">    <span class="comment">#     base_url=os.getenv(&quot;DEEPSEEK_BASE_URL&quot;)</span></span><br><span class="line">    <span class="comment"># )</span></span><br><span class="line">)</span><br><span class="line">chroma_retriever = chroma_vs.as_retriever()</span><br><span class="line">chroma_response = chroma_retriever.invoke(request)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Chroma检索结果：\n<span class="subst">&#123;chroma_response&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hybrid_response = list(&#123;doc.page_content for doc in bm25_response&#125;) # 缺锁子甲</span></span><br><span class="line"><span class="comment"># hybrid_response = list(&#123;doc.page_content for doc in chroma_response&#125;) # 缺铜云棒</span></span><br><span class="line">hybrid_response = <span class="built_in">list</span>(&#123;doc.page_content <span class="keyword">for</span> doc <span class="keyword">in</span> bm25_response + chroma_response&#125;)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;混合检索结果：\n<span class="subst">&#123;hybrid_response&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">prompt = ChatPromptTemplate.from_template(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                基于以下上下文，回答问题。如果上下文中没有相关信息，</span></span><br><span class="line"><span class="string">                请说&quot;我无法从提供的上下文中找到相关信息&quot;。</span></span><br><span class="line"><span class="string">                上下文: &#123;context&#125;</span></span><br><span class="line"><span class="string">                问题: &#123;question&#125;</span></span><br><span class="line"><span class="string">                回答:&quot;&quot;&quot;</span></span><br><span class="line">                                          )</span><br><span class="line"></span><br><span class="line">llm = ChatOpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;DEEPSEEK_MODEL_NAME&quot;</span>),  <span class="comment"># DeepSeek API 支持的模型名称</span></span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),  <span class="comment"># 从环境变量加载API key</span></span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line">doc_content = <span class="string">&quot;\n\n&quot;</span>.join(hybrid_response)</span><br><span class="line">answer = llm.invoke(prompt.<span class="built_in">format</span>(question=request, context=doc_content))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;LLM回答：\n<span class="subst">&#123;answer.content&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="BGE-–-M3模型"><a href="#BGE-–-M3模型" class="headerlink" title="BGE – M3模型"></a>BGE – M3模型</h1><p>为什么叫作M3？</p><ul><li>多功能性（Multi-Functionality）：BGE-M3模型集成了密集检索、稀疏检索和多向量检索3种功能，能够灵活应对不同的检索需求，是目前首个实现三合一功能的嵌入模型。</li><li>多语言性（Multi-Linguality）：BGE-M3模型支持超过100种语言，具备强大的多语言和跨语言检索能力。</li><li>多粒度性（Multi-Granularity）：BGE-M3模型能够处理从短句到长达8192个token的长文档，满足不同长度文本的处理需求，上下文支持能力突出。</li></ul><p>BGE – M3实际应用—示例代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># @Time：2025/8/15 10:20</span></span><br><span class="line"><span class="comment"># @Author：jinglv</span></span><br><span class="line"><span class="keyword">from</span> FlagEmbedding <span class="keyword">import</span> BGEM3FlagModel</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    model = BGEM3FlagModel(<span class="string">&quot;BAAI/bge-m3&quot;</span>, use_fp16=<span class="literal">False</span>)</span><br><span class="line">    passage = [<span class="string">&quot;猢狲施展烈焰拳，击退妖怪；随后开启金刚体，抵挡神兵攻击。&quot;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 编码文本，获取稀疏嵌入和密集嵌入</span></span><br><span class="line">    passage_embeddings = model.encode(</span><br><span class="line">        passage,</span><br><span class="line">        return_sparse=<span class="literal">True</span>,  <span class="comment"># 返回稀疏嵌入</span></span><br><span class="line">        return_dense=<span class="literal">True</span>,  <span class="comment"># 返回密集嵌入</span></span><br><span class="line">        return_colbert_vecs=<span class="literal">True</span>  <span class="comment"># 返回多向量嵌入</span></span><br><span class="line">    )</span><br><span class="line">    <span class="comment"># 分别提取稀疏嵌入、密集嵌入和多向量嵌入</span></span><br><span class="line">    dense_vecs = passage_embeddings[<span class="string">&quot;dense_vecs&quot;</span>]</span><br><span class="line">    sparse_vecs = passage_embeddings[<span class="string">&quot;lexical_weights&quot;</span>]</span><br><span class="line">    colbert_vecs = passage_embeddings[<span class="string">&quot;colbert_vecs&quot;</span>]</span><br><span class="line">    <span class="comment"># 展示稀疏嵌入和密集嵌入的示例</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;密集嵌入维度:&quot;</span>, dense_vecs[<span class="number">0</span>].shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;密集嵌入前10维:&quot;</span>, dense_vecs[<span class="number">0</span>][:<span class="number">10</span>])  <span class="comment"># 仅显示前10维</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;稀疏嵌入总长度:&quot;</span>, <span class="built_in">len</span>(sparse_vecs[<span class="number">0</span>]))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;稀疏嵌入前10个非零值:&quot;</span>, <span class="built_in">list</span>(sparse_vecs[<span class="number">0</span>].items())[:<span class="number">10</span>])  <span class="comment"># 仅显示前10个非零值</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多向量嵌入维度:&quot;</span>, colbert_vecs[<span class="number">0</span>].shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;多向量嵌入前2个:&quot;</span>, colbert_vecs[<span class="number">0</span>][:<span class="number">2</span>])  <span class="comment"># 仅显示前2个多向量嵌入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>执行结果，输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Fetching 30 files: 100%|██████████| 30/30 [03:36&lt;00:00,  7.20s/it]</span><br><span class="line">You&#x27;re using a XLMRobertaTokenizerFast tokenizer. Please note that with a fast tokenizer, using the `__call__` method is faster than using a method to encode the text followed by a call to the `pad` method to get a padded encoding.</span><br><span class="line">密集嵌入维度: (1024,)</span><br><span class="line">密集嵌入前10维: [ 0.01156895  0.02439202 -0.02763914 -0.00984312 -0.04426081 -0.02911922</span><br><span class="line">  0.03953079  0.02165183  0.01074662 -0.03528604]</span><br><span class="line">稀疏嵌入总长度: 23</span><br><span class="line">稀疏嵌入前10个非零值: [(&#x27;6&#x27;, np.float32(0.07354035)), (&#x27;28323&#x27;, np.float32(0.07607667)), (&#x27;8869&#x27;, np.float32(0.15832472)), (&#x27;48124&#x27;, np.float32(0.16404548)), (&#x27;213212&#x27;, np.float32(0.20880702)), (&#x27;75133&#x27;, np.float32(0.25368148)), (&#x27;4&#x27;, np.float32(0.05709526)), (&#x27;31833&#x27;, np.float32(0.11104022)), (&#x27;12461&#x27;, np.float32(0.18773066)), (&#x27;101184&#x27;, np.float32(0.18636808))]</span><br><span class="line">多向量嵌入维度: (26, 1024)</span><br><span class="line">多向量嵌入前2个: [[-0.05067743  0.00912711 -0.0287432  ...  0.0251329   0.05133016</span><br><span class="line">  -0.00171831]</span><br><span class="line"> [-0.03439403 -0.00773524 -0.01304412 ...  0.01616604  0.01929808</span><br><span class="line">   0.01006441]]</span><br></pre></td></tr></table></figure><ul><li>典型输出维度:<ul><li>密集嵌入: 1024维向量（如[0.01, -0.82, 0.03,…]）</li><li>稀疏嵌入: 约30万维中几十个非零值（如{‘6’:0.073, ‘28323’:0.076}）</li><li>多向量嵌入: (token数, 1024)矩阵（如26个token生成26×1024矩阵）</li></ul></li></ul><h2 id="核心内容总结"><a href="#核心内容总结" class="headerlink" title="核心内容总结"></a>核心内容总结</h2><ul><li>混合检索优势:<ul><li>稀疏检索: 快速定位含关键词文档（如”烈焰拳”）</li><li>密集检索: 按语义相似度排序（如”战斗激烈”场景）</li><li>多向量检索: 精细匹配token级关系（重排序场景）</li></ul></li><li>典型应用场景:<ul><li>多语言场景: 密集检索主导跨语言匹配</li><li>长文档场景: 稀疏检索捕捉关键信息</li><li>高精度需求: 多向量检索提升排序质量</li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第十七讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量嵌入之多模态嵌入技术</title>
    <link href="https://jinglv.github.io/2025/08/15/ai/rag/18-embedding-multi/"/>
    <id>https://jinglv.github.io/2025/08/15/ai/rag/18-embedding-multi/</id>
    <published>2025-08-14T16:00:00.000Z</published>
    <updated>2025-08-15T02:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多模态的RAG系统"><a href="#多模态的RAG系统" class="headerlink" title="多模态的RAG系统"></a>多模态的RAG系统</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250815103626944.png" alt="image-20250815103626944"></p><h1 id="Visualized-BGE模型"><a href="#Visualized-BGE模型" class="headerlink" title="Visualized_BGE模型"></a>Visualized_BGE模型</h1><p>GitHub地址：<a href="https://github.com/FlagOpen/FlagEmbedding/blob/master/research/visual_bge/README.md">https://github.com/FlagOpen/FlagEmbedding/blob/master/research/visual_bge/README.md</a></p><ul><li><p>多模态处理能力：在同一模型框架下同时处理图像和文本数据，支持图片和文字的双模态编码。</p></li><li><p>统一嵌入空间：将不同模态的数据映射到同一向量空间，便于进行跨模态的相似度计算与检索。</p></li><li><p>跨模态检索：实现图文互搜功能，例如根据文字描述检索相关图片，或根据图片检索匹配的文字描述。</p></li><li><p>安装注意事项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/FlagOpen/FlagEmbedding.git</span><br><span class="line">cd FlagEmbedding/research/visual_bge</span><br><span class="line">pip install -e .</span><br></pre></td></tr></table></figure></li></ul><ul><li>需要单独安装visual_bge子模块，不能通过安装FlagEmbedding整体包自动包含</li><li>必须从FlagEmbedding/research/visual_bge目录进行安装</li><li>核心依赖包：torchvision、timm、einops、ftfy —  <code>pip install torchvision timm einops ftfy</code></li><li>非必要包：xformer和apex可省略，可能引起安装问题</li></ul><ul><li><p>模型支持：</p><ul><li>目前仅支持两种基础模型：BAAI/bge-base-en-v1.5（768维）和BAAI/bge-m3（1024维）</li><li>每个基础模型对应一对文本和视觉权重文件（约374MB）</li><li>权重文件需要手动下载并指定路径</li></ul></li><li><p>编码方式：</p><ul><li>支持纯图片编码、纯文本编码以及图文混合编码</li><li>通过model.encode()方法实现，参数可单独或组合传入image和text</li></ul></li></ul><h1 id="多模态嵌入简单示例"><a href="#多模态嵌入简单示例" class="headerlink" title="多模态嵌入简单示例"></a>多模态嵌入简单示例</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><ul><li>编码实践：<ul><li>纯图片编码：仅传入image_path参数</li><li>多模态编码：同时传入image_path和描述文本</li><li>输出向量维度：base-en-v1.5为768维，m3为1024维</li></ul></li><li>权重参数设计：<ul><li>混合检索中weights参数控制稀疏和稠密向量的相对重要性</li><li>权重值不需要总和为1，表示的是比例关系（如0.7:1.0）</li><li>实际应用中可根据检索效果动态调整权重比例</li></ul></li><li>编码结果差异：<ul><li>纯图片嵌入向量示例值：[0.81775758, -0.02236984, …]</li><li>多模态嵌入向量示例值：[0.02968888, -0.02825667, …]</li><li>向量范数：纯图片为1.0，多模态为0.9999999403953552</li></ul></li><li>应用场景：<ul><li>电商推荐系统：通过图片检索相似产品</li><li>内容管理：对图文博客进行多模态编码和检索</li><li>游戏场景检索：基于战斗场景图片查找类似游戏画面</li></ul></li></ul><h1 id="嵌入技术的最新进展"><a href="#嵌入技术的最新进展" class="headerlink" title="嵌入技术的最新进展"></a>嵌入技术的最新进展</h1><ul><li><p>发展方向</p><ul><li><p>多语言、多模态、轻量化、性价比、长窗口、高维度</p></li><li><p>Matryoshka Representation Learning (MRL)</p></li><li><p>领域特定嵌入（Voyage AI 的 voyage-finance-2）</p></li><li><p>图嵌入（知识图谱集成）</p></li><li><p>自适应和上下文感知 embedding / 上下文理解能力的增强</p></li><li><p>层次化表征学习</p></li><li><p>更细致的评估</p></li></ul></li><li><p>主流方向：</p><ul><li>多语言与多模态支持</li><li>轻量化部署与性价比优化</li><li>长上下文窗口处理能力</li><li>高维度表征能力</li></ul></li><li>创新技术：<ul><li>套娃式嵌入学习(MRL)：分层级学习不同维度的表征（如64维、512维、1024维）</li><li>领域特定嵌入：如金融专用模型voyage-finance-2</li><li>知识图谱集成：图嵌入技术的开发应用</li></ul></li><li>前沿研究：<ul><li>自适应和上下文感知嵌入</li><li>层次化语义表征学习</li><li>更精细的评估方法论</li></ul></li><li>技术特点：<ul><li>俄罗斯套娃式嵌入允许各取所需，适应不同计算资源场景</li><li>层次化表征可捕捉从标题到细节的语义层次</li><li>领域专用模型在特定场景表现更优</li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第十八讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--向量嵌入之大模型时代的嵌入技术</title>
    <link href="https://jinglv.github.io/2025/08/14/ai/rag/16-embedding-llm/"/>
    <id>https://jinglv.github.io/2025/08/14/ai/rag/16-embedding-llm/</id>
    <published>2025-08-13T16:00:00.000Z</published>
    <updated>2025-08-14T01:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MTEB排行榜"><a href="#MTEB排行榜" class="headerlink" title="MTEB排行榜"></a>MTEB排行榜</h1><p>Hugging Face MTEB地址：<a href="https://huggingface.co/spaces/mteb/leaderboard">https://huggingface.co/spaces/mteb/leaderboard</a></p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250814090707154.png" alt="image-20250814090707154" style="zoom:67%;" /></p><ul><li>模型筛选工具: 在大语言时代嵌入模型选择过多的情况下，MTEB排行榜可作为基础过滤工具，帮助从开源嵌入模型中筛选合适的模型。</li><li>四维度评估: 通过模型大小、能力分数、嵌入维度和最大token数四个维度进行综合评估。</li></ul><h2 id="模型大小维度"><a href="#模型大小维度" class="headerlink" title="模型大小维度"></a>模型大小维度</h2><ul><li>参数规模范围: 从$1B$﻿到$100B$﻿不等，但主流模型多在$10B$﻿以下。</li><li>硬件适配性: 中等GPU配置（如双卡4090+32GB内存）即可运行大多数主流嵌入模型。</li><li>开源特性: MTEB排行榜仅评估开源嵌入模型，不包括闭源商业模型。</li></ul><h2 id="模型能力维度"><a href="#模型能力维度" class="headerlink" title="模型能力维度"></a>模型能力维度</h2><ul><li>评分机制: 通过58个数据集在8大类NLP任务上的平均表现(MAP)计算得出。</li><li>任务覆盖: 包括分类、聚类、检索等多种任务类型，反映模型综合能力。</li><li>专业模型特点: 某些模型可能在特定任务上表现突出，但排行榜显示的是平均能力。</li></ul><h2 id="嵌入维度大小"><a href="#嵌入维度大小" class="headerlink" title="嵌入维度大小"></a>嵌入维度大小</h2><ul><li>可视化表示: 通过气泡图大小展示，维度越大表示能捕捉更细微的特征差异。</li><li>参数关系: 通常参数越大的模型支持更大的嵌入维度，但存在例外情况（如某些﻿$1B$﻿参数的模型嵌入维度特别大）。</li><li>典型范围: 小模型家族嵌入维度偏小，大模型家族嵌入维度偏大。</li></ul><h2 id="Max-Tokens维度"><a href="#Max-Tokens维度" class="headerlink" title="Max Tokens维度"></a>Max Tokens维度</h2><ul><li>颜色编码: 通过不同颜色区分模型支持的最大token数（如7K、10K等）。</li><li>实际应用建议: 虽然支持长上下文，但建议将文本切分为1000token以内的段落进行嵌入，更利于语义把握。</li><li>重要性: 长上下文支持能力对某些应用场景（如文档整体嵌入）很关键。</li></ul><h1 id="MTEB划分任务类别-（八大任务）"><a href="#MTEB划分任务类别-（八大任务）" class="headerlink" title="MTEB划分任务类别 （八大任务）"></a>MTEB划分任务类别 （八大任务）</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250814092155178.png" alt="image-20250814092155178" style="zoom:50%;" /></p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250814092225655.png" alt="image-20250814092225655" style="zoom:50%;" /></p><h2 id="聚类"><a href="#聚类" class="headerlink" title="聚类"></a>聚类</h2><ul><li>核心目标: 将语义相似的文本无监督地聚在一起。</li><li>典型应用: 文档组织、主题发现。</li><li>数据集示例: Arxiv、Biorxiv、Medrxiv等学术论文数据集，测试P2P(论文对)、S2S(句对)等聚类能力。</li></ul><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ul><li>监督学习: 基于已标注数据训练，预测新文本类别。</li><li>应用场景: 情感分析（如IMDB影评）、意图识别、话题分类。</li><li>数据集: AmazonPolarity、Emotion、Banking77等。</li></ul><h2 id="双语挖掘"><a href="#双语挖掘" class="headerlink" title="双语挖掘"></a>双语挖掘</h2><ul><li>任务特点: 跨语言句子对齐，用于机器翻译训练数据自动生成。</li><li>数据集: BUCC、Tatoeba等双语平行语料库。</li></ul><h2 id="STS"><a href="#STS" class="headerlink" title="STS"></a>STS</h2><ul><li>回归任务: 评估两个句子语义相似度（0-5分）。</li><li>应用: 相似问句匹配、客服问答对匹配。</li><li>数据集: STS12-16、STSBenchmark等。</li></ul><h2 id="对分类"><a href="#对分类" class="headerlink" title="对分类"></a>对分类</h2><ul><li>关系判断: 识别文本对间特定关系（如FAQ中的问题-答案对）。</li><li>与大模型关系: 这类任务在大模型时代已变得相对简单。</li></ul><h2 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h2><ul><li>核心应用: RAG系统、文档检索。</li><li>数据集覆盖: HotpotQA、MSMARCO等，涵盖问答、科学文献多领域。</li><li>任务整合: 可包含聚类、分类、STS等多种子任务。</li></ul><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li>评估方式: 通过嵌入相似度比较生成摘要与参考摘要的一致性。</li><li>数据集: SummEval等摘要质量评估数据集。</li></ul><h2 id="重排序"><a href="#重排序" class="headerlink" title="重排序"></a>重排序</h2><ul><li>RAG关键环节: 对候选答案进行相关性重排序。</li><li>数据集: AskUbuntu、StackOverflow等社区问答数据。</li></ul><h1 id="嵌入式模型排行榜"><a href="#嵌入式模型排行榜" class="headerlink" title="嵌入式模型排行榜"></a>嵌入式模型排行榜</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250814092638532.png" alt="image-20250814092638532" style="zoom:50%;" /></p><ul><li>榜单概况：展示当前领先的嵌入式模型排名，包含模型性能指标如Zero-shot准确率、内存使用量等关键参数</li><li>商业与开源区别：榜首gemini-embedding-001(Google)为商业API调用模型，不提供开源下载</li></ul><p>其中的排名第六的gte-Qwen2-7B-instruct（千问系列的模型），基于290亿参数，支持4096维嵌入，Zero-shot准确率未标注(NA)</p><h1 id="OpenAI嵌入式模型"><a href="#OpenAI嵌入式模型" class="headerlink" title="OpenAI嵌入式模型"></a>OpenAI嵌入式模型</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250814093506745.png" alt="image-20250814093506745" style="zoom:50%;" /></p><ul><li>产品矩阵：<ul><li>text-embedding-3-small：性价比高(62.5页/美元)，MTEB得分62.3%</li><li>text-embedding-3-large：高性能(9.615页/美元)，MTEB得分64.6%</li></ul></li><li>成本计算：处理100万行医学名词数据约需1美元(small版更便宜)</li><li>技术优势：受益于GPT家族语料积累，支持8191 tokens长文本输入</li></ul><h1 id="BGE嵌入式模型"><a href="#BGE嵌入式模型" class="headerlink" title="BGE嵌入式模型"></a>BGE嵌入式模型</h1><p>Github地址：<a href="https://github.com/FlagOpen/FlagEmbedding">https://github.com/FlagOpen/FlagEmbedding</a></p><ul><li>开发背景：由北京智源研究院(FlagOpen)推出的开源检索增强工具包</li><li>核心功能：<ul><li>支持向量/密集向量混合检索</li><li>包含Embedder和Reranker双模型系统</li><li>多语言支持(含专门优化中文的版本)</li></ul></li><li>安装方式：</li><li>最新进展：BGE-VL支持多模态嵌入，MIT许可证允许商业使用</li></ul><h1 id="Jina嵌入式模型"><a href="#Jina嵌入式模型" class="headerlink" title="Jina嵌入式模型"></a>Jina嵌入式模型</h1><p>官方网址：<a href="https://jina.ai/models#catalog">https://jina.ai/models#catalog</a></p><ul><li>v3版本特性：<ul><li>5.7亿参数</li><li>支持8192 tokens长文本</li><li>输出维度1024(可截断至32维)</li></ul></li><li>商业授权：提供标准企业许可证(5000美元/季度)和定制训练服务</li><li>技术亮点：采用LoRA适配器，针对不同任务(检索/聚类/分类)优化</li></ul><h1 id="其他Embedding模型的供应商"><a href="#其他Embedding模型的供应商" class="headerlink" title="其他Embedding模型的供应商"></a>其他Embedding模型的供应商</h1><ul><li>Voyage AI：<a href="https://docs.voyageai.com/docs/embeddings">https://docs.voyageai.com/docs/embeddings</a></li><li>Cohere Embeddings：<a href="https://docs.cohere.com/v2/docs/embeddings">https://docs.cohere.com/v2/docs/embeddings</a><ul><li>产品定位：商业API服务，与OpenAI形成竞争</li><li>典型应用：语义搜索/聚类/分类任务</li><li>性能表现：处于行业前列但非顶尖水平</li></ul></li><li>开源模型Stella：<a href="https://huggingface.co/models?sort=trending&amp;search=Stella">https://huggingface.co/models?sort=trending&amp;search=Stella</a><ul><li>核心优势：轻量化设计(400M/1.5B参数)</li><li>训练基础：基于Alibaba-NLP/gte系列模型优化</li><li>使用场景：适合资源受限环境下的检索任务</li><li>开源协议：MIT许可证允许自由使用</li></ul></li></ul><h1 id="选型的Tips"><a href="#选型的Tips" class="headerlink" title="选型的Tips"></a>选型的Tips</h1><ul><li>口碑重要性：网络口碑是首要考虑因素，用户基数大的模型通常社区支持更好，长期维护更有保障</li><li>评估维度：<ul><li>具体任务适配性：需考察模型在目标场景的实际表现</li><li>实操体验：实际使用过程中的感受至关重要</li><li>授权与成本：需权衡开源/商用、价格、计算资源需求、语言支持等因素</li></ul></li><li>口碑验证方法：通过技术社区讨论热度、持续维护情况、用户反馈等维度综合判断</li></ul><h2 id="国外的讨论社区"><a href="#国外的讨论社区" class="headerlink" title="国外的讨论社区"></a>国外的讨论社区</h2><ul><li><p>Reddit：<a href="https://www.reddit.com/">https://www.reddit.com/</a></p><ul><li>例如查询模型r/LocalLLaMA等专业技术社区是获取真实使用反馈的重要渠道</li><li>典型讨论方式：发起具体应用场景的技术咨询（如RAG场景下的embedding模型选择）</li></ul></li><li><p>模型使用案例：</p><ul><li>all-mpnet-base-v2：早期经典选择，配合FAISS/KDTree效果稳定</li><li>BGE系列：虽benchmark表现优异但可能存在过拟合MTEB数据集的问题</li><li>千问/Qwen系列：部分用户反馈其实际表现优于benchmark指标</li></ul></li><li>小型模型价值：<ul><li>all-MiniLM-L6-v2等小型模型可作为baseline参考</li><li>新模型需至少超越这些基础模型的性能表现</li></ul></li><li>评估建议：<ul><li>需结合具体业务场景测试（如新闻处理、客服知识库等不同场景需求差异大）</li><li>注意chunk大小、查询生成方式等实施细节对效果的影响</li><li>中文模型需特别注意benchmark分数与实际效果的差异</li></ul></li><li>典型技术讨论：<ul><li>维度问题：llama-2-7B的4096维可能因维度稀释导致近邻搜索效果下降</li><li>模型类型：基础模型通常比对话模型更适合生成embedding</li><li>规模影响：小规模测试(400条)与大规模应用(4万条)可能表现不同</li></ul></li><li>实用工具链：<ul><li>常用组合：SentenceTransformers+FAISS/Qdrant</li><li>轻量方案：all-MiniLM-L6-v2+HyperDB适合文档量&lt;10万的场景</li></ul></li></ul><h2 id="文本嵌入模型评估与选择"><a href="#文本嵌入模型评估与选择" class="headerlink" title="文本嵌入模型评估与选择"></a>文本嵌入模型评估与选择</h2><p>网上公开的论文、文章等，例如：<a href="https://www.datastax.com/blog/best-embedding-models-information-retrieval-2025">https://www.datastax.com/blog/best-embedding-models-information-retrieval-2025</a></p><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250814095224872.png" alt="image-20250814095224872" style="zoom:50%;" /></p><ul><li>评估背景：针对RAG(检索增强生成)任务，2025年最新研究对多种商业和开源嵌入模型进行了系统性评测</li><li>测试对象：包含OpenAI、Gemini、Jina、Cohere、Voyage等商业模型，以及Stella、ModernBERT等开源模型</li></ul><p>从以上文章和内容，我们可以得出一些信息：</p><h3 id="模型对比与评估方法"><a href="#模型对比与评估方法" class="headerlink" title="模型对比与评估方法"></a>模型对比与评估方法</h3><ul><li>商业模型组：<ul><li>OpenAI：text-embedding-3-large(3072维)和small(1536维)</li><li>Gemini：text-embedding-004(768维，通过API获取)</li><li>第三方模型：Jina v3、Cohere v3、Voyage系列</li></ul></li><li>开源模型组：<ul><li>Stella：测试400M和1.5B两个版本（MIT许可）</li><li>ModernBERT：Base和Large变体，基于Answer.AI技术</li></ul></li><li>评估创新点：<ul><li>数据集构建：采用ViDoRe图像搜索基准，通过GeminiFlash 1.5进行OCR转换</li><li>避免数据泄露：刻意不使用常见文本数据集，确保模型面对全新数据</li><li>多语言测试：包含英语和法语数据，检验模型泛化能力</li></ul></li></ul><h3 id="Voyage-3-large的优势"><a href="#Voyage-3-large的优势" class="headerlink" title="Voyage-3-large的优势"></a>Voyage-3-large的优势</h3><ul><li>显著优势：<ul><li>在嵌入相关性任务中表现突出，明显优于其他商业模型</li><li>支持2048维高精度输出，适合对质量要求严格的场景</li></ul></li><li>团队背景：由马腾宇团队开发，在reranker技术上有深厚积累</li><li>性价比选择：Voyage-3-lite(512维)在低成本端表现同样出色</li></ul><h3 id="Gemini-004的特点"><a href="#Gemini-004的特点" class="headerlink" title="Gemini 004的特点"></a>Gemini 004的特点</h3><ul><li>核心优势：<ul><li>价格接近免费，速率限制合理(1500RPM)</li><li>768维输出平衡了性能与成本</li></ul></li><li>局限性：<ul><li>仅支持英语处理</li><li>无法通过付费提升吞吐量</li><li>企业版text-embedding-005尚未开放API访问</li></ul></li></ul><h3 id="开源模型表现"><a href="#开源模型表现" class="headerlink" title="开源模型表现"></a>开源模型表现</h3><ul><li>Stella亮点：<ul><li>400M版本在MTEB检索榜表现优异</li><li>商业友好(MIT许可)，张盾团队提供详细白皮书</li><li>1.5B版本未显著提升准确率，建议优先使用400M</li></ul></li><li>ModernBERT不足：<ul><li>实际表现低于预期</li><li>期待下一代改进版本</li></ul></li></ul><h3 id="评估建议与实践方法"><a href="#评估建议与实践方法" class="headerlink" title="评估建议与实践方法"></a>评估建议与实践方法</h3><ul><li>自制数据集：<ul><li>重要性：避免公开数据集的训练泄露问题</li><li>实践方案：即使少量数据(几十个样本)也能进行基本效果验证</li></ul></li><li>评估维度：<ul><li>准确性：使用未见过的测试数据</li><li>成本效益：参数规模与价格比值</li><li>语言支持：多语言场景下的表现</li></ul></li><li>失败案例：<ul><li>Jina v3和Cohere v3性价比不足</li><li>相同预算可获得更好性能的其他模型</li></ul></li></ul><h1 id="向量嵌入应用案例"><a href="#向量嵌入应用案例" class="headerlink" title="向量嵌入应用案例"></a>向量嵌入应用案例</h1><h2 id="游戏推荐系统"><a href="#游戏推荐系统" class="headerlink" title="游戏推荐系统"></a>游戏推荐系统</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> openai</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics.pairwise <span class="keyword">import</span> cosine_similarity</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取用户评价数据集</span></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;../data/灭神纪/用户评价.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取游戏描述文件</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;../data/灭神纪/游戏说明.json&quot;</span>, <span class="string">&quot;r&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    game_descriptions = json.load(f)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数获取嵌入向量，注：text-embedding-3-small模型需要付费使用</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_embedding</span>(<span class="params">text, model=<span class="string">&quot;text-embedding-3-small&quot;</span></span>):</span><br><span class="line">    response = openai.embeddings.create(</span><br><span class="line">        <span class="built_in">input</span>=[text],</span><br><span class="line">        model=model</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">return</span> response.data[<span class="number">0</span>].embedding</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取所有游戏的嵌入向量</span></span><br><span class="line">unique_games = df[<span class="string">&#x27;game_title&#x27;</span>].unique().tolist()</span><br><span class="line">target_game = <span class="string">&quot;Killing God: Hu Sun&quot;</span>  <span class="comment"># 目标游戏名称更改</span></span><br><span class="line"><span class="keyword">if</span> target_game <span class="keyword">not</span> <span class="keyword">in</span> unique_games:</span><br><span class="line">    unique_games.append(target_game)  <span class="comment"># 确保目标游戏在列表中</span></span><br><span class="line">game_embeddings = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> game <span class="keyword">in</span> unique_games:</span><br><span class="line">    description = game_descriptions[game]</span><br><span class="line">    game_embeddings[game] = np.array(get_embedding(description))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算用户评价的嵌入向量（该用户评价过的所有游戏描述嵌入向量的平均值）</span></span><br><span class="line">user_vectors = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> user_id, group <span class="keyword">in</span> df.groupby(<span class="string">&quot;user_id&quot;</span>):</span><br><span class="line">    user_game_vecs = []</span><br><span class="line">    <span class="keyword">for</span> idx, row <span class="keyword">in</span> group.iterrows():</span><br><span class="line">        g_title = row[<span class="string">&#x27;game_title&#x27;</span>]</span><br><span class="line">        g_vec = game_embeddings[g_title]</span><br><span class="line">        user_game_vecs.append(g_vec)</span><br><span class="line">    user_vectors[user_id] = np.mean(np.array(user_game_vecs), axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取“灭神纪·猢狲”的嵌入向量</span></span><br><span class="line">target_vector = game_embeddings[target_game]</span><br><span class="line"><span class="comment"># 计算每个用户评价的嵌入向量与目标游戏的嵌入向量的余弦相似度</span></span><br><span class="line">results = []</span><br><span class="line"><span class="keyword">for</span> user_id, u_vec <span class="keyword">in</span> user_vectors.items():</span><br><span class="line">    u_vec_reshaped = u_vec.reshape(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">    t_vec = target_vector.reshape(<span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">    similarity = cosine_similarity(u_vec_reshaped, t_vec)[<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    results.append((user_id, similarity))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 排序并找出最可能喜欢“灭神纪·猢狲”的用户</span></span><br><span class="line">result_df = pd.DataFrame(results, columns=[<span class="string">&quot;user_id&quot;</span>, <span class="string">f&quot;similarity_to_<span class="subst">&#123;target_game&#125;</span>&quot;</span>])</span><br><span class="line">result_df = result_df.sort_values(by=<span class="string">f&quot;similarity_to_<span class="subst">&#123;target_game&#125;</span>&quot;</span>, ascending=<span class="literal">False</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n最可能喜欢<span class="subst">&#123;target_game&#125;</span>的前5位用户：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(result_df.head())</span><br></pre></td></tr></table></figure><ul><li>系统架构：基于OpenAI Embedding构建的游戏推荐系统，核心功能是找出最可能喜欢特定游戏的目标用户</li><li>数据准备：<ul><li>用户评论数据（CSV格式）：记录用户对各类游戏的评价</li><li>游戏描述数据（JSON格式）：包含游戏详细说明，如案例中的”灭神纪”游戏</li></ul></li><li>核心算法：<ul><li>向量生成：使用OpenAI的text-embedding-3-small模型将文本转换为向量</li><li>偏好建模：通过用户评价过的游戏描述向量的平均值表示用户偏好</li><li>相似度计算：采用余弦相似度比较用户偏好向量与目标游戏向量</li></ul></li><li>技术实现：<ul><li>使用numpy进行向量运算和均值计算</li><li>利用pandas进行数据处理和结果展示</li><li>通过sklearn的cosine_similarity计算相似度</li></ul></li><li>工作流程：<ul><li>加载所有游戏描述并生成嵌入向量</li><li>为每个用户计算偏好向量（评价游戏向量的均值）</li><li>计算目标游戏与所有用户偏好的相似度</li><li>按相似度排序输出前5位潜在用户</li></ul></li><li>实践建议：<ul><li>可替换OpenAI模型为国产开源模型（如支持中文的嵌入模型）</li><li>类似思路可用于其他推荐场景（如电影、商品推荐）</li></ul></li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第十六讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--文本分块之方法和实现</title>
    <link href="https://jinglv.github.io/2025/08/13/ai/rag/12-text-chunk/"/>
    <id>https://jinglv.github.io/2025/08/13/ai/rag/12-text-chunk/</id>
    <published>2025-08-12T16:00:00.000Z</published>
    <updated>2025-08-13T05:30:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CharacterTextSplitter-按固定字符数分块"><a href="#CharacterTextSplitter-按固定字符数分块" class="headerlink" title="CharacterTextSplitter - 按固定字符数分块"></a>CharacterTextSplitter - 按固定字符数分块</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250813133708333.png" alt="image-20250813133708333" style="zoom:67%;" /></p><ul><li>实现方式：通过CharacterTextSplitter指定chunk_size（如1000字符）和chunk_overlap（重叠字符数）</li><li>特点：<ul><li>简单粗暴，直接按字符数切割</li><li>默认以段落（\n\n）为分隔符，也可指定逗号、句号等</li><li>若段落超过设定值（如2000字符），会保持原段落不分块</li></ul></li><li>局限性：不够智能，可能破坏语义完整性</li></ul><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> CharacterTextSplitter</span><br><span class="line"></span><br><span class="line">loader = TextLoader(<span class="string">&quot;../data/山西文旅/云冈石窟.txt&quot;</span>)</span><br><span class="line">documents = loader.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置分块器，指定块的大小为50个字符，无重叠</span></span><br><span class="line">text_splitter = CharacterTextSplitter(</span><br><span class="line">    chunk_size=<span class="number">100</span>,  <span class="comment"># 每个文本块的大小为50个字符</span></span><br><span class="line">    chunk_overlap=<span class="number">0</span>,  <span class="comment"># 文本块之间没有重叠部分</span></span><br><span class="line">)</span><br><span class="line">chunks = text_splitter.split_documents(documents)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== 文档分块结果 ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n--- 第 <span class="subst">&#123;i&#125;</span> 个文档块 ---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容: <span class="subst">&#123;chunk.page_content&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;元数据: <span class="subst">&#123;chunk.metadata&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>执行结果，输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">=== 文档分块结果 ===</span><br><span class="line"></span><br><span class="line">--- 第 1 个文档块 ---</span><br><span class="line">内容: 云冈石窟</span><br><span class="line">云冈石窟位于中国北部山西省大同市西郊17公里处的武周山南麓，石窟依山开凿，东西绵延1公里。存有主要洞窟45个，大小窟龛252个，石雕造像51000余躯，为中国规模最大的古代石窟群之一，与敦煌莫高窟、洛阳龙门石窟和天水麦积山石窟并称为中国四大石窟艺术宝库。 1961年被国务院公布为全国首批重点文物保护单位，2001年12月14日被联合国教科文组织列入世界遗产名录，2007年5月8日被国家旅游局评为首批国家5A级旅游景区。</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 2 个文档块 ---</span><br><span class="line">内容: 云冈五华洞</span><br><span class="line">位于云冈石窟中部的第 9——13窟。这五窟因清代施泥彩绘云冈石窟景观而得名。五华洞雕饰绮丽，丰富多彩，是研究北魏历史、艺术、音乐、舞蹈、书法和建筑的珍贵资料，为云冈石窟群的重要组成部分。</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 3 个文档块 ---</span><br><span class="line">内容: 塔洞</span><br><span class="line">云冈东部窟群，指云冈石窟东端1——4，均为塔洞。第1、2窟为同期开的一组，凿于孝文帝迁洛前，窟内中央雕造方形塔柱，四面开龛造像。第一窟主像是弥勒，塔南面下层雕释迦多宝像，上层雕释迦像。浮雕五层小塔，是研究北魏建筑的形象资料。第二窟是释迦像，塔南面下层雕释迦多宝像，上层雕三世佛。两窟南壁窟门两侧都雕有维摩、文殊。第三窟为云冈石窟中规模最大的洞窟，前立壁高约25米，传为昙曜译经楼。</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 4 个文档块 ---</span><br><span class="line">内容: 武州山</span><br><span class="line">武周山，亦名武州山，在大同城西山中。宋《太平寰宇记》引《冀州图》云：“武周山在郡西北，东西数百里，南北五十里。山之南面，千仞壁立。”云冈石窟即因武周山南缘斩山开凿。</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">...</span><br><span class="line">--- 第 11 个文档块 ---</span><br><span class="line">内容: 1、咨询电话：0352-3206805，景区电瓶车10元/人。 2、优惠群体： （1）60周岁（含60周岁）以上老人，持本人身份证或老年证免票； （2）6周岁（含6周岁）以下或 1.2米以下儿童免票； （3）6周岁（不含6周岁）——18周岁（含18周岁）的未成年人，全日制大学本科及以下学历的学生，凭本人身份证、学生证享受半价票优惠。 （4）全日制大学本科及以学历学生，凭本人身份证、学生证享受半价票优惠。 （5）残疾人持本人身份证和第二代《中华人民共和国残疾证》免票；伤残军人持伤残军人证及本人身份证免票。 （6）现役军人凭军人保障卡免票进入。 （7）导游人员免票，需持本人导游证（不含导游资格证、经理资格证）、派团单、行程计划单。</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br></pre></td></tr></table></figure><h1 id="RecursiveCharacterTextSplitter-–-递归分块"><a href="#RecursiveCharacterTextSplitter-–-递归分块" class="headerlink" title="RecursiveCharacterTextSplitter – 递归分块"></a>RecursiveCharacterTextSplitter – 递归分块</h1><p><img src="https://jing-images.oss-cn-beijing.aliyuncs.com/img/image-20250813134158833.png" alt="image-20250813134158833" style="zoom:50%;" /></p><ul><li>实现原理：<ul><li>定义优先级分隔符列表（如[“\n\n”, “.”, “,”, “ “]）</li><li>先尝试第一个分隔符，若块过大则尝试下一个</li></ul></li><li>优势：<ul><li>切割更精细（可细化到句子、短语级别）</li><li>通过多级分隔符保证块大小接近设定值</li></ul></li><li>注意事项：<ul><li>分隔符不宜过细（如空格），否则会破坏语义</li><li>英文中”.”需注意区分小数点和句号</li></ul></li><li>对比固定分块：<ul><li>相同设定下，递归分块数更多（如100字符设定产生22块 vs 固定分块11块）</li><li>但过度分割可能导致关键信息断裂（如价格”1.5元”被拆分为”1”和”.5元”）</li></ul></li></ul><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_community.document_loaders <span class="keyword">import</span> TextLoader</span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"></span><br><span class="line">loader = TextLoader(<span class="string">&quot;../data/山西文旅/云冈石窟.txt&quot;</span>)</span><br><span class="line">documents = loader.load()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义分割符列表，按优先级依次使用</span></span><br><span class="line">separators = [<span class="string">&quot;\n\n&quot;</span>, <span class="string">&quot;.&quot;</span>, <span class="string">&quot;，&quot;</span>, <span class="string">&quot; &quot;</span>] <span class="comment"># . 是句号，， 是逗号， 是空格</span></span><br><span class="line"><span class="comment"># 创建递归分块器，并传入分割符列表</span></span><br><span class="line">text_splitter = RecursiveCharacterTextSplitter(</span><br><span class="line">    chunk_size=<span class="number">100</span>,</span><br><span class="line">    chunk_overlap=<span class="number">10</span>,</span><br><span class="line">    separators=separators</span><br><span class="line">)</span><br><span class="line">chunks = text_splitter.split_documents(documents)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== 文档分块结果 ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(chunks, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n--- 第 <span class="subst">&#123;i&#125;</span> 个文档块 ---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容: <span class="subst">&#123;chunk.page_content&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;元数据: <span class="subst">&#123;chunk.metadata&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>执行结果，输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">=== 文档分块结果 ===</span><br><span class="line"></span><br><span class="line">--- 第 1 个文档块 ---</span><br><span class="line">内容: 云冈石窟</span><br><span class="line">云冈石窟位于中国北部山西省大同市西郊17公里处的武周山南麓，石窟依山开凿，东西绵延1公里。存有主要洞窟45个，大小窟龛252个，石雕造像51000余躯，为中国规模最大的古代石窟群之一</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 2 个文档块 ---</span><br><span class="line">内容: ，与敦煌莫高窟、洛阳龙门石窟和天水麦积山石窟并称为中国四大石窟艺术宝库。 1961年被国务院公布为全国首批重点文物保护单位，2001年12月14日被联合国教科文组织列入世界遗产名录</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 3 个文档块 ---</span><br><span class="line">内容: ，2007年5月8日被国家旅游局评为首批国家5A级旅游景区。</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 4 个文档块 ---</span><br><span class="line">内容: 云冈五华洞</span><br><span class="line">位于云冈石窟中部的第 9——13窟。这五窟因清代施泥彩绘云冈石窟景观而得名。五华洞雕饰绮丽，丰富多彩，是研究北魏历史、艺术、音乐、舞蹈、书法和建筑的珍贵资料</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">...</span><br><span class="line">--- 第 22 个文档块 ---</span><br><span class="line">内容: ，需持本人导游证（不含导游资格证、经理资格证）、派团单、行程计划单。</span><br><span class="line">元数据: &#123;&#x27;source&#x27;: &#x27;../data/山西文旅/云冈石窟.txt&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br></pre></td></tr></table></figure><h1 id="分块的重要性"><a href="#分块的重要性" class="headerlink" title="分块的重要性"></a>分块的重要性</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line">load_dotenv()   </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> llama_index.llms.openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> llama_index.embeddings.openai <span class="keyword">import</span> OpenAIEmbedding</span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> VectorStoreIndex</span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> llama_index.readers.file <span class="keyword">import</span> PDFReader</span><br><span class="line"><span class="keyword">from</span> llama_index.core.node_parser <span class="keyword">import</span> SentenceSplitter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">embed_model = OpenAIEmbedding(model=<span class="string">&quot;text-embedding-3-small&quot;</span>)</span><br><span class="line">llm = OpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;DEEPSEEK_MODEL_NAME&quot;</span>),  <span class="comment"># DeepSeek API 支持的模型名称</span></span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),  <span class="comment"># 从环境变量加载API key</span></span><br><span class="line">    api_base=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Settings.embed_model = embed_model</span><br><span class="line">Settings.llm = llm</span><br><span class="line">Settings.node_parser = SentenceSplitter(chunk_size=<span class="number">250</span>, chunk_overlap=<span class="number">20</span>) <span class="comment"># 50, 100, 250将得到不同的结果，为什么？</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load PDF using standard PDFReader</span></span><br><span class="line">loader = PDFReader()</span><br><span class="line">documents = loader.load_data(</span><br><span class="line">    file=<span class="string">&quot;../data/复杂PDF/uber_10q_march_2022_page26.pdf&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create index directly from documents</span></span><br><span class="line">index = VectorStoreIndex.from_documents(documents)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create query engine</span></span><br><span class="line">query_engine = index.as_query_engine(</span><br><span class="line">    similarity_top_k=<span class="number">3</span>,</span><br><span class="line">    verbose=<span class="literal">True</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">query = <span class="string">&quot;how much is the Loss from operations for 2022?&quot;</span></span><br><span class="line"></span><br><span class="line">response = query_engine.query(query)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n************LlamaIndex Query Response************&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(response)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Display retrieved chunks</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n************Retrieved Text Chunks************&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, source_node <span class="keyword">in</span> <span class="built_in">enumerate</span>(response.source_nodes):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\nChunk <span class="subst">&#123;i+<span class="number">1</span>&#125;</span>:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Text content:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(source_node.text)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>调整块的大小</p><ul><li>关键发现：<ul><li>100字符分块：返回错误答案$1.938B（无意义数值）</li><li>150字符分块：返回$1.524B（2021年正确值，但非问题要求的2022年）</li><li>250字符分块：正确返回$482M（2022年实际值）</li></ul></li><li>原理分析：<ul><li>过小分块割裂表格数据关联性</li><li>适当分块保留完整表格结构，使模型能正确对应年份与数值</li><li>过大分块（如2500字符）可能引入干扰信息</li></ul></li></ul><h1 id="基于特定格式（如代码）分块"><a href="#基于特定格式（如代码）分块" class="headerlink" title="基于特定格式（如代码）分块"></a>基于特定格式（如代码）分块</h1><ul><li>普通分块问题：<ul><li>函数定义被强行拆分</li><li>类成员变量与方法分离</li></ul></li><li>语言专用分块：<ul><li>按class和def自然分割</li><li>保留完整类结构（如CombatSystem类完整包含所有方法）</li><li>支持多种语言（Python/Java/SQL等）的语法感知分割</li></ul></li></ul><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> RecursiveCharacterTextSplitter</span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> Language</span><br><span class="line"></span><br><span class="line">separators = RecursiveCharacterTextSplitter.get_separators_for_language(Language.JS)</span><br><span class="line"><span class="built_in">print</span>(separators)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> langchain_text_splitters <span class="keyword">import</span> (</span><br><span class="line">    Language,</span><br><span class="line">    RecursiveCharacterTextSplitter,</span><br><span class="line">)</span><br><span class="line">GAME_CODE = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">class CombatSystem:</span></span><br><span class="line"><span class="string">   def __init__(self):</span></span><br><span class="line"><span class="string">       self.health = 100</span></span><br><span class="line"><span class="string">       self.stamina = 100</span></span><br><span class="line"><span class="string">       self.state = &quot;IDLE&quot;</span></span><br><span class="line"><span class="string">       self.attack_patterns = &#123;</span></span><br><span class="line"><span class="string">           &quot;NORMAL&quot;: 10,</span></span><br><span class="line"><span class="string">           &quot;SPECIAL&quot;: 30,</span></span><br><span class="line"><span class="string">           &quot;ULTIMATE&quot;: 50</span></span><br><span class="line"><span class="string">       &#125;</span></span><br><span class="line"><span class="string">   def update(self, delta_time):</span></span><br><span class="line"><span class="string">       self._update_stats(delta_time)</span></span><br><span class="line"><span class="string">       self._handle_combat()</span></span><br><span class="line"><span class="string">   def _update_stats(self, delta_time):</span></span><br><span class="line"><span class="string">       self.stamina = min(100, self.stamina + 5 * delta_time)</span></span><br><span class="line"><span class="string">   def _handle_combat(self):</span></span><br><span class="line"><span class="string">       if self.state == &quot;ATTACKING&quot;:</span></span><br><span class="line"><span class="string">           self._execute_attack()</span></span><br><span class="line"><span class="string">   def _execute_attack(self):</span></span><br><span class="line"><span class="string">       if self.stamina &gt;= self.attack_patterns[&quot;SPECIAL&quot;]:</span></span><br><span class="line"><span class="string">           damage = 50</span></span><br><span class="line"><span class="string">           self.stamina -= self.attack_patterns[&quot;SPECIAL&quot;]</span></span><br><span class="line"><span class="string">           return damage</span></span><br><span class="line"><span class="string">       return self.attack_patterns[&quot;NORMAL&quot;]</span></span><br><span class="line"><span class="string">class InventorySystem:</span></span><br><span class="line"><span class="string">   def __init__(self):</span></span><br><span class="line"><span class="string">       self.items = &#123;&#125;</span></span><br><span class="line"><span class="string">       self.capacity = 20</span></span><br><span class="line"><span class="string">       self.gold = 0</span></span><br><span class="line"><span class="string">   def add_item(self, item_id, quantity):</span></span><br><span class="line"><span class="string">       if len(self.items) &lt; self.capacity:</span></span><br><span class="line"><span class="string">           if item_id in self.items:</span></span><br><span class="line"><span class="string">               self.items[item_id] += quantity</span></span><br><span class="line"><span class="string">           else:</span></span><br><span class="line"><span class="string">               self.items[item_id] = quantity</span></span><br><span class="line"><span class="string">   def remove_item(self, item_id, quantity):</span></span><br><span class="line"><span class="string">       if item_id in self.items:</span></span><br><span class="line"><span class="string">           self.items[item_id] -= quantity</span></span><br><span class="line"><span class="string">           if self.items[item_id] &lt;= 0:</span></span><br><span class="line"><span class="string">               del self.items[item_id]</span></span><br><span class="line"><span class="string">   def get_item_count(self, item_id):</span></span><br><span class="line"><span class="string">       return self.items.get(item_id, 0)</span></span><br><span class="line"><span class="string">class QuestSystem:</span></span><br><span class="line"><span class="string">   def __init__(self):</span></span><br><span class="line"><span class="string">       self.active_quests = &#123;&#125;</span></span><br><span class="line"><span class="string">       self.completed_quests = set()</span></span><br><span class="line"><span class="string">       self.quest_log = []</span></span><br><span class="line"><span class="string">   def add_quest(self, quest_id, quest_data):</span></span><br><span class="line"><span class="string">       if quest_id not in self.active_quests:</span></span><br><span class="line"><span class="string">           self.active_quests[quest_id] = quest_data</span></span><br><span class="line"><span class="string">           self.quest_log.append(f&quot;Started quest: &#123;quest_data[&#x27;name&#x27;]&#125;&quot;)</span></span><br><span class="line"><span class="string">   def complete_quest(self, quest_id):</span></span><br><span class="line"><span class="string">       if quest_id in self.active_quests:</span></span><br><span class="line"><span class="string">           self.completed_quests.add(quest_id)</span></span><br><span class="line"><span class="string">           del self.active_quests[quest_id]</span></span><br><span class="line"><span class="string">   def get_active_quests(self):</span></span><br><span class="line"><span class="string">       return list(self.active_quests.keys())</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">python_splitter = RecursiveCharacterTextSplitter.from_language(</span><br><span class="line">   language=Language.PYTHON,  <span class="comment"># 指定编程语言为Python</span></span><br><span class="line">   chunk_size=<span class="number">1000</span>,</span><br><span class="line">   chunk_overlap=<span class="number">0</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">python_docs = python_splitter.create_documents([GAME_CODE])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== 代码分块结果 ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, chunk <span class="keyword">in</span> <span class="built_in">enumerate</span>(python_docs, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n--- 第 <span class="subst">&#123;i&#125;</span> 个代码块 ---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容:\n<span class="subst">&#123;chunk.page_content&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;元数据: <span class="subst">&#123;chunk.metadata&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure><p>执行结果，输出内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;\nfunction &#x27;, &#x27;\nconst &#x27;, &#x27;\nlet &#x27;, &#x27;\nvar &#x27;, &#x27;\nclass &#x27;, &#x27;\nif &#x27;, &#x27;\nfor &#x27;, &#x27;\nwhile &#x27;, &#x27;\nswitch &#x27;, &#x27;\ncase &#x27;, &#x27;\ndefault &#x27;, &#x27;\n\n&#x27;, &#x27;\n&#x27;, &#x27; &#x27;, &#x27;&#x27;]</span><br><span class="line"></span><br><span class="line">=== 代码分块结果 ===</span><br><span class="line"></span><br><span class="line">--- 第 1 个代码块 ---</span><br><span class="line">内容:</span><br><span class="line">class CombatSystem:</span><br><span class="line">   def __init__(self):</span><br><span class="line">       self.health = 100</span><br><span class="line">       self.stamina = 100</span><br><span class="line">       self.state = &quot;IDLE&quot;</span><br><span class="line">       self.attack_patterns = &#123;</span><br><span class="line">           &quot;NORMAL&quot;: 10,</span><br><span class="line">           &quot;SPECIAL&quot;: 30,</span><br><span class="line">           &quot;ULTIMATE&quot;: 50</span><br><span class="line">       &#125;</span><br><span class="line">   def update(self, delta_time):</span><br><span class="line">       self._update_stats(delta_time)</span><br><span class="line">       self._handle_combat()</span><br><span class="line">   def _update_stats(self, delta_time):</span><br><span class="line">       self.stamina = min(100, self.stamina + 5 * delta_time)</span><br><span class="line">   def _handle_combat(self):</span><br><span class="line">       if self.state == &quot;ATTACKING&quot;:</span><br><span class="line">           self._execute_attack()</span><br><span class="line">   def _execute_attack(self):</span><br><span class="line">       if self.stamina &gt;= self.attack_patterns[&quot;SPECIAL&quot;]:</span><br><span class="line">           damage = 50</span><br><span class="line">           self.stamina -= self.attack_patterns[&quot;SPECIAL&quot;]</span><br><span class="line">           return damage</span><br><span class="line">       return self.attack_patterns[&quot;NORMAL&quot;]</span><br><span class="line">元数据: &#123;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 2 个代码块 ---</span><br><span class="line">内容:</span><br><span class="line">class InventorySystem:</span><br><span class="line">   def __init__(self):</span><br><span class="line">       self.items = &#123;&#125;</span><br><span class="line">       self.capacity = 20</span><br><span class="line">       self.gold = 0</span><br><span class="line">   def add_item(self, item_id, quantity):</span><br><span class="line">       if len(self.items) &lt; self.capacity:</span><br><span class="line">           if item_id in self.items:</span><br><span class="line">               self.items[item_id] += quantity</span><br><span class="line">           else:</span><br><span class="line">               self.items[item_id] = quantity</span><br><span class="line">   def remove_item(self, item_id, quantity):</span><br><span class="line">       if item_id in self.items:</span><br><span class="line">           self.items[item_id] -= quantity</span><br><span class="line">           if self.items[item_id] &lt;= 0:</span><br><span class="line">               del self.items[item_id]</span><br><span class="line">   def get_item_count(self, item_id):</span><br><span class="line">       return self.items.get(item_id, 0)</span><br><span class="line">元数据: &#123;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">--- 第 3 个代码块 ---</span><br><span class="line">内容:</span><br><span class="line">class QuestSystem:</span><br><span class="line">   def __init__(self):</span><br><span class="line">       self.active_quests = &#123;&#125;</span><br><span class="line">       self.completed_quests = set()</span><br><span class="line">       self.quest_log = []</span><br><span class="line">   def add_quest(self, quest_id, quest_data):</span><br><span class="line">       if quest_id not in self.active_quests:</span><br><span class="line">           self.active_quests[quest_id] = quest_data</span><br><span class="line">           self.quest_log.append(f&quot;Started quest: &#123;quest_data[&#x27;name&#x27;]&#125;&quot;)</span><br><span class="line">   def complete_quest(self, quest_id):</span><br><span class="line">       if quest_id in self.active_quests:</span><br><span class="line">           self.completed_quests.add(quest_id)</span><br><span class="line">           del self.active_quests[quest_id]</span><br><span class="line">   def get_active_quests(self):</span><br><span class="line">       return list(self.active_quests.keys())</span><br><span class="line">元数据: &#123;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h1 id="语义分块"><a href="#语义分块" class="headerlink" title="语义分块"></a>语义分块</h1><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> SimpleDirectoryReader</span><br><span class="line"><span class="keyword">from</span> llama_index.core.node_parser <span class="keyword">import</span> (</span><br><span class="line">    SentenceSplitter,</span><br><span class="line">    SemanticSplitterNodeParser,</span><br><span class="line">)</span><br><span class="line"><span class="comment"># from llama_index.embeddings.openai import OpenAIEmbedding </span></span><br><span class="line"><span class="keyword">from</span> llama_index.embeddings.huggingface <span class="keyword">import</span> HuggingFaceEmbedding </span><br><span class="line">embed_model = HuggingFaceEmbedding(model_name=<span class="string">&quot;BAAI/bge-small-zh&quot;</span>) <span class="comment"># 加载本地嵌入模型</span></span><br><span class="line"></span><br><span class="line">documents = SimpleDirectoryReader(input_files=[<span class="string">&quot;../data/黑悟空/黑悟空wiki.txt&quot;</span>]).load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建语义分块器</span></span><br><span class="line">splitter = SemanticSplitterNodeParser(</span><br><span class="line">    buffer_size=<span class="number">3</span>,  <span class="comment"># 缓冲区大小</span></span><br><span class="line">    breakpoint_percentile_threshold=<span class="number">90</span>, <span class="comment"># 断点百分位阈值</span></span><br><span class="line">    embed_model=embed_model     <span class="comment"># 使用的嵌入模型</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># 创建基础句子分块器（作为对照）</span></span><br><span class="line">base_splitter = SentenceSplitter(</span><br><span class="line">    <span class="comment"># chunk_size=512</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用语义分块器对文档进行分块</span></span><br><span class="line">semantic_nodes = splitter.get_nodes_from_documents(documents)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== 语义分块结果 ===&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;语义分块器生成的块数：<span class="subst">&#123;<span class="built_in">len</span>(semantic_nodes)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, node <span class="keyword">in</span> <span class="built_in">enumerate</span>(semantic_nodes, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n--- 第 <span class="subst">&#123;i&#125;</span> 个语义块 ---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容:\n<span class="subst">&#123;node.text&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用基础句子分块器对文档进行分块</span></span><br><span class="line">base_nodes = base_splitter.get_nodes_from_documents(documents)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== 基础句子分块结果 ===&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;基础句子分块器生成的块数：<span class="subst">&#123;<span class="built_in">len</span>(base_nodes)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, node <span class="keyword">in</span> <span class="built_in">enumerate</span>(base_nodes, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n--- 第 <span class="subst">&#123;i&#125;</span> 个句子块 ---&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;内容:\n<span class="subst">&#123;node.text&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br></pre></td></tr></table></figure><ul><li>buffer_size参数:<ul><li>默认值为1，控制评估语义相似度时组合的句子数量</li><li>设置为1时每个句子单独考虑</li><li>设置为3时每3个句子作为一组评估相似度</li></ul></li><li>breakpoint_percentile_threshold参数:<ul><li>默认值为95，控制创建分割点的阈值</li><li>表示余弦不相似度的百分位数值</li><li>数值越小生成的节点越多（更容易达到分割值）</li><li>数值越大生成的节点越少（需要更大不相似度才会分割）</li></ul></li></ul><p>参数组合影响:</p><ul><li><p>buffer_size：默认值为1</p><ul><li>这个参数控制评估语义相似度时，将多少个句子组合在一起当设置为1时，每个句子会被单独考虑<br>当设置大于1时，会将多个句子组合在一起进行评估例如，如果设置为3，就会将每3个句子作为一个组来评估语义相似度</li></ul></li><li><p>breakpoint_percentile_threshold：默认值为95</p><ul><li>这个参数控制何时在句子组之间创建分割点,它表示余弦不相似度的百分位数阈值,当句子组之间的不相似度超过这个阈值时，就会创建一个新的节点<ul><li>数值越小，生成的节点就越多（因为更容易达到分割阈值）</li><li>数值越大，生成的节点就越少（因为需要更大的不相似度才会分割）</li></ul></li></ul></li><li><p>这两个参数共同影响文本的分割效果：</p><ul><li><p>buffer_size 决定了评估语义相似度的粒度</p></li><li><p>breakpoint_percentile_threshold 决定了分割的严格程度</p></li></ul></li></ul><ul><li><p>例如：</p><ul><li>如果 buffer_size=2 且 breakpoint_percentile_threshold=90：每2个句子会被组合在一起,当组合之间的不相似度超过90%时就会分割,这会产生相对较多的节点</li><li>如果 buffer_size=3 且 breakpoint_percentile_threshold=98：每3个句子会被组合在一起,需要更大的不相似度才会分割,这会产生相对较少的节点</li></ul></li></ul><h1 id="基础句子分块与语义分块特点"><a href="#基础句子分块与语义分块特点" class="headerlink" title="基础句子分块与语义分块特点"></a>基础句子分块与语义分块特点</h1><ul><li>基础句子分块特点:<ul><li>按固定字符数机械划分</li><li>不考虑内容语义连贯性</li><li>实现简单但可能切断语义关联</li></ul></li><li>语义分块特点:<ul><li>基于内容语义自动划分</li><li>识别主题边界形成自然段落</li><li>适合内容结构复杂的文档</li></ul></li></ul><h1 id="使用Unstructured基于文档结构分块"><a href="#使用Unstructured基于文档结构分块" class="headerlink" title="使用Unstructured基于文档结构分块"></a>使用Unstructured基于文档结构分块</h1><p>基于对文档语义结构的识别，而非简单地根据空行或换行符来拆分文本。</p><ul><li>Basic策略 将文本元素顺序合并到同一个分块内，直到达到最大字符数（max_characters）或软限制（new_after_n_chars）。如果单个元素（如一段特别长的正文或一张很大的表格）本身超过了最大字符数，则会对该元素进行二次拆分。表格元素会被视为独立的分块；如果表格过大，也会被拆分为多个TableChunk。可以通过overlap与overlap_all等参数设置分块重叠。</li><li>By Title策略 在保留Basic策略的基础行为的同时，会在检测到新的标题（Title元素）后立刻关闭当前分块，并开启一个新的分块。可以通过multipage_sections和combine_text_under_n_chars等参数进一步控制如何合并或拆分跨页片段、短小片段等。</li></ul><p>通过API调用Unstructured时，还有以下两种额外的智能分块策略。</p><ul><li>lBy Page：确保每页的内容独立分块。</li><li>lBy Similarity：利用嵌入模型将主题相似的元素组合成块。</li></ul><p>参考学习地址：<a href="https://docs.unstructured.io/api-reference/partition/chunking">https://docs.unstructured.io/api-reference/partition/chunking</a></p>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第十二讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>RAG组件--数据导入之解析pdf中的表格数据</title>
    <link href="https://jinglv.github.io/2025/08/13/ai/rag/10-pdf-table-parsing/"/>
    <id>https://jinglv.github.io/2025/08/13/ai/rag/10-pdf-table-parsing/</id>
    <published>2025-08-12T16:00:00.000Z</published>
    <updated>2025-08-13T01:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>PDF是一个<strong>带表格的结构化数据</strong>，所以直接使用SimpleDirectoryReader加载并用SentenceSplitter进行分块后，信息可能被破坏，从而导致问答效果不佳。</p><ul><li>重要性：解析PDF表格数据是实际需求中最具挑战性的部分，需要保持表格数据结构的完整性才能确保问答系统给出精准答案。</li><li>难点：PDF表格是结构化数据和非结构化数据的混合体，需要将表格内容与上下文信息（如年份标题）正确关联才能准确回答问题。</li></ul><h1 id="通过Camelot工具提取表格数据"><a href="#通过Camelot工具提取表格数据" class="headerlink" title="通过Camelot工具提取表格数据"></a>通过Camelot工具提取表格数据</h1><ul><li>功能特点：<ul><li>老牌PDF表格提取工具，可直接将表格保存为CSV格式</li><li>能完整提取多个表格数据（任务1）</li><li>但无法自动关联表格上下文信息（任务2）</li></ul></li><li>安装要求：<ul><li>需要先安装Ghostscript：sudo apt-get install ghostscript / brew install ghostscript</li><li>然后安装Python包：pip install ghostscript 和  pip install  camelot-py</li><li>兼容性问题：与部分PDF阅读器不兼容，建议创建独立环境使用</li></ul></li></ul><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> camelot</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="comment"># from ctypes.util import find_library</span></span><br><span class="line"><span class="comment"># find_library(&quot;gs&quot;)</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">pdf_path = <span class="string">&quot;../data/复杂PDF/billionaires_page-1-5.pdf&quot;</span></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">tables = camelot.read_pdf(pdf_path, pages=<span class="string">&quot;all&quot;</span>)</span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;PDF表格解析耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换所有表格为 DataFrame</span></span><br><span class="line"><span class="keyword">if</span> tables:</span><br><span class="line">    <span class="comment"># 遍历所有表格</span></span><br><span class="line">    <span class="keyword">for</span> i, table <span class="keyword">in</span> <span class="built_in">enumerate</span>(tables, <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 将表格转换为 DataFrame</span></span><br><span class="line">        df = table.df</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 打印当前表格数据</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n表格 <span class="subst">&#123;i&#125;</span> 数据:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示基本信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n表格 <span class="subst">&#123;i&#125;</span> 基本信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存到CSV文件</span></span><br><span class="line">        csv_filename = <span class="string">f&quot;output/billionaires_table_<span class="subst">&#123;i&#125;</span>.csv&quot;</span></span><br><span class="line">        df.to_csv(csv_filename, index=<span class="literal">False</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n表格 <span class="subst">&#123;i&#125;</span> 数据已保存到 <span class="subst">&#123;csv_filename&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果，输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">PDF表格解析耗时: 2.89秒</span><br><span class="line"></span><br><span class="line">表格 1 数据:</span><br><span class="line">      0                                           1</span><br><span class="line">0  Icon                                 Description</span><br><span class="line">1        Has not changed from the previous ranking.</span><br><span class="line">2          Has increased from the previous ranking.</span><br><span class="line">3          Has decreased from the previous ranking.</span><br><span class="line"></span><br><span class="line">表格 1 基本信息:</span><br><span class="line">&lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span><br><span class="line">RangeIndex: 4 entries, 0 to 3</span><br><span class="line">Data columns (total 2 columns):</span><br><span class="line"> #   Column  Non-Null Count  Dtype </span><br><span class="line">---  ------  --------------  ----- </span><br><span class="line"> 0   0       4 non-null      object</span><br><span class="line"> 1   1       4 non-null      object</span><br><span class="line">dtypes: object(2)</span><br><span class="line">memory usage: 196.0+ bytes</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line">表格 1 数据已保存到 output/billionaires_table_1.csv</span><br><span class="line"></span><br><span class="line">表格 2 数据:</span><br><span class="line">      0                          1                 2    3               4  \</span><br><span class="line">...</span><br><span class="line">memory usage: 660.0+ bytes</span><br><span class="line">None</span><br><span class="line"></span><br><span class="line">表格 6 数据已保存到 output/billionaires_table_6.csv</span><br><span class="line">……</span><br></pre></td></tr></table></figure><ul><li>基本用法：<ul><li>使用camelot.read_pdf()方法读取PDF表格</li><li>可以指定pages=”all”参数提取所有页面的表格</li><li>提取结果可直接转换为pandas DataFrame格式</li></ul></li><li>性能表现：<ul><li>解析5页PDF耗时2.89秒</li><li>能准确提取结构完整的表格数据</li></ul></li><li>输出格式：<ul><li>支持将表格数据保存为CSV文件（代码示例中在output目录下保存输出的csv文件）</li><li>提供表格基本信息输出功能</li></ul></li><li>局限性：<ul><li>无法提取非标准表格（如边缘表格）</li><li>与其他Python包可能存在环境冲突</li></ul></li></ul><h1 id="通过PDFPlumber工具提取表格数据"><a href="#通过PDFPlumber工具提取表格数据" class="headerlink" title="通过PDFPlumber工具提取表格数据"></a>通过PDFPlumber工具提取表格数据</h1><ul><li>优势：<ul><li>提取效率和准确度略优于Camelot</li><li>处理速度较快</li></ul></li><li>局限性：与Camelot类似，仅专注于表格内容提取，不处理上下文关联</li><li>适用场景：适合只需要提取表格内容，不关心上下文信息的简单项目</li></ul><h2 id="提取PDF表格"><a href="#提取PDF表格" class="headerlink" title="提取PDF表格"></a>提取PDF表格</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfplumber</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录开始时间</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开PDF文件</span></span><br><span class="line">pdf = pdfplumber.<span class="built_in">open</span>(<span class="string">&quot;../data/复杂PDF/billionaires_page-1-5.pdf&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历每一页</span></span><br><span class="line"><span class="keyword">for</span> page <span class="keyword">in</span> pdf.pages:</span><br><span class="line">    <span class="comment"># 提取表格</span></span><br><span class="line">    tables = page.extract_tables()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查是否找到表格</span></span><br><span class="line">    <span class="keyword">if</span> tables:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;在第 <span class="subst">&#123;page.page_number&#125;</span> 页找到 <span class="subst">&#123;<span class="built_in">len</span>(tables)&#125;</span> 个表格&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 遍历该页的所有表格</span></span><br><span class="line">        <span class="keyword">for</span> i, table <span class="keyword">in</span> <span class="built_in">enumerate</span>(tables):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n处理第 <span class="subst">&#123;i+<span class="number">1</span>&#125;</span> 个表格:&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 将表格转换为DataFrame</span></span><br><span class="line">            df = pd.DataFrame(table)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果第一行包含列名，可以设置为列名</span></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(df) &gt; <span class="number">0</span>:</span><br><span class="line">                df.columns = df.iloc[<span class="number">0</span>]</span><br><span class="line">                df = df.iloc[<span class="number">1</span>:]  <span class="comment"># 删除重复的列名行</span></span><br><span class="line">                </span><br><span class="line">            <span class="built_in">print</span>(df)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭PDF</span></span><br><span class="line">pdf.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录结束时间并计算总耗时</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nPDF表格提取总耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br></pre></td></tr></table></figure><p>执行结果，输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">在第 1 页找到 1 个表格</span><br><span class="line"></span><br><span class="line">处理第 1 个表格:</span><br><span class="line">0  List of the world&#x27;s billionaires, ranked in order of net worth</span><br><span class="line">1   The net worth of the world&#x27;s billionaires incr...            </span><br><span class="line">2                                 Publication details            </span><br><span class="line">3    Publisher Whale Media Investments\nForbes family            </span><br><span class="line">4                                  Publication Forbes            </span><br><span class="line">5                       First published March 1987[1]            </span><br><span class="line">6                    Latest publication April 4, 2023            </span><br><span class="line">7                      Current list details (2023)[2]            </span><br><span class="line">8                          Wealthiest Bernard Arnault            </span><br><span class="line">9                      Net worth (1st) US$211 billion            </span><br><span class="line">10          Number of 2,640 (from 2668)\nbillionaires            </span><br><span class="line">11  Total list net worth US$12.2 trillion (from US...            </span><br><span class="line">12                                Number of women 337            </span><br><span class="line">13                       New members to the 150\nlist            </span><br><span class="line">14  Forbes: The World&#x27;s Billionaires website (http...            </span><br><span class="line">--------------------------------------------------</span><br><span class="line">在第 2 页找到 1 个表格</span><br><span class="line"></span><br><span class="line">处理第 1 个表格:</span><br><span class="line">0 Icon                                 Description</span><br><span class="line">1       Has not changed from the previous ranking.</span><br><span class="line">2         Has increased from the previous ranking.</span><br><span class="line">...</span><br><span class="line">10               Alphabet Inc.  </span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">PDF表格提取总耗时: 0.38秒</span><br></pre></td></tr></table></figure><ul><li>性能优势：<ul><li>解析相同5页PDF仅需0.38秒</li><li>速度是camelot的3-4倍</li></ul></li><li>提取能力：<ul><li>能提取所有类型的表格，包括边缘表格</li><li>提取结果同样可转换为DataFrame</li></ul></li><li>环境兼容性：<ul><li>安装简单，与其他包冲突较少</li><li>可直接与LlamaIndex等工具集成</li></ul></li><li>问答应用：<ul><li>提取的表格数据可用于构建问答系统</li><li>但缺乏上下文关联可能导致回答不准确</li></ul></li></ul><h2 id="提取PDF表格并问答"><a href="#提取PDF表格并问答" class="headerlink" title="提取PDF表格并问答"></a>提取PDF表格并问答</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pdfplumber</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> VectorStoreIndex</span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> Document</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span></span><br><span class="line"></span><br><span class="line">pdf_path = <span class="string">&quot;../data/复杂PDF/billionaires_page-1-5.pdf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开 PDF 并解析表格</span></span><br><span class="line"><span class="keyword">with</span> pdfplumber.<span class="built_in">open</span>(pdf_path) <span class="keyword">as</span> pdf:</span><br><span class="line">    tables = []</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> pdf.pages:</span><br><span class="line">        table = page.extract_table()</span><br><span class="line">        <span class="keyword">if</span> table:</span><br><span class="line">            tables.append(table)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换所有表格为 DataFrame 并构建文档</span></span><br><span class="line">documents: <span class="type">List</span>[Document] = []</span><br><span class="line"><span class="keyword">if</span> tables:</span><br><span class="line">    <span class="comment"># 遍历所有表格</span></span><br><span class="line">    <span class="keyword">for</span> i, table <span class="keyword">in</span> <span class="built_in">enumerate</span>(tables, <span class="number">1</span>):</span><br><span class="line">        <span class="comment"># 将表格转换为 DataFrame</span></span><br><span class="line">        df = pd.DataFrame(table)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存到CSV文件</span></span><br><span class="line">        <span class="comment"># csv_filename = f&quot;billionaires_table_&#123;i&#125;.csv&quot;</span></span><br><span class="line">        <span class="comment"># df.to_csv(csv_filename, index=False)</span></span><br><span class="line">        <span class="comment"># print(f&quot;\n表格 &#123;i&#125; 数据已保存到 &#123;csv_filename&#125;&quot;)</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 将DataFrame转换为文本</span></span><br><span class="line">        text = df.to_string()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建Document对象</span></span><br><span class="line">        doc = Document(text=text, metadata=&#123;<span class="string">&quot;source&quot;</span>: <span class="string">f&quot;表格<span class="subst">&#123;i&#125;</span>&quot;</span>&#125;)</span><br><span class="line">        documents.append(doc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建索引</span></span><br><span class="line">index = VectorStoreIndex.from_documents(documents)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建查询引擎</span></span><br><span class="line">query_engine = index.as_query_engine()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例问答</span></span><br><span class="line">questions = [</span><br><span class="line">    <span class="string">&quot;2023年谁是最富有的人?&quot;</span>,</span><br><span class="line">    <span class="string">&quot;最年轻的富豪是谁?&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n===== 问答演示 =====&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> question <span class="keyword">in</span> questions:</span><br><span class="line">    response = query_engine.query(question)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n问题: <span class="subst">&#123;question&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;回答: <span class="subst">&#123;response&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="通过Unstructured提取表格标题"><a href="#通过Unstructured提取表格标题" class="headerlink" title="通过Unstructured提取表格标题"></a>通过Unstructured提取表格标题</h1><ul><li>核心优势：<ul><li>不仅能提取表格内容，还能获取表格元数据和父节点信息</li><li>可将表格转换为HTML或文本格式，保持一定结构</li></ul></li><li>优化策略：<ul><li>使用cleaners过滤页眉页脚</li><li>通过coordinates去除干扰区域</li><li>利用metadata识别并排除无关信息</li></ul></li><li>局限性：当标题和表格不在同一页时，关联准确性下降</li><li>注意点：<ul><li>表格中可能包含多年份的数据，每张表结构相似但年份不同</li><li>表格可能跨页，增加标题关联难度</li></ul></li><li>关键挑战：<ul><li>必须正确识别表格对应的年份才能回答准确问题</li><li>页眉页脚信息可能干扰标题识别</li></ul></li><li>解决方案：<ul><li>利用Unstructured的parent_id字段建立父子文档关系</li><li>通过coordinates优化排除干扰区域</li></ul></li></ul><h2 id="表格提取"><a href="#表格提取" class="headerlink" title="表格提取"></a>表格提取</h2><p>示例代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> unstructured.partition.pdf <span class="keyword">import</span> partition_pdf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 确保工作目录正确</span></span><br><span class="line"><span class="comment"># 获取脚本所在目录的父目录（项目根目录）</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line">script_dir = Path(<span class="string">&quot;/Users/jinglv/PycharmProjects/llm-rag-system&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> script_dir.exists():</span><br><span class="line">    os.chdir(script_dir)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;工作目录设置为: <span class="subst">&#123;os.getcwd()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入 LlamaIndex 相关模块</span></span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> llama_index.llms.openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> llama_index.embeddings.openai <span class="keyword">import</span> OpenAIEmbedding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局设置</span></span><br><span class="line">Settings.llm = OpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;DEEPSEEK_MODEL_NAME&quot;</span>),  <span class="comment"># DeepSeek API 支持的模型名称</span></span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),  <span class="comment"># 从环境变量加载API key</span></span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line">Settings.embed_model = OpenAIEmbedding(model=<span class="string">&quot;text-embedding-3-small&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析 PDF 结构，提取文本和表格</span></span><br><span class="line"><span class="comment"># 使用相对路径，确保从项目根目录开始</span></span><br><span class="line">file_path = <span class="string">&quot;data/复杂PDF/billionaires_page-1-5.pdf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查文件是否存在</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_path):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;错误: 文件不存在 - <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;当前工作目录: <span class="subst">&#123;os.getcwd()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;请确保:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1. 在项目根目录运行脚本&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2. PDF文件路径正确&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;正在处理文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">elements = partition_pdf(</span><br><span class="line">    file_path,</span><br><span class="line">    strategy=<span class="string">&quot;hi_res&quot;</span>,  <span class="comment"># 使用高精度策略</span></span><br><span class="line">)  <span class="comment"># 解析PDF文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个元素ID到元素的映射</span></span><br><span class="line">element_map = &#123;element.<span class="built_in">id</span>: element <span class="keyword">for</span> element <span class="keyword">in</span> elements <span class="keyword">if</span> <span class="built_in">hasattr</span>(element, <span class="string">&#x27;id&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> elements:</span><br><span class="line">    <span class="keyword">if</span> element.category == <span class="string">&quot;Table&quot;</span>: <span class="comment"># 只打印表格数据    </span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n表格数据:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;表格元数据:&quot;</span>, <span class="built_in">vars</span>(element.metadata))  <span class="comment"># 使用vars()显示所有元数据属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;表格内容:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(element.text)  <span class="comment"># 打印表格文本内容</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取并打印父节点信息</span></span><br><span class="line">        parent_id = <span class="built_in">getattr</span>(element.metadata, <span class="string">&#x27;parent_id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> parent_id <span class="keyword">and</span> parent_id <span class="keyword">in</span> element_map:</span><br><span class="line">            parent_element = element_map[parent_id]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n父节点信息:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;类型: <span class="subst">&#123;parent_element.category&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;内容: <span class="subst">&#123;parent_element.text&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(parent_element, <span class="string">&#x27;metadata&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;父节点元数据: <span class="subst">&#123;<span class="built_in">vars</span>(parent_element.metadata)&#125;</span>&quot;</span>)  <span class="comment"># 同样使用vars()显示所有元数据</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;未找到父节点 (ID: <span class="subst">&#123;parent_id&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">text_elements = [el <span class="keyword">for</span> el <span class="keyword">in</span> elements <span class="keyword">if</span> el.category == <span class="string">&quot;Text&quot;</span>]</span><br><span class="line">table_elements = [el <span class="keyword">for</span> el <span class="keyword">in</span> elements <span class="keyword">if</span> el.category == <span class="string">&quot;Table&quot;</span>]</span><br></pre></td></tr></table></figure><p>执行结果，输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">/Users/jinglv/PycharmProjects/llm-rag-system</span><br><span class="line">工作目录设置为: /Users/jinglv/PycharmProjects/llm-rag-system</span><br><span class="line">正在处理文件: data/复杂PDF/billionaires_page-1-5.pdf</span><br><span class="line">Warning: No languages specified, defaulting to English.</span><br><span class="line"></span><br><span class="line">表格数据:</span><br><span class="line">表格元数据: &#123;&#x27;detection_class_prob&#x27;: 0.5629849433898926, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(839.0340576171875), np.float64(1001.4764404296875)), (np.float64(839.0340576171875), np.float64(1920.586669921875)), (np.float64(1587.2479248046875), np.float64(1920.586669921875)), (np.float64(1587.2479248046875), np.float64(1001.4764404296875))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b8e27b0&gt;), &#x27;links&#x27;: [&#123;&#x27;text&#x27;: &quot;Forbes : The World &#x27; s Billionaires website ( https :// www . forb&quot;, &#x27;url&#x27;: &#x27;https://www.forbes.com/billionaires/&#x27;, &#x27;start_index&#x27;: 0&#125;, &#123;&#x27;text&#x27;: &quot;Forbes : The World &#x27; s Billionaires website ( https :// www . forb&quot;, &#x27;url&#x27;: &#x27;https://www.forbes.com/billionaires/&#x27;, &#x27;start_index&#x27;: 0&#125;], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 1, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;, &#x27;parent_id&#x27;: &#x27;b379afb3fd875896f879cc4cfc441305&#x27;&#125;</span><br><span class="line">表格内容:</span><br><span class="line">Publisher Whale Media Investments Forbes family Publication First published Forbes March 1987[1] Latest publication April 4, 2023 Current list details (2023)[2] Wealthiest Bernard Arnault Net worth (1st) US$211 billion Number of billionaires 2,640 (from 2668) Total list net worth value US$12.2 trillion (from US$ 12.7 trillion) Number of women 337 New members to the 150 list Forbes: The World&#x27;s Billionaires website (https://www.forb es.com/billionaires/)</span><br><span class="line"></span><br><span class="line">父节点信息:</span><br><span class="line">类型: Title</span><br><span class="line">内容: Methodology</span><br><span class="line">父节点元数据: &#123;&#x27;detection_class_prob&#x27;: 0.7953538298606873, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(98.62982255709053), np.float64(1510.925048828125)), (np.float64(98.62982255709053), np.float64(1569.5582275390625)), (np.float64(435.21123011467625), np.float64(1569.5582275390625)), (np.float64(435.21123011467625), np.float64(1510.925048828125))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b8e0620&gt;), &#x27;links&#x27;: [], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 1, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">表格数据:</span><br><span class="line">表格元数据: &#123;&#x27;detection_class_prob&#x27;: 0.8833286762237549, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(102.6220932006836), np.float64(929.1338500976562)), (np.float64(102.6220932006836), np.float64(1154.2158203125)), (np.float64(765.6319580078125), np.float64(1154.2158203125)), (np.float64(765.6319580078125), np.float64(929.1338500976562))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b8e1340&gt;), &#x27;links&#x27;: [], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 2, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;, &#x27;parent_id&#x27;: &#x27;feb0e76147077250a13cdb0f842659a3&#x27;&#125;</span><br><span class="line">表格内容:</span><br><span class="line">Icon Description Has not changed from the previous ranking. Has increased from the previous ranking. Has decreased from the previous ranking.</span><br><span class="line"></span><br><span class="line">父节点信息:</span><br><span class="line">类型: Title</span><br><span class="line">内容: Legend</span><br><span class="line">父节点元数据: &#123;&#x27;detection_class_prob&#x27;: 0.7951710224151611, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(96.45149230957031), np.float64(847.3286743164062)), (np.float64(96.45149230957031), np.float64(897.3561401367188)), (np.float64(236.98038987264118), np.float64(897.3561401367188)), (np.float64(236.98038987264118), np.float64(847.3286743164062))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b8e3590&gt;), &#x27;links&#x27;: [], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 2, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;, &#x27;parent_id&#x27;: &#x27;759e1c4a2a3cf37f98db95d0877208f1&#x27;&#125;</span><br><span class="line">...</span><br><span class="line">类型: Title</span><br><span class="line">内容: 2019</span><br><span class="line">父节点元数据: &#123;&#x27;detection_class_prob&#x27;: 0.7982921600341797, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(95.56612396240234), np.float64(971.339599609375)), (np.float64(95.56612396240234), np.float64(1019.1573486328125)), (np.float64(188.0115203857422), np.float64(1019.1573486328125)), (np.float64(188.0115203857422), np.float64(971.339599609375))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b8012b0&gt;), &#x27;links&#x27;: [], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 5, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;, &#x27;parent_id&#x27;: &#x27;a69407466af63af128c0512ca7f72190&#x27;&#125;</span><br><span class="line">--------------------------------------------------</span><br><span class="line">……</span><br></pre></td></tr></table></figure><ul><li>表格提取方法：通过element.category==”Table”筛选表格元素，使用vars(element.metadata)显示元数据，element.text获取表格内容</li><li>父节点查找：通过parent_id获取表格的父节点信息，可判断表格所属上下文关系</li><li>实际应用问题：2019年表格能准确找到父节点”2019”标题，但2018年表格会被错误关联到页眉”The World’s Billionaires - Wikipedia”（需要消除页眉页脚）</li><li>滑动窗口策略：提取表格元素后，向上抓取前3个节点内容，尝试跨越页眉页脚找到正确标题年份</li><li>优化建议：需要定位坐标消除页眉页脚，整合连续页面，建立title与跨页表格的关联</li></ul><h2 id="表格提取-上下文"><a href="#表格提取-上下文" class="headerlink" title="表格提取 + 上下文"></a>表格提取 + 上下文</h2><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> unstructured.partition.pdf <span class="keyword">import</span> partition_pdf</span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> llama_index.llms.openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> llama_index.embeddings.openai <span class="keyword">import</span> OpenAIEmbedding</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全局设置</span></span><br><span class="line">Settings.llm = OpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;DEEPSEEK_MODEL_NAME&quot;</span>),  <span class="comment"># DeepSeek API 支持的模型名称</span></span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),  <span class="comment"># 从环境变量加载API key</span></span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line">Settings.embed_model = OpenAIEmbedding(model=<span class="string">&quot;text-embedding-3-small&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析 PDF 结构，提取文本和表格</span></span><br><span class="line">file_path = <span class="string">&quot;data/复杂PDF/billionaires_page-1-5.pdf&quot;</span>  <span class="comment"># 修改为你的文件路径</span></span><br><span class="line"></span><br><span class="line">elements = partition_pdf(</span><br><span class="line">    file_path,</span><br><span class="line">    strategy=<span class="string">&quot;hi_res&quot;</span>,  <span class="comment"># 使用高精度策略</span></span><br><span class="line">)  <span class="comment"># 解析PDF文档</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个元素ID到元素的映射</span></span><br><span class="line">element_map = &#123;element.<span class="built_in">id</span>: element <span class="keyword">for</span> element <span class="keyword">in</span> elements <span class="keyword">if</span> <span class="built_in">hasattr</span>(element, <span class="string">&#x27;id&#x27;</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个元素索引到元素的映射</span></span><br><span class="line">element_index_map = &#123;i: element <span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(elements)&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i, element <span class="keyword">in</span> <span class="built_in">enumerate</span>(elements):</span><br><span class="line">    <span class="keyword">if</span> element.category == <span class="string">&quot;Table&quot;</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n表格数据:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;表格元数据:&quot;</span>, <span class="built_in">vars</span>(element.metadata))  <span class="comment"># 使用vars()显示所有元数据属性</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;表格内容:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(element.text)  <span class="comment"># 打印表格文本内容</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取并打印父节点信息</span></span><br><span class="line">        parent_id = <span class="built_in">getattr</span>(element.metadata, <span class="string">&#x27;parent_id&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> parent_id <span class="keyword">and</span> parent_id <span class="keyword">in</span> element_map:</span><br><span class="line">            parent_element = element_map[parent_id]</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n父节点信息:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;类型: <span class="subst">&#123;parent_element.category&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;内容: <span class="subst">&#123;parent_element.text&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">hasattr</span>(parent_element, <span class="string">&#x27;metadata&#x27;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;父节点元数据: <span class="subst">&#123;<span class="built_in">vars</span>(parent_element.metadata)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;未找到父节点 (ID: <span class="subst">&#123;parent_id&#125;</span>)&quot;</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 打印表格前3个节点的内容</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n表格前3个节点内容:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">max</span>(<span class="number">0</span>, i-<span class="number">3</span>), i):</span><br><span class="line">            prev_element = element_index_map.get(j)</span><br><span class="line">            <span class="keyword">if</span> prev_element:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;节点 <span class="subst">&#123;j&#125;</span> (<span class="subst">&#123;prev_element.category&#125;</span>):&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(prev_element.text)</span><br><span class="line">                </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line"></span><br><span class="line">text_elements = [el <span class="keyword">for</span> el <span class="keyword">in</span> elements <span class="keyword">if</span> el.category == <span class="string">&quot;Text&quot;</span>]</span><br><span class="line">table_elements = [el <span class="keyword">for</span> el <span class="keyword">in</span> elements <span class="keyword">if</span> el.category == <span class="string">&quot;Table&quot;</span>]</span><br></pre></td></tr></table></figure><p>执行结果，输出内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">表格数据:</span><br><span class="line">表格元数据: &#123;&#x27;detection_class_prob&#x27;: 0.5629849433898926, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(839.0340576171875), np.float64(1001.4764404296875)), (np.float64(839.0340576171875), np.float64(1920.586669921875)), (np.float64(1587.2479248046875), np.float64(1920.586669921875)), (np.float64(1587.2479248046875), np.float64(1001.4764404296875))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b5252b0&gt;), &#x27;links&#x27;: [&#123;&#x27;text&#x27;: &quot;Forbes : The World &#x27; s Billionaires website ( https :// www . forb&quot;, &#x27;url&#x27;: &#x27;https://www.forbes.com/billionaires/&#x27;, &#x27;start_index&#x27;: 0&#125;, &#123;&#x27;text&#x27;: &quot;Forbes : The World &#x27; s Billionaires website ( https :// www . forb&quot;, &#x27;url&#x27;: &#x27;https://www.forbes.com/billionaires/&#x27;, &#x27;start_index&#x27;: 0&#125;], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 1, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;, &#x27;parent_id&#x27;: &#x27;b379afb3fd875896f879cc4cfc441305&#x27;&#125;</span><br><span class="line">表格内容:</span><br><span class="line">Publisher Whale Media Investments Forbes family Publication First published Forbes March 1987[1] Latest publication April 4, 2023 Current list details (2023)[2] Wealthiest Bernard Arnault Net worth (1st) US$211 billion Number of billionaires 2,640 (from 2668) Total list net worth value US$12.2 trillion (from US$ 12.7 trillion) Number of women 337 New members to the 150 list Forbes: The World&#x27;s Billionaires website (https://www.forb es.com/billionaires/)</span><br><span class="line"></span><br><span class="line">父节点信息:</span><br><span class="line">类型: Title</span><br><span class="line">内容: Methodology</span><br><span class="line">父节点元数据: &#123;&#x27;detection_class_prob&#x27;: 0.7953538298606873, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(98.62982255709053), np.float64(1510.925048828125)), (np.float64(98.62982255709053), np.float64(1569.5582275390625)), (np.float64(435.21123011467625), np.float64(1569.5582275390625)), (np.float64(435.21123011467625), np.float64(1510.925048828125))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b5266f0&gt;), &#x27;links&#x27;: [], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 1, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;&#125;</span><br><span class="line"></span><br><span class="line">表格前3个节点内容:</span><br><span class="line">节点 12 (Title):</span><br><span class="line">Methodology</span><br><span class="line">节点 13 (NarrativeText):</span><br><span class="line">Each year, Forbes employs a team of over 50 reporters from a variety of countries to track the activity of the world&#x27;s wealthiest individuals[7] and sometimes groups or families – who share wealth. Preliminary surveys are sent to those who may qualify for the list. According to Forbes, they received three types of responses – some people try to inflate their wealth, others cooperate but leave out details,</span><br><span class="line">节点 14 (UncategorizedText):</span><br><span class="line">Publication details</span><br><span class="line">--------------------------------------------------</span><br><span class="line"></span><br><span class="line">表格数据:</span><br><span class="line">表格元数据: &#123;&#x27;detection_class_prob&#x27;: 0.8833286762237549, &#x27;coordinates&#x27;: CoordinatesMetadata(points=((np.float64(102.6220932006836), np.float64(929.1338500976562)), (np.float64(102.6220932006836), np.float64(1154.2158203125)), (np.float64(765.6319580078125), np.float64(1154.2158203125)), (np.float64(765.6319580078125), np.float64(929.1338500976562))), system=&lt;unstructured.documents.coordinates.PixelSpace object at 0x15b61dd60&gt;), &#x27;links&#x27;: [], &#x27;last_modified&#x27;: &#x27;2025-07-16T19:30:42&#x27;, &#x27;_known_field_names&#x27;: frozenset(&#123;&#x27;filename&#x27;, &#x27;file_directory&#x27;, &#x27;attached_to_filename&#x27;, &#x27;link_texts&#x27;, &#x27;image_url&#x27;, &#x27;emphasized_text_tags&#x27;, &#x27;link_start_indexes&#x27;, &#x27;sent_to&#x27;, &#x27;signature&#x27;, &#x27;cc_recipient&#x27;, &#x27;key_value_pairs&#x27;, &#x27;image_mime_type&#x27;, &#x27;page_name&#x27;, &#x27;coordinates&#x27;, &#x27;detection_class_prob&#x27;, &#x27;subject&#x27;, &#x27;parent_id&#x27;, &#x27;url&#x27;, &#x27;detection_origin&#x27;, &#x27;header_footer_type&#x27;, &#x27;link_urls&#x27;, &#x27;bcc_recipient&#x27;, &#x27;table_as_cells&#x27;, &#x27;emphasized_text_contents&#x27;, &#x27;image_base64&#x27;, &#x27;is_continuation&#x27;, &#x27;category_depth&#x27;, &#x27;orig_elements&#x27;, &#x27;image_path&#x27;, &#x27;data_source&#x27;, &#x27;email_message_id&#x27;, &#x27;filetype&#x27;, &#x27;page_number&#x27;, &#x27;text_as_html&#x27;, &#x27;last_modified&#x27;, &#x27;links&#x27;, &#x27;sent_from&#x27;, &#x27;languages&#x27;&#125;), &#x27;filetype&#x27;: &#x27;application/pdf&#x27;, &#x27;languages&#x27;: [&#x27;eng&#x27;], &#x27;page_number&#x27;: 2, &#x27;file_directory&#x27;: &#x27;data/复杂PDF&#x27;, &#x27;filename&#x27;: &#x27;billionaires_page-1-5.pdf&#x27;, &#x27;parent_id&#x27;: &#x27;feb0e76147077250a13cdb0f842659a3&#x27;&#125;</span><br><span class="line">表格内容:</span><br><span class="line">Icon Description Has not changed from the previous ranking. Has increased from the previous ranking. Has decreased from the previous ranking.</span><br><span class="line">...</span><br><span class="line">2019</span><br><span class="line">节点 54 (NarrativeText):</span><br><span class="line">In the 33rd annual Forbes list of the world&#x27;s billionaires, the list included 2,153 billionaires with a total net wealth of $8.7 trillion, down 55 members and $400 billion from 2018.[14] The U.S. continued to have the most billionaires in the world, with a record of 609, while China dropped to 324 (when not including Hong Kong, Macau and Taiwan).[14]</span><br><span class="line">--------------------------------------------------</span><br><span class="line">……</span><br></pre></td></tr></table></figure><h1 id="通过调用LlamaParser来解析表格"><a href="#通过调用LlamaParser来解析表格" class="headerlink" title="通过调用LlamaParser来解析表格"></a>通过调用LlamaParser来解析表格</h1><ul><li>核心功能：<ul><li>自动将表格转换为markdown格式</li><li>尝试识别并添加表格标题</li><li>保持表格结构化输出</li></ul></li><li>API参数：<ul><li>preserve_layout_alignment_across_pages=True处理跨页表格</li><li>take_screenshot=True可获取页面截图辅助分析</li></ul></li><li>局限性：<ul><li>需要调用API，可能产生费用</li><li>标题识别仍存在误判情况（如将页眉误认为年份）</li></ul></li></ul><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"><span class="keyword">from</span> llama_index.llms.openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> llama_index.embeddings.openai <span class="keyword">import</span> OpenAIEmbedding</span><br><span class="line"><span class="keyword">from</span> llama_index.core <span class="keyword">import</span> Settings</span><br><span class="line"><span class="keyword">from</span> llama_parse <span class="keyword">import</span> LlamaParse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载环境变量（确保有OpenAI API密钥）</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置基础模型</span></span><br><span class="line">embed_model = OpenAIEmbedding(model=<span class="string">&quot;text-embedding-3-small&quot;</span>)</span><br><span class="line">llm = OpenAI(</span><br><span class="line">    model=os.getenv(<span class="string">&quot;DEEPSEEK_MODEL_NAME&quot;</span>),  <span class="comment"># DeepSeek API 支持的模型名称</span></span><br><span class="line">    api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>),  <span class="comment"># 从环境变量加载API key</span></span><br><span class="line">    base_url=os.getenv(<span class="string">&quot;DEEPSEEK_BASE_URL&quot;</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">Settings.llm = llm</span><br><span class="line">Settings.embed_model = embed_model</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义PDF路径</span></span><br><span class="line">pdf_path = <span class="string">&quot;data/复杂PDF/billionaires_page-1-5.pdf&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录开始时间</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用LlamaParse解析PDF, 需要付费，注意数据安全使用</span></span><br><span class="line">documents = LlamaParse(result_type=<span class="string">&quot;markdown&quot;</span>).load_data(pdf_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 记录结束时间</span></span><br><span class="line">end_time = time.time()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;PDF解析耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印解析结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n解析后的文档内容:&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i, doc <span class="keyword">in</span> <span class="built_in">enumerate</span>(documents, <span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n文档 <span class="subst">&#123;i&#125;</span> 内容:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(doc.text)</span><br></pre></td></tr></table></figure><ul><li>核心能力：专为LLM优化的文档解析平台，处理含表格/图表/图像的复杂文档</li><li>页眉页脚处理：提供消除页眉页脚的配置选项，可改善跨页表格的识别准确率</li><li>生产环境适用：每周处理1000万+文档，支持企业级应用场景</li></ul><h1 id="工具对比及选择建议"><a href="#工具对比及选择建议" class="headerlink" title="工具对比及选择建议"></a>工具对比及选择建议</h1><ul><li>简单表格提取：Camelot或PDFPlumber</li><li>需要上下文关联：Unstructured或LlamaParser</li><li>跨页复杂表格：优先考虑LlamaParser</li></ul>]]></content>
    
    
    <summary type="html">学习大模型RAG系统学习笔记第十讲</summary>
    
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/categories/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
    
    <category term="大模型RAG系统" scheme="https://jinglv.github.io/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8BRAG%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
</feed>
